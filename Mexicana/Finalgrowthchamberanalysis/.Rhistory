loggs.seq <- seq(from=min(log(fgrote$genomesize)),to=max(log(fgrote$genomesize)), by=0.001)
loggs.mat <- cbind(rep(1,length(loggs.seq)), loggs.seq) #DESIGN matrix with 3 columns, first 2 columns are =1 to pick up individual random effect for leaf length and leaf elongation, and the third is a sequence for the axis of log genome size
cs.params <- samples[,c("U.z.indivCS","beta.GS")] #PARAMETER matrix
coef.means <- apply(cs.params, MAR=2, FUN="mean") #take the posterior mean for the central tendency curve
allpreds <- as.matrix(cs.params) %*% t(loggs.mat) #evaluate the linear predictor for every realization
allpreds <- exp(allpreds)
#dim(allpreds)
preds.upper <- apply(allpreds,MAR=2,FUN="quantile",probs=c(0.975)) #upper bounds of our predictor
preds.lower <- apply(allpreds,MAR=2,FUN="quantile",probs=c(0.025))
ymin <- min(c(predmean,preds.upper,preds.lower,stoma),na.rm=TRUE)
stoma.positions <- str_detect(names(fgrote),"stom*")
stoma <- fgrote[,names(fgrote)[stoma.positions]]
stoma <- 0.0001 * stoma #convert mircons to centimeters
gensize.conforming <- matrix(fgrote$genomesize,nrow=nrow(fgrote),ncol=61,byrow=FALSE) #61 columns for the total number of measures of stoma
loggs.seq <- seq(from=min(log(fgrote$genomesize)),to=max(log(fgrote$genomesize)), by=0.001)
loggs.mat <- cbind(rep(1,length(loggs.seq)), loggs.seq) #DESIGN matrix with 3 columns, first 2 columns are =1 to pick up individual random effect for leaf length and leaf elongation, and the third is a sequence for the axis of log genome size
cs.params <- samples[,c("U.z.indivCS","beta.GS")] #PARAMETER matrix
coef.means <- apply(cs.params, MAR=2, FUN="mean") #take the posterior mean for the central tendency curve
allpreds <- as.matrix(cs.params) %*% t(loggs.mat) #evaluate the linear predictor for every realization
allpreds <- exp(allpreds)
#dim(allpreds)
preds.upper <- apply(allpreds,MAR=2,FUN="quantile",probs=c(0.975)) #upper bounds of our predictor
preds.lower <- apply(allpreds,MAR=2,FUN="quantile",probs=c(0.025))
ymin <- min(c(predmean,preds.upper,preds.lower,stoma),na.rm=TRUE)
ymax <- max(c(predmean,preds.upper,preds.lower,stoma),na.rm=TRUE)
stoma
ymin <- min(c(predmean,preds.upper,preds.lower,as.vector(stoma)),na.rm=TRUE)
View(predmean)
cs.params <- samples[,c("U.z.indivCS","beta.GS")] #PARAMETER matrix
coef.means <- apply(cs.params, MAR=2, FUN="mean") #take the posterior mean for the central tendency curve
allpreds <- as.matrix(cs.params) %*% t(loggs.mat) #evaluate the linear predictor for every realization
View(allpreds)
allpreds <- exp(allpreds)
View(allpreds)
preds.upper <- apply(allpreds,MAR=2,FUN="quantile",probs=c(0.975)) #upper bounds of our predictor
preds.lower <- apply(allpreds,MAR=2,FUN="quantile",probs=c(0.025))
predmean <- exp(loggs.mat %*% coef.means) #matrix math for the central tendency curve
allpreds <- as.matrix(cs.params) %*% t(loggs.mat) #evaluate the linear predictor for every realization
allpreds <- exp(allpreds)
preds.upper <- apply(allpreds,MAR=2,FUN="quantile",probs=c(0.975)) #upper bounds of our predictor
preds.lower <- apply(allpreds,MAR=2,FUN="quantile",probs=c(0.025))
ymin <- min(c(predmean,preds.upper,preds.lower,as.vector(stoma)),na.rm=TRUE)
ymin <- min(c(predmean,preds.upper,preds.lower,stoma),na.rm=TRUE)
ymin <- min(c(predmean,preds.upper,preds.lower,as.matrix(stoma)),na.rm=TRUE)
ymax <- max(c(predmean,preds.upper,preds.lower,as.matrix(stoma)),na.rm=TRUE)
plot(as.vector(gensize.conforming), as.vector(as.matrix(stoma)),pch=".",cex=2,xlab="Genome Size (pg)",ylab="Stomatal Cell Size (cm)",bty="n")
n.polygons <- length(loggs.seq)-1
for(polygon in 1:n.polygons){
polygon(
x=exp(c(loggs.seq[polygon],loggs.seq[polygon],loggs.seq[polygon+1],loggs.seq[polygon+1])),
y=c(preds.lower[polygon],preds.upper[polygon],preds.upper[polygon+1],preds.lower[polygon+1]),
col="gray85",border=NA)
}
lines(exp(loggs.seq),predmean) # zero effect of genome size on leaf elongation
points(as.vector(gensize.conforming), as.vector(LEdiffs),pch=21,cex=0.8,bg="grey80")
points(as.vector(gensize.conforming), as.vector(stoma),pch=21,cex=0.8,bg="grey80")
plot(as.vector(gensize.conforming), as.vector(as.matrix(stoma)),pch=".",cex=2,xlab="Genome Size (pg)",ylab="Stomatal Cell Size (cm)",bty="n",type=n)
plot(as.vector(gensize.conforming), as.vector(as.matrix(stoma)),pch=".",cex=2,xlab="Genome Size (pg)",ylab="Stomatal Cell Size (cm)",bty="n",type="n"")
plot(as.vector(gensize.conforming), as.vector(as.matrix(stoma)),pch=".",cex=2,xlab="Genome Size (pg)",ylab="Stomatal Cell Size (cm)",bty="n",type="n")
plot(as.vector(gensize.conforming), as.vector(as.matrix(stoma)),pch=".",cex=2,xlab="Genome Size (pg)",ylab="Stomatal Cell Size (cm)",bty="n",type="n")
points(as.vector(gensize.conforming), as.vector(as.matrix(stoma)),pch=".",cex=2,bg="grey80")
plot(as.vector(gensize.conforming), as.vector(as.matrix(stoma)),pch=".",cex=2,xlab="Genome Size (pg)",ylab="Stomatal Cell Size (cm)",bty="n",type="n")
n.polygons <- length(loggs.seq)-1
for(polygon in 1:n.polygons){
polygon(
x=exp(c(loggs.seq[polygon],loggs.seq[polygon],loggs.seq[polygon+1],loggs.seq[polygon+1])),
y=c(preds.lower[polygon],preds.upper[polygon],preds.upper[polygon+1],preds.lower[polygon+1]),
col="gray85",border=NA)
}
lines(exp(loggs.seq),predmean) # zero effect of genome size on leaf elongation
points(as.vector(gensize.conforming), as.vector(as.matrix(stoma)),pch=".",cex=2,bg="grey80")
fgrote<-read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/grote_Indexmoms_groundedLL_d16NA.csv")
stoma.positions <- str_detect(names(fgrote),"stom*")
stoma <- fgrote[,names(fgrote)[stoma.positions]]
stoma <- 0.0001 * stoma #convert mircons to centimeters
leaflength.positions <- str_detect(names(fgrote), "leaf3diff*")#change this to leaf3diff*
leaflength <- fgrote[,names(fgrote)[leaflength.positions]]
n.cells <- apply(!is.na(stoma), MAR=1, FUN="sum")
DAGLL.jags <- jags.model("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/DAG_twomediator_NomomGS.txt", list(leaflength=log(leaflength),stoma=log(stoma),n.mothers=max(fgrote$momindex),n.indiv=dim(fgrote)[1],n.cells=n.cells,n.times=3,mother.index=fgrote$momindex,GS=log(fgrote$genomesize)),n.chains=2)#n.times=3
update(DAGLL.jags, n.iter=20000)
100000/100
DAGLL.samples <- coda.samples(DAGLL.jags, c("beta.GS","tao.GS","GS.contrast","U.z.indivCS","U.z.indivLL","U.z.indivLE","U.tao.LL","U.LE.coeffs","U.StCS.coeffs"),n.iter=100000, thin=100)
mcmcplot(DAGLL.samples)
chain1<- as.matrix(DAGLL.samples[[1]])
chain2<- as.matrix(DAGLL.samples[[2]])
write.csv(chain1,"~/Desktop/DAGLLalltrack2.jags.1mil.chain1.csv")
write.csv(chain2,"~/Desktop/DAGLLalltrack2.jags.1mil.chain2.csv")
samples<- rbind(chain1,chain2)
fgrote<-read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/grote_Indexmoms_groundedLL_d16NA.csv")
stoma.positions <- str_detect(names(fgrote),"stom*")
stoma <- fgrote[,names(fgrote)[stoma.positions]]
stoma <- 0.0001 * stoma #convert mircons to centimeters
gensize.conforming <- matrix(fgrote$genomesize,nrow=nrow(fgrote),ncol=61,byrow=FALSE) #61 columns for the total number of measures of stoma
loggs.seq <- seq(from=min(log(fgrote$genomesize)),to=max(log(fgrote$genomesize)), by=0.001)
loggs.mat <- cbind(rep(1,length(loggs.seq)), loggs.seq) #DESIGN matrix with 3 columns, first 2 columns are =1 to pick up individual random effect for leaf length and leaf elongation, and the third is a sequence for the axis of log genome size
cs.params <- samples[,c("U.z.indivCS","beta.GS")] #PARAMETER matrix
coef.means <- apply(cs.params, MAR=2, FUN="mean") #take the posterior mean for the central tendency curve
predmean <- exp(loggs.mat %*% coef.means) #matrix math for the central tendency curve
allpreds <- as.matrix(cs.params) %*% t(loggs.mat) #evaluate the linear predictor for every realization
allpreds <- exp(allpreds)
#dim(allpreds)
preds.upper <- apply(allpreds,MAR=2,FUN="quantile",probs=c(0.975)) #upper bounds of our predictor
preds.lower <- apply(allpreds,MAR=2,FUN="quantile",probs=c(0.025))
ymin <- min(c(predmean,preds.upper,preds.lower,as.matrix(stoma)),na.rm=TRUE)
ymax <- max(c(predmean,preds.upper,preds.lower,as.matrix(stoma)),na.rm=TRUE)
plot(as.vector(gensize.conforming), as.vector(as.matrix(stoma)),pch=".",cex=2,xlab="Genome Size (pg)",ylab="Stomatal Cell Size (cm)",bty="n",type="n")
n.polygons <- length(loggs.seq)-1
for(polygon in 1:n.polygons){
polygon(
x=exp(c(loggs.seq[polygon],loggs.seq[polygon],loggs.seq[polygon+1],loggs.seq[polygon+1])),
y=c(preds.lower[polygon],preds.upper[polygon],preds.upper[polygon+1],preds.lower[polygon+1]),
col="gray85",border=NA)
}
lines(exp(loggs.seq),predmean) # zero effect of genome size on leaf elongation
points(as.vector(gensize.conforming), as.vector(as.matrix(stoma)),pch=".",cex=2,bg="grey80")
library("lme4")
library(lme4)
install.packages("lme4")
library(lme4)
fgrote<-read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/grote_Indexmoms.csv")
View(fgrote)
cslme4 <- fgrote[,c("fullid","momindex",]
cslme4 <- fgrote[,c("fullid","momindex"]
cslme4 <- fgrote[,c("fullid","momindex")]
stoma.positions <- str_detect(names(fgrote),"stom*")
library(rjags)
library(stringr)
library(mcmcplots)
stoma.positions <- str_detect(names(fgrote),"stom*")
stoma <- fgrote[,names(fgrote)[stoma.positions]]
cslme4 <- fgrote[,c("fullid","momindex","genomesize")]
cslme4 <- cbind(as.data.frame(cslme4,stoma))
cslme4 <- data.frame(cslme4,stoma)
View(cslme4)
?reshape
cslme4.long <- reshape(cslme4, varying= list(4:64), ids="fullid")
cslme4.long <- reshape(cslme4, varying= list(4:64), ids="fullid",direction=long)
cslme4.long <- reshape(cslme4, varying= list(4:64), ids="fullid",direction="long")
cslme4.long <- reshape(cslme4, varying= list(4:64), idvar="fullid",direction="long")
View(cslme4.long)
names(cslme4.long)
names(cslme4.long) <- c("fullid","momindex","genomesize","replicate","cellsize")
cslme4.long
View(cslme4.long)
is.na(cslme4.long)
sum(complete.cases(cslme4.long))
cslme4.tmp <- subset(cslme4, subset = !is.na(cellsize))
cslme4.tmp <- subset(cslme4, subset = !is.na(cslme4.long$cellsize))
View(cslme4.tmp)
cslme4.tmp <- subset(cslme4.long, subset = !is.na(cslme4.long$cellsize))
View(cslme4.tmp)
cslme4.long <- subset(cslme4.long, subset = !is.na(cslme4.long$cellsize))
remove(cslme4.tmp)
View(cslme4.long)
?lme4
?lme
?lmer
?lme
m.cs <- lme(log(cellsize) ~ log(genomesize), random= ~ 1|momindex/fullid )
library(nlme)
m.cs <- lme(log(cellsize) ~ log(genomesize), random= ~ 1|momindex/fullid )
m.cs <- lme(log(cellsize) ~ log(genomesize), random= ~ 1|momindex/fullid, data=cslme4.long )
summary(m.cs)
chain1<-read.csv("~/Desktop/DAGLLalltrack2.jags.1mil.chain1.csv")
chain2<-read.csv("~/Desktop/DAGLLalltrack2.jags.1mil.chain2.csv")
samples<- rbind(chain1,chain2)
mcmcplot(samples)
summary(samples)
chain1<-read.csv("~/Desktop/DAGLLedit.jags.1mil.chain1.csv")
View(chain1)
chain2<-read.csv("~/Desktop/DAGLLedit.jags.1mil.chain2.csv")
samples<- rbind(chain1,chain2)
summary(samples)
summar(m.cs)
summary(m.cs)
summary(samples)
summary(samples)
stoma <- 0.0001 * stoma #convert mircons to centimeters
cslme4 <- fgrote[,c("fullid","momindex","genomesize")]
cslme4 <- data.frame(cslme4,stoma)
cslme4.long <- reshape(cslme4, varying= list(4:64), idvar="fullid",direction="long")
names(cslme4.long) <- c("fullid","momindex","genomesize","replicate","cellsize")
sum(complete.cases(cslme4.long))
cslme4.long <- subset(cslme4.long, subset = !is.na(cslme4.long$cellsize))
m.cs <- lme(log(cellsize) ~ log(genomesize), random= ~ 1|momindex/fullid, data=cslme4.long )
summary(m.cs)
View(stoma)
View(cslme4.long)
summary(samples)
vcov(m.cs)
cor(vcov(m.cs))
sqrt(.061)
ll.lme <- fgrote[,c("fullid","momindex","genomesize")]
leaflength.positions <- str_detect(names(fgrote), "leaf3.*")#change this to leaf3diff*
leaflength <- fgrote[,names(fgrote)[leaflength.positions]]
View(leaflength)
fgrote$leaf3diff10 <- fgrote$leaf3.1 - fgrote$leaf3.0
fgrote$leaf3diff21 <- fgrote$leaf3.2 - fgrote$leaf3.1
fgrote$leaf3diff32 <- fgrote$leaf3.3 - fgrote$leaf3.2
LEdiffs <- as.matrix(cbind(fgrote$leaf3diff10,fgrote$leaf3diff21,fgrote$leaf3diff32))
View(LEdiffs)
View(fgrote)
fgrote$ll.1 <- fgrote$leaf3.1 - fgrote$leaf3.0
fgrote$ll.2 <- fgrote$leaf3.2 - fgrote$leaf3.0
fgrote$ll.3 <- fgrote$leaf3.3 - fgrote$leaf3.0
View(fgrote)
fgrote$ll.1
fgrote$ll.2
View(fgrote)
fgrote$ll.3
leaflengths < c(fgrote$ll.1, fgrote$ll.2)
leaflengths <- cbind(fgrote$ll.1, fgrote$ll.2)
leaflengths <- cbind(fgrote$ll.1, fgrote$ll.2, fgrote$ll.3)
View(leaflength)
View(leaflengths)
ll.lme <- data.frame(ll.me,leaflengths)
ll.lme <- data.frame(ll.lme,leaflengths)
View(ll.lme)
ll.lme.long <- reshape(ll.lme, varying= list(4:6), idvar="fullid",direction="long")
View(ll.lme.long)
names(ll.lme.long) <- c("fullid","momindex","genomesize","time","length")
sum(complete.cases(ll.lme.long))
ll.lme.long <- subset(ll.lme.long, subset = !is.na(ll.lme.long$length))
m.cs <- lme(log(cellsize) ~ log(genomesize), random= ~ 1|momindex/fullid, data=cslme4.long )
m.ll <- lme(log(length) ~ log(genomesize) + log(time), random= ~ 1 + log(time) | momindex/fullid, data=ll.lme.long )
m.ll <- lme(log(length) ~ log(genomesize) + log(time), random= ~ 1 + log(time) | momindex/fullid, data=ll.lme.long, maxIter=100 )
lmeControl(maxIter = 100, msVerbose = TRUE)
m.ll <- lme(log(length) ~ log(genomesize) + log(time), random= ~ 1 + log(time) | momindex/fullid, data=ll.lme.long)
fgrote<-read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/grote_Indexmoms_groundedLL_d16NA.csv")
stoma.positions <- str_detect(names(fgrote),"stom*")
stoma <- fgrote[,names(fgrote)[stoma.positions]]
stoma <- 0.0001 * stoma #convert mircons to centimeters
leaflength.positions <- str_detect(names(fgrote), "leaf3diff*")#change this to leaf3diff*
leaflength <- fgrote[,names(fgrote)[leaflength.positions]]
n.cells <- apply(!is.na(stoma), MAR=1, FUN="sum")
DAGLL.jags <- jags.model("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/DAG_twomediator_NomomGS.txt", list(leaflength=log(leaflength),stoma=log(stoma),n.mothers=max(fgrote$momindex),n.indiv=dim(fgrote)[1],n.cells=n.cells,n.times=3,mother.index=fgrote$momindex,GS=log(fgrote$genomesize)),n.chains=2)#n.times=3
update(DAGLL.jags, n.iter=20000)
DAGLL.samples <- coda.samples(DAGLL.jags, c("beta.GS","tao.GS","GS.contrast","U.z.indivCS","U.z.indivLL","U.z.indivLE","U.tao.LL","U.LE.coeffs","U.StCS.coeffs"),n.iter=100000, thin=100)
mcmcplot(DAGLL.samples)
chain1<- as.matrix(DAGLL.samples[[1]])
chain2<- as.matrix(DAGLL.samples[[2]])
write.csv(chain1,"~/Desktop/DAGLL10prior.jags.1mil.chain1.csv")
write.csv(chain2,"~/Desktop/DAGLL10prior.jags.1mil.chain2.csv")
fgrote<-read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/grote_Indexmoms_groundedLL_d16NA.csv")
stoma.positions <- str_detect(names(fgrote),"stom*")
stoma <- fgrote[,names(fgrote)[stoma.positions]]
stoma <- 0.0001 * stoma #convert mircons to centimeters
leaflength.positions <- str_detect(names(fgrote), "leaf3diff*")#change this to leaf3diff*
leaflength <- fgrote[,names(fgrote)[leaflength.positions]]
n.cells <- apply(!is.na(stoma), MAR=1, FUN="sum")
DAGLL.jags <- jags.model("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/DAG_twomediator_NomomGS.txt", list(leaflength=log(leaflength),stoma=log(stoma),n.mothers=max(fgrote$momindex),n.indiv=dim(fgrote)[1],n.cells=n.cells,n.times=3,mother.index=fgrote$momindex,GS=log(fgrote$genomesize)),n.chains=2)#n.times=3
update(DAGLL.jags, n.iter=20000)
DAGLL.samples <- coda.samples(DAGLL.jags, c("beta.GS","tao.GS","GS.contrast","U.z.indivCS","U.z.indivLL","U.z.indivLE","U.tao.LL","U.LE.coeffs","U.StCS.coeffs"),n.iter=100000, thin=100)
mcmcplot(DAGLL.samples)
data <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Teosinte_averages.csv")
View(data)
plot(data$X1C_GS ~ data$Altitude)
data <- read.csv("~/Desktop/Teosinte_perindividual.csv")
View(data)
data <- read.csv("~/Desktop/Teosinte_perindividual.csv")
View(data)
plot(data$genomesize, data$altitude)
plot(data$altitude,data$genomesize,)
library ( emma )
install.packages("rrBLUP")
library("rrBLUP")
lrdta <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_data.csv")
lrdta$X <- NULL
data <- subset(lrdta, lrdta$Region!="SWUS")
le1 <- as.data.frame(colnames(geno))
geno <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/Landrace_noSWUS_matrix.csv",header=TRUE,row.names=1)
A <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_kinshipmatrix.csv",row.names="X")
geno <- read.csv("~/Desktop/sandbox/Landrace_noSWUS_matrix.csv",header=TRUE,row.names=1)
A <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_kinshipmatrix.csv",row.names="X")
le1 <- as.data.frame(colnames(geno))
geno <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/Landrace_noSWUS_matrix.csv",header=TRUE,row.names=1)
le1 <- as.data.frame(colnames(geno))
names(le1)[1] <- "names"
le2 <- as.data.frame(data$Row.names)
phenoorder <- merge(le1, data, by.x="names", by.y="Row.names",sort=FALSE)
library ( emma )
install.packages("rrBLUP")
library ( emma )
library("rrBLUP")
lrdta <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_data.csv")
lrdta$X <- NULL
data <- subset(lrdta, lrdta$Region!="SWUS")
le1 <- as.data.frame(colnames(geno))
names(le1)[1] <- "names"
le2 <- as.data.frame(data$Row.names)
phenoorder <- merge(le1, data, by.x="names", by.y="Row.names",sort=FALSE)
geno <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/Landrace_noSWUS_matrix.csv",header=TRUE,row.names=1)
A <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_kinshipmatrix.csv",row.names="X")
le1 <- as.data.frame(colnames(geno))
names(le1)[1] <- "names"
le2 <- as.data.frame(data$Row.names)
phenoorder <- merge(le1, data, by.x="names", by.y="Row.names",sort=FALSE)
gs <- t ( as.matrix ( phenoorder$GS_bp, ncol = 1 ) )
gsgb <- gs/1000000000
alt <- t ( as.matrix ( phenoorder$Altitude , ncol = 1 ) )
alt <- alt - mean ( alt ) + 0.5
A <- as.matrix ( A )
out.gsgb <- emma.REML.t ( gsgb , alt , K = A )
out.gsgb
crap <- read.csv("~/Desktop/Teosinte_perindividual.csv")
plot(crap$altitude,crap$genomesize)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
ggplot(crap, aes(altitude, genomesize, fill=speices),) + ylab("1C Genome Size") + theme(plot.background = element_rect(fill = "transparent",colour = NA))
ggplot(crap, aes(altitude, genomesize, fill=species),) + ylab("1C Genome Size") + theme(plot.background = element_rect(fill = "transparent",colour = NA))
View(crap)
ggplot(crap, aes(altitude, genomesize, fill=species),) + ylab("1C Genome Size") + theme(plot.background = element_rect(fill = "transparent",colour = NA)) + geom_points()
ggplot(crap, aes(altitude, genomesize, fill=species),) + ylab("1C Genome Size") + theme(plot.background = element_rect(fill = "transparent",colour = NA)) + geom_point()
ggplot(crap, aes(altitude, genomesize, fill=species),) + ylab("1C Genome Size") + theme(plot.background = element_rect(fill = "transparent",colour = NA)) + geom_boxplot()
ggplot(crap, aes(altitude, genomesize, fill=species),) + ylab("1C Genome Size") + theme(plot.background = element_rect(fill = "transparent",colour = NA)) + geom_point()
View(crap)
crap2 <- read.csv("~/Desktop/Teosinte_perindividual.csv")
crap <- subset(crap, crap$altitude=! "NA")
crap <- subset(crap, crap$altitude!= "NA")
View(crap)
plot(crap$altitude,crap$genomesize)
ggplot(crap, aes(altitude, genomesize, fill=species),) + ylab("1C Genome Size") + theme(plot.background = element_rect(fill = "transparent",colour = NA)) + geom_boxplot()
ggplot(crap, aes(altitude, genomesize, fill=species),) + ylab("1C Genome Size") + theme(plot.background = element_rect(fill = "transparent",colour = NA)) + geom_point()
ggplot(crap, aes(altitude, genomesize, fill=species),) + ylab("1C Genome Size") + geom_boxplot()
ggplot(crap, aes(altitude, genomesize, fill=species),) + ylab("1C Genome Size") + geom_point()
ggplot(crap, aes(altitude, genomesize, shape=factor(species)),) + ylab("1C Genome Size") + geom_point()
ggplot(crap, aes(altitude, genomesize, shape=factor(species)),) + ylab("1C Genome Size") + geom_point(fill=species)
ggplot(crap, aes(altitude, genomesize, shape=factor(species)),) + ylab("1C Genome Size") + geom_point(aes(fill=species))
ggplot(crap, aes(altitude, genomesize, shape=factor(species)),) + ylab("1C Genome Size") + geom_point()
ggplot(crap, aes(altitude, genomesize, shape=factor(species)),) + ylab("1C Genome Size") + geom_point(size=3)
head(crap)
library(dplyr)
install.packages("dplyr")
library(dplyr)
head(crap)
filter(crap,species=="mexicana") %>% ggplot()+geom_point()
filter(crap,species=="mexicana") %>% ggplot(aes(y=genomesize,x=altitude))+geom_point()
filter(crap,species=="mexicana") %>% ggplot(aes(y=genomesize,x=altitude))+geom_point()+geom_smooth(method="lm")
mex<-subset(crap,species=="mexicana")
summary(lm(data=mex,genomeisze~pop+altitude))
summary(lm(data=mex,genomesize~pop+altitude))
summary(lm(data=mex,genomesize~Pop+altitude))
lm(data=mex,genomesize~altitude)
mex
sumary(lm(data=mex,genomesize~altitude))
summary(lm(data=mex,genomesize~altitude))
mexres<-lm(data=mex,genomesize~altitude)$residuals
mexres
mexres<-lm(data=mex,genomesize~Pop)$residuals
summary(lm(mexres~mex$altitude))
plot(mexres~mex$altitude)
summary(lm(data=mex,genomesize~Pop+altitude))
library(lme4)
summary(lme4(data=mex,genomesize~altitude+1|Pop))
summary(lmer(data=mex,genomesize~altitude+1|Pop))
mex
lenth(factor(mex$Pop))
length(factor(mex$Pop))
factor(mex$Pop)
levels(factor(mex$Pop))
summary(lmer(data=mex,genomesize~altitude+1|Pop))
mex$Pop[1]
mex$Pop[1]==mnex$Pop[2]
mex$Pop[1]==mex$Pop[2]
sample(mex,10,replace=T)
bobmex=mex[c(1,3,5,7,9,11,13,15,17,19),]
bobmex
summary(lm(bobmex$genomesize~bobmex$altitude))
bobmex=mex[c(1,2,5,6,9,12,13,15,17,19),]
summary(lm(bobmex$genomesize~bobmex$altitude))
summary(lmer(data=mex,genomesize~altitude+(1|Pop)))
summary(lmer(data=mex,genomesize~altitude+1|Pop))
summary(lmer(data=mex,genomesize~altitude+(1|Pop)))
install.packages(lmerTest)
install.packages("lmerTest")
library(lmerTest)
summary(lmer(data=mex,genomesize~altitude+(1|Pop)))
filter(crap,species=="mexicana") %>% summary(lmer(.,genomesize~altitude+(1|Pop)))
filter(crap,species=="mexicana") %>% summary(lmer($.$,genomesize~altitude+(1|Pop)))
parv=filter(crap,species=="parviglumis") %>%
parv=filter(crap,species=="parviglumis")
summary(lmer(parv,genomesize~altitude+(1|Pop)))
mex=filter(crap,species=="mexicana")
summary(lmer(mex,genomesize~altitude+(1|Pop)))
summary(lmer(data=mex,genomesize~altitude+(1|Pop)))
summary(lmer(data=parv,genomesize~altitude+(1|Pop)))
summary(lmer(data=parv,genomesize~altitude+(1|Pop)))
parv=filter(crap,species=="parviglumis")
summary(lmer(data=parv,genomesize~altitude+(1|Pop)))
head(crap)
summary(lmer(data=crap,genomesize~altitude+species+(1|Pop)))
ggplot(crap, aes(altitude, genomesize, fill=species),) + ylab("1C Genome Size") + geom_boxplot()
t
ggplot(crap, aes(altitude, genomesize, shape=factor(species))) + ylab("1C Genome Size") + geom_point(size=3)
filter(crap,altitude>1750 || altitude < 1250)
ggplot(aes(altitude, genomesize, shape=factor(species))) + ylab("1C Genome Size") + geom_point(size=3)
filter(crap,altitude>1750 || altitude < 1250) %>%
ggplot(aes(altitude, genomesize, shape=factor(species))) + ylab("1C Genome Size") + geom_point(size=3)
filter(crap,altitude>1750 || altitude < 1250) %>%
ggplot(aes(altitude, genomesize, shape=factor(species))) + ylab("1C Genome Size") + geom_point(size=3)
filter(crap,abs(altitude-1500)>250) %>%
ggplot(aes(altitude, genomesize, shape=factor(species))) + ylab("1C Genome Size") + geom_point(size=3)
summary(lmer(data=bob,genomesize~altitude+species+(1|Pop)))
summary(lmer(data=bob,genomesize~altitude+species+(1|Pop)))
bob=filter(crap,abs(altitude-1500)>250)
summary(lmer(data=bob,genomesize~altitude+species+(1|Pop)))
out.gsgb
out.gsgb <- emma.REML.t ( gsgb , alt , K = A )
emma.REML.t
source("~/Desktop/jri_emma_fun.txt")
source("~/Desktop/jri_emma_fun.txt")
out.gsgb <- emma.REML.t_beta ( gsgb , alt , K = A )
out.gsgb <- emma::emma.REML.t_beta ( gsgb , alt , K = A )
emma.eigen.L.w.Z
source("~/Desktop/jri_emma_fun.txt")
out.gsgb <- emma.REML.t_beta ( gsgb , alt , K = A )
out.gsgb <- emma.REML.t ( gsgb , alt , K = A )
out.gsgb <- emma.REML.t ( gsgb , alt , K = A )
source("~/Desktop/jri_emma_fun.txt")
out.gsgb <- emma.REML.t_beta ( gsgb , alt , K = A )
out.gsgb$beta
out.gsgb
-0.0001104795*100
-0.0001104795*100*1E6
-0.0001104795*1E6
gsgb
alt
-0.0001104795*1E6
-0.0001104795*1E3
-0.0001104795*1E3*100
library ( emma )
library("rrBLUP")
lrdta <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_data.csv")
lrdta$X <- NULL
data <- subset(lrdta, lrdta$Region!="SWUS")
le1 <- as.data.frame(colnames(geno))
names(le1)[1] <- "names"
le2 <- as.data.frame(data$Row.names)
phenoorder <- merge(le1, data, by.x="names", by.y="Row.names",sort=FALSE)
lrdta <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_data.csv")
lrdta$X <- NULL
data <- subset(lrdta, lrdta$Region!="SWUS")
geno <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/Landrace_noSWUS_matrix.csv",header=TRUE,row.names=1)
A <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_kinshipmatrix.csv",row.names="X")
le1 <- as.data.frame(colnames(geno))
names(le1)[1] <- "names"
le2 <- as.data.frame(data$Row.names)
#again, this is where i realize i had to rename 626.2 to 626.1
phenoorder <- merge(le1, data, by.x="names", by.y="Row.names",sort=FALSE)
lrdta <- read.csv("~/Desktop/sandbox/Landrace_data.csv")
gs <- t ( as.matrix ( phenoorder$GS_bp, ncol = 1 ) )
gsgb <- gs/1000000000
alt <- t ( as.matrix ( phenoorder$Altitude , ncol = 1 ) )
alt <- alt - mean ( alt ) + 0.5
A <- as.matrix ( A )
source("~/Desktop/jri_emma_fun.txt")
out.gsgb <- emma.REML.t ( gsgb , alt , K = A )
out.gsgb <- emma.REML.t_beta ( gsgb , alt , K = A )
out.gsgb
knob <- t ( as.matrix ( phenoorder$X180knobbp, ncol = 1 ) )
knobgb <- knob/1000000000
out.knobgb <- emma.REML.t_beta ( knobgb , alt , K = A )
out.knobgb
tr1 <- t ( as.matrix ( phenoorder$TR1bp, ncol = 1 ) )
tr1gb <- tr1/1000000000
out.tr1gb <- emma.REML.t ( tr1gb , alt , K = A )
out.tr1gb <- emma.REML.t_beta ( tr1gb , alt , K = A )
out.tr1gb
out.centcgb <- emma.REML.t_beta ( centcgb , alt , K = A )
centc <- t ( as.matrix ( phenoorder$CentCbp, ncol = 1 ) )
centcgb <- centc/1000000000
out.centcgb <- emma.REML.t ( centcgb , alt , K = A )
out.centcgb <- emma.REML.t_beta ( centcgb , alt , K = A )
out.centcgb
tes <- t ( as.matrix ( phenoorder$TotallTebp, ncol = 1 ) )
tesgb <- tes/1000000000
tes <- t ( as.matrix ( phenoorder$TotallTebp, ncol = 1 ) )
tesgb <- tes/1000000000
out.tesgb <- emma.REML.t ( tesgb , alt , K = A )
out.tesgb <- emma.REML.t_beta ( tesgb , alt , K = A )
out.tesgb
fin.te <- emma.REML.t_beta ( tes , alt , X0 =  cbind ( rep ( 1 , 83 ) , c ( gsgb ) ) , K = A )
fin.te
gsgb <- gs/1000000000
1000000000/1000000000
fin.knob <- emma.REML.t_beta ( knobgb , alt , X0 =  cbind ( rep ( 1 , 83 ) , c ( gsgb ) ) , K = A )
fin.knob
fin.tr1 <- emma.REML.t_beta ( tr1gb , alt , X0 =  cbind ( rep ( 1 , 83 ) , c ( gsgb ) ) , K = A )
fin.tr1
fin.centc <- emma.REML.t_beta ( centcgb , alt , X0 =  cbind ( rep ( 1 , 83 ) , c ( gsgb ) ) , K = A )
fin.centc
data <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/FISHcorrelation")
View(data)
library(ggplot2)
View(data)
ggplot(data, aes(knob180, X180knobmb))
ggplot(data, aes(knob180, X180knobmb)) + geom_point()
ggplot(data, aes(knob180, X180knobmb)) + ylab("Measured Knob Content") + xlab("Observed Knob Count") + geom_point()
ggplot(crap, aes(altitude, genomesize, fill=species),) + ylab("1C Genome Size") + geom_boxplot() + geom_abline()
ggplot(data, aes(knob180, X180knobmb)) + ylab("Measured Knob Content") + xlab("Observed Knob Count") + geom_point() + geom_abline()
ggplot(data, aes(knob180, X180knobmb)) + ylab("Measured Knob Content") + xlab("Observed Knob Count") + geom_point() + geom_abline(method="lm")
ggplot(data, aes(knob180, X180knobmb)) + ylab("Measured Knob Content") + xlab("Observed Knob Count") + geom_point() + geom_smooth(method="lm", se = TRUE)
tmp1<- read.csv("DAGLLfinal.jags.le.6_003_4.8.chain1.csv")
library(rjags)
library(stringr)
library(mcmcplots)
setwd("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Finalgrowthchamberanalysis/")
tmp1<- read.csv("DAGLLfinal.jags.le.6_003_4.8.chain1.csv")
tmp2<- read.csv("DAGLLfinal.jags.le.6_003_4.8.chain2.csv")
samples<- rbind(tmp1,tmp2)
mcmcplot(samples)
