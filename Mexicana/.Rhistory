le1 <- as.data.frame(colnames(geno))
names(le1)[1] <- "names"
le2 <- as.data.frame(data$Row.names)
#again, this is where i realize i had to rename 626.2 to 626.1
phenoorder <- merge(le1, data, by.x="names", by.y="Row.names",sort=FALSE)
library ( emma )
library("rrBLUP")
#PHENOTYPE DATA, ultimately loaded into phenoorder data frame.
lrdta <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_data.csv")
lrdta$X <- NULL
data <- subset(lrdta, lrdta$Region!="SWUS")
le1 <- as.data.frame(colnames(geno))
names(le1)[1] <- "names"
le2 <- as.data.frame(data$Row.names)
#again, this is where i realize i had to rename 626.2 to 626.1
phenoorder <- merge(le1, data, by.x="names", by.y="Row.names",sort=FALSE)
#KINSHIP MATRIX, this is saved in Landrace_kinshipmatrix.csv
geno <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/Landrace_noSWUS_matrix.csv",header=TRUE,row.names=1)
#dt <-t(geno)
#A <- A.mat(dt)
#write.csv(A,"~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_kinshipmatrix.csv")
#to make sure order is the same
A <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_kinshipmatrix.csv",row.names="X")
le1 <- as.data.frame(colnames(geno))
names(le1)[1] <- "names"
le2 <- as.data.frame(data$Row.names)
#again, this is where i realize i had to rename 626.2 to 626.1
phenoorder <- merge(le1, data, by.x="names", by.y="Row.names",sort=FALSE)
gs <- t ( as.matrix ( phenoorder$GS_bp, ncol = 1 ) )
gsgb <- gs/1000000000
alt <- t ( as.matrix ( phenoorder$Altitude , ncol = 1 ) )
alt <- alt - mean ( alt ) + 0.5
A <- as.matrix ( A )
out.gsgb <- emma.REML.t ( gsgb , alt , K = A )
out.gsgb
plot(phenoorder$X1C_GS,phenoorder$Altitude)
?emma.REML.t
plot(phenoorder$X1C_GS,phenoorder$Altitude)
emma.REML.t
out.gsgb
bob=smoothspline(phenoorder$X1C_GS,phenoorder$Altitude()
)
bob=smooth.spline(phenoorder$X1C_GS,phenoorder$Altitude)
lines(bob)
emma.REML.t
data <- read.csv("~/Documents/Projects/Genome_Size_Analysis/growthchamberplayground/pleasework.csv",header=TRUE)
library(ggplot2)
library(pwr)
live <- subset(data, data$genomesize!="NA")
View(live)
cor.test(live$dailyavg3,live$genomesize)
?cor.test
cor.test(live$dailyavg3,live$genomesize,alternative="less")
cor.test(live$dailyavgall,live$genomesize,alternative="less")
bob=live
library(tidyr)
install.packages("tidyr")
?plot.mat
?matplot
crap<-live[15,19]
crap<-live[15:18,]
View(crap)
crap<-live[,15:18]
View(crap)
matplot(crap)
matplot(t(crap))
matplot(t(crap),pch-19)
matplot(t(crap),pch=19)
matplot(t(crap),pch=19,type=c("b"))
crap2<-live[,22:25]
View(crap2)
matplot(t(crap2))
matplot(t(crap2),pch=19,type=b)
matplot(t(crap2),pch=19,type=c("b"))
matplot(t(crap2),pch=19,type="b")
View(live)
average(live$dailyavg3)
mean(live$dailyavg3)
mean(live$dailyavg4)
sd(live$dailyavg4)
sd(live$dailyavg3)
cor.test(live$dailyavg3,live$genomesize,alternative="less")
plot(live$dailyavg3~live$genomesize,xlab="2C Genome Size",ylab="Daily Avg Growth (cm)",pch=18,main="3rd leaf")
abline(lm(live$dailyavg3~live$genomesize),col="red")
cor.test(live$dailyavg3,live$genomesize,alternative="less")
plot(live$dailyavg4~live$genomesize,xlab="2C Genome Size",ylab="Daily Avg Growth (cm)",pch=18,main="4th leaf")
abline(lm(live$dailyavg4~live$genomesize),col="red")
#KINSHIP MATRIX, this is saved in Landrace_kinshipmatrix.csv
geno <- read.csv("~/Desktop/sandbox/Landrace_noSWUS_matrix.csv",header=TRUE,row.names=1)
#dt <-t(geno)
#A <- A.mat(dt)
#write.csv(A,"~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_kinshipmatrix.csv")
#to make sure order is the same
A <- read.csv("~/Desktop/sandbox/Landrace_kinshipmatrix.csv",row.names="X")
#PHENOTYPE DATA, ultimately loaded into phenoorder data frame.
lrdta <- read.csv("~/Desktop/sandbox/Landrace_data.csv")
lrdta$X <- NULL
data <- subset(lrdta, lrdta$Region!="SWUS")
le1 <- as.data.frame(colnames(geno))
names(le1)[1] <- "names"
le2 <- as.data.frame(data$Row.names)
#again, this is where i realize i had to rename 626.2 to 626.1
phenoorder <- merge(le1, data, by.x="names", by.y="Row.names",sort=FALSE)le1 <- as.data.frame(colnames(geno))
names(le1)[1] <- "names"
le2 <- as.data.frame(data$Row.names)
#again, this is where i realize i had to rename 626.2 to 626.1
phenoorder <- merge(le1, data, by.x="names", by.y="Row.names",sort=FALSE)
#KINSHIP MATRIX, this is saved in Landrace_kinshipmatrix.csv
geno <- read.csv("~/Desktop/sandbox/Landrace_noSWUS_matrix.csv",header=TRUE,row.names=1)
#dt <-t(geno)
#A <- A.mat(dt)
#write.csv(A,"~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_kinshipmatrix.csv")
#to make sure order is the same
A <- read.csv("~/Desktop/sandbox/Landrace_kinshipmatrix.csv",row.names="X")
#PHENOTYPE DATA, ultimately loaded into phenoorder data frame.
lrdta <- read.csv("~/Desktop/sandbox/Landrace_data.csv")
lrdta$X <- NULL
data <- subset(lrdta, lrdta$Region!="SWUS")
le1 <- as.data.frame(colnames(geno))
names(le1)[1] <- "names"
le2 <- as.data.frame(data$Row.names)
#again, this is where i realize i had to rename 626.2 to 626.1
phenoorder <- merge(le1, data, by.x="names", by.y="Row.names",sort=FALSE)le1 <- as.data.frame(colnames(geno))
names(le1)[1] <- "names"
le2 <- as.data.frame(data$Row.names)
#again, this is where i realize i had to rename 626.2 to 626.1
phenoorder <- merge(le1, data, by.x="names", by.y="Row.names",sort=FALSE)
library ( emma )
library("rrBLUP")
#PHENOTYPE DATA, ultimately loaded into phenoorder data frame.
lrdta <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_data.csv")
lrdta$X <- NULL
data <- subset(lrdta, lrdta$Region!="SWUS")
le1 <- as.data.frame(colnames(geno))
names(le1)[1] <- "names"
le2 <- as.data.frame(data$Row.names)
#again, this is where i realize i had to rename 626.2 to 626.1
phenoorder <- merge(le1, data, by.x="names", by.y="Row.names",sort=FALSE)
#KINSHIP MATRIX, this is saved in Landrace_kinshipmatrix.csv
geno <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/Landrace_noSWUS_matrix.csv",header=TRUE,row.names=1)
#dt <-t(geno)
#A <- A.mat(dt)
#write.csv(A,"~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_kinshipmatrix.csv")
#to make sure order is the same
A <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_kinshipmatrix.csv",row.names="X")
le1 <- as.data.frame(colnames(geno))
names(le1)[1] <- "names"
le2 <- as.data.frame(data$Row.names)
#again, this is where i realize i had to rename 626.2 to 626.1
phenoorder <- merge(le1, data, by.x="names", by.y="Row.names",sort=FALSE)
library ( emma )
library("rrBLUP")
#PHENOTYPE DATA, ultimately loaded into phenoorder data frame.
lrdta <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_data.csv")
lrdta$X <- NULL
data <- subset(lrdta, lrdta$Region!="SWUS")
le1 <- as.data.frame(colnames(geno))
names(le1)[1] <- "names"
le2 <- as.data.frame(data$Row.names)
#again, this is where i realize i had to rename 626.2 to 626.1
phenoorder <- merge(le1, data, by.x="names", by.y="Row.names",sort=FALSE)
#KINSHIP MATRIX, this is saved in Landrace_kinshipmatrix.csv
geno <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/Landrace_noSWUS_matrix.csv",header=TRUE,row.names=1)
#dt <-t(geno)
#A <- A.mat(dt)
#write.csv(A,"~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_kinshipmatrix.csv")
#to make sure order is the same
A <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_kinshipmatrix.csv",row.names="X")
le1 <- as.data.frame(colnames(geno))
names(le1)[1] <- "names"
le2 <- as.data.frame(data$Row.names)
#again, this is where i realize i had to rename 626.2 to 626.1
phenoorder <- merge(le1, data, by.x="names", by.y="Row.names",sort=FALSE)
gs <- t ( as.matrix ( phenoorder$GS_bp, ncol = 1 ) )
gsgb <- gs/1000000000
alt <- t ( as.matrix ( phenoorder$Altitude , ncol = 1 ) )
alt <- alt - mean ( alt ) + 0.5
A <- as.matrix ( A )
out.gsgb <- emma.REML.t ( gsgb , alt , K = A )
out.gsgb
View(gs)
plot(phenoorder$X1C_GS,phenoorder$Altitude)
plot(phenoorder$Altitude,phenoorder$X1C_GS)
plot(phenoorder$Altitude~phenoorder$X1C_GS)
plot(phenoorder$Altitude~phenoorder$X1C_GS,xlab="1C Genome Size",ylab="Altitude")
plot(phenoorder$Altitude~phenoorder$X1C_GS,xlab="1C Genome Size",ylab="Altitude",pch=19,col="blue")
data <- read.csv("~/Documents/Projects/Genome_Size_Analysis/AnnaMexpops/Annapops_MASTER.csv")
plot(data$Altitude,data$DNA.pg.2C)
boxplot(data$DNA.pg.2C~data$Altitude)
boxplot(data$DNA.pg.2C~data$Altitude)
cor.test(data$DNA.pg.2C, data$Altitude)
library(plyr)
aggdata <- ddply(data, .(Pop), numcolwise(mean))
plot(aggdata$DNA.pg.2C,aggdata$Altitude)
boxplot(data$DNA.pg.2C~data$Altitude,ylab="2C Genome Size",xlab="Altitude (m)")
ggplot(data, aes(Altitude,DNA.pg.2C))
ggplot(data, aes(Altitude,DNA.pg.2C),fill=DNA.pg.2C)
ggplot(data, aes(Altitude,DNA.pg.2C),fill=DNA.pg.2C)+geom_box()
ggplot(data, aes(Altitude,DNA.pg.2C),fill=DNA.pg.2C)+geom_boxplot()
View(data)
ggplot(data, aes(,DNA.pg.2C,Altitude))+geom_boxplot()
ggplot(data, aes(DNA.pg.2C,Altitude))+geom_boxplot()
ggplot(data, aes(Altitude))+geom_boxplot()
ggplot(data, aes(Altitude,DNA.pg.2C))+geom_boxplot()
boxplot(data$DNA.pg.2C~data$Altitude,ylab="2C Genome Size",xlab="Altitude (m)")
boxplot(data$DNA.pg.2C~data$Altitude,ylab="2C Genome Size",xlab="Altitude (m)",main="Genome size in 10 mexicana population")
data <- read.csv("~/Documents/Projects/Genome_Size_Analysis/growthchamberplayground/pleasework.csv",header=TRUE)
library(ggplot2)
library(pwr)
live <- subset(data, data$genomesize!="NA")
boxplot(live$genomesize)
View(live)
boxplot(live$genomesize~live$Pop)
boxplot(live$genomesize~live$Pop,xlab="Parent",ylab="2C Genome Size")
range(live$genomesize)
plot(live$dailyavg3~live$genomesize,xlab="2C Genome Size",ylab="Daily Avg Growth (cm)",pch=18,main="3rd leaf")
abline(lm(live$dailyavg3~live$genomesize),col="red")
cor.test(live$dailyavg3,live$genomesize,alternative="less")
cor.test(live$dailyavg4,live$genomesize,alternative="less")
cor.test(live$dailyavgall,live$genomesize,alternative="less")
plot(live$dailyavg4~live$genomesize,xlab="2C Genome Size",ylab="Daily Avg Growth (cm)",pch=18,main="4th leaf")
abline(lm(live$dailyavg4~live$genomesize),col="red")
cor.test(live$weightdiff,live$genomesize)
live$weightdiff <- live$day4.g.-live$germinationweight
cor.test(live$weightdiff,live$genomesize)
read.csv("~/Documents/Courses/NVC_Botany/Labs/Lab5_pair_t_data.csv")
data <- read.csv("~/Documents/Courses/NVC_Botany/Labs/Lab5_pair_t_data.csv")
scores <- c(0,0.626373626,0.879120879,0.868131868,0.703296703,0.813186813,0.934065934,0.912087912,0.989010989,1,0.989010989,0.791208791,0.692307692,0.857142857,0.89010989,0.747252747,0.78021978,0.934065934)
hist(scores)
scores <- c(0.626373626,0.879120879,0.868131868,0.703296703,0.813186813,0.934065934,0.912087912,0.989010989,1,0.989010989,0.791208791,0.692307692,0.857142857,0.89010989,0.747252747,0.78021978,0.934065934)
hist(scores)
plot(scores)
hist(scores)
hist(scores,breaks=4)
steph <- c(a,a,a,a,a,a,b,b,b,b,b,b,b,b,b,b,b,b,b,c,c,c,c,c,c,c,d,d,f,f,f,f,f,f)
hist(steph)
steph <- c("a","a","a","a","a","a","b","b","b","b","b","b","b","b","b","b","b","b","b","c","c","c","c","c","c","c","d","d","f","f","f","f","f","f")
hist(steph)
steph <- c(5,5,5,5,5,5,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,2,2,1,1,1,1,1,1)
hist(steph)
hist(steph,breaks=5)
hist(steph,breaks=6)
hist(steph,breaks=5)
scores <- c(0.626373626,0.879120879,0.868131868,0.703296703,0.813186813,0.934065934,0.912087912,0.989010989,1,0.989010989,0.791208791,0.692307692,0.857142857,0.89010989,0.747252747,0.78021978,0.934065934)
hist(scores,breaks=4)
plot(scores)
hist
umm <-c(0,0.638095238,0.857142857,0.847619048,0.704761905,0.8,0.904761905,0.885714286,0.952380952,0.961904762,0.952380952,0.780952381,0.695238095,0.838095238,0.866666667,0.742857143,0.771428571,0.885714286)
hist(umm)
umm <-c(0.638095238,0.857142857,0.847619048,0.704761905,0.8,0.904761905,0.885714286,0.952380952,0.961904762,0.952380952,0.780952381,0.695238095,0.838095238,0.866666667,0.742857143,0.771428571,0.885714286)
hist(umm)
umm <-c(0.650485437,0.873786408,0.86407767,0.718446602,0.815533981,0.922330097,0.902912621,0.970873786,0.980582524,0.970873786,0.796116505,0.708737864,0.854368932,0.883495146,0.757281553,0.786407767,0.902912621)
hist(umm)
umm <-c(0.632075472,0.849056604,0.839622642,0.698113208,0.79245283,0.896226415,0.877358491,0.943396226,0.952830189,0.943396226,0.773584906,0.688679245,0.830188679,0.858490566,0.735849057,0.764150943,0.877358491)
hist(umm)
library ( emma )
library("rrBLUP")
?Amat
?A.mat
install.packages("rjags")
m2.jags <- jags.model("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/grote_DAG_leafelong.txt", list(leaflength=log(leaflength),stoma=log(stoma),n.mothers=max(fgrote$momindex),n.indiv=dim(fgrote)[1],n.cells=dim(stoma)[2],n.times=4,mother.index=fgrote$momindex,GS=log(fgrote$genomesize)),n.chains=2)
library(rjags) #make sure to get this working
library(stringr)
m2.jags <- jags.model("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/grote_DAG_leafelong.txt", list(leaflength=log(leaflength),stoma=log(stoma),n.mothers=max(fgrote$momindex),n.indiv=dim(fgrote)[1],n.cells=dim(stoma)[2],n.times=4,mother.index=fgrote$momindex,GS=log(fgrote$genomesize)),n.chains=2)
fgrote<-read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/grote_Indexmoms.csv")
library(rjags) #make sure to get this working
library(stringr)
stoma.positions <- str_detect(names(fgrote),"stom*") # this fetches the names of the columns with stom in it
stoma <- fgrote[,names(fgrote)[stoma.positions]]
leaflength.positions <- str_detect(names(fgrote), "leaf3.*")
leaflength <- fgrote[,names(fgrote)[leaflength.positions]]
m2.jags <- jags.model("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/grote_DAG_leafelong.txt", list(leaflength=log(leaflength),stoma=log(stoma),n.mothers=max(fgrote$momindex),n.indiv=dim(fgrote)[1],n.cells=dim(stoma)[2],n.times=4,mother.index=fgrote$momindex,GS=log(fgrote$genomesize)),n.chains=2)
update(m2.jags, n.iter=1000) #this is the burn in step, explore full space, start "randomly" then ideally get to sweet spot for further explore and store data there
m2.samples <- coda.samples(m2.jags, c("sd.motherLE","sd.motherLL","sd.LL","sd.motherStCS","sd.motherGS","sd.GS","sd.indivCS","sd.indivLE","sd.indivLL","sd.StCS","Mu.StCS","Mu.GS","Mu.LE","b.GS","b.LL","GS.contrast"),n.iter=10000, thin=100) # Grote: 2 chains is plenty, so more iterations is better, dont need more chains, sweet spot is a region of high posterior probability
m2.samples <- coda.samples(m2.jags, c("sd.motherLE","sd.motherLL","sd.motherStCS","sd.motherGS","sd.GS","sd.indivCS","sd.indivLE","sd.indivLL","sd.StCS","Mu.StCS","Mu.GS","Mu.LE","b.GS","b.LL","GS.contrast"),n.iter=10000, thin=100) # Grote: 2 chains is plenty, so more iterations is better, dont need more chains, sweet spot is a region of high posterior probability
m2.samples <- coda.samples(m2.jags, c("sd.motherLE","sd.motherLL","sd.motherStCS","sd.motherGS","sd.GS","sd.indivCS","sd.indivLE","sd.indivLL","sd.StCS","Mu.LE","b.GS","b.LL","GS.contrast"),n.iter=1000, thin=100) # trimmed down trackers for bigger runs
m2.jags <- jags.model("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/grote_DAG_leafelong.txt", list(leaflength=log(leaflength),stoma=log(stoma),n.mothers=max(fgrote$momindex),n.indiv=dim(fgrote)[1],n.cells=dim(stoma)[2],n.times=4,mother.index=fgrote$momindex,GS=log(fgrote$genomesize)),n.chains=2)
update(m2.jags, n.iter=1000) #this is the burn in step, explore full space, start "randomly" then ideally get to sweet spot for further explore and store data there
m2.samples <- coda.samples(m2.jags, c("sd.motherLE","sd.motherLL","sd.LL","sd.motherStCS","sd.motherGS","sd.GS","sd.indivCS","sd.indivLE","sd.indivLL","sd.StCS","Mu.StCS","Mu.GS","Mu.LE","b.GS","b.LL","GS.contrast"),n.iter=10000, thin=100) # for trackers on everything, diagnostic only
mcmcplot(m2.samples)
library(mcmcplots)
mcmcplot(m2.samples)
m2.samples <- coda.samples(m2.jags, c("sd.motherLE","sd.motherLL","sd.motherStCS","sd.motherGS","sd.GS","sd.indivCS","sd.indivLE","sd.indivLL","sd.StCS","Mu.LE","b.GS","b.LL","GS.contrast"),n.iter=10000, thin=1000) # trimmed down trackers for bigger runs
mcmcplot(m2.samples)
m2.samples <- coda.samples(m2.jags, c("sd.motherLE","sd.motherLL","sd.motherStCS","sd.motherGS","sd.GS","sd.indivCS","sd.indivLE","sd.indivLL","sd.StCS","Mu.LE","b.GS","b.LL","GS.contrast"),n.iter=10000, thin=100) # trimmed down trackers for bigger runs
mcmcplot(m2.samples)
m2.samples <- coda.samples(m2.jags, c("sd.motherLE","sd.motherLL","sd.motherStCS","sd.motherGS","sd.GS","sd.indivCS","sd.indivLE","sd.indivLL","sd.StCS","Mu.LE","b.GS","b.LL","GS.contrast"),n.iter=10000, thin=100) # trimmed down trackers for bigger runs
mcmcplot(m2.samples)
m2.samples <- coda.samples(m2.jags, c("sd.motherLE","sd.motherLL","sd.motherStCS","sd.motherGS","sd.GS","sd.indivCS","sd.indivLE","sd.indivLL","sd.StCS","Mu.LE","b.GS","b.LL","GS.contrast"),n.iter=100000, thin=100) # trimmed down trackers for bigger runs
mcmcplot(m2.samples)
summary(m2.samples)
stoma <- fgrote[,names(fgrote)[stoma.positions]]
View(stoma)
is.na(stoma)
n.cells <- apply(is.na(stoma), margin=1, function="sum"
n.cells <- apply(is.na(stoma), margin=1, function="sum")
n.cells <- apply(is.na(stoma), margin=1, fun="sum")
n.cells <- apply(is.na(stoma), MAR=1, FUN="sum")
n.cells
n.cells <- apply(!is.na(stoma), MAR=1, FUN="sum")
n.cells
n.cells <- apply(!is.na(stoma), MAR=1, FUN="sum")
m2.jags <- jags.model("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/grote_DAG_leafelong.txt", list(n.cells=n.cells,leaflength=log(leaflength),stoma=log(stoma),n.mothers=max(fgrote$momindex),n.indiv=dim(fgrote)[1],n.cells=dim(stoma)[2],n.times=4,mother.index=fgrote$momindex,GS=log(fgrote$genomesize)),n.chains=2)
m2.jags <- jags.model("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/grote_DAG_leafelong.txt", list(n.cells=n.cells,leaflength=log(leaflength),stoma=log(stoma),n.mothers=max(fgrote$momindex),n.indiv=dim(fgrote)[1],n.times=4,mother.index=fgrote$momindex,GS=log(fgrote$genomesize)),n.chains=2)
update(m2.jags, n.iter=1000) #this is the burn in step, explore full space, start "randomly" then ideally get to sweet spot for further explore and store data there
update(m2.jags, n.iter=1000) #this is the burn in step, explore full space, start "randomly" then ideally get to sweet spot for further explore and store data there
m2.samples <- coda.samples(m2.jags, c("sd.motherLE","sd.motherLL","sd.LL","sd.motherStCS","sd.motherGS","sd.GS","sd.indivCS","sd.indivLE","sd.indivLL","sd.StCS","Mu.StCS","Mu.GS","Mu.LE","b.GS","b.LL","GS.contrast"),n.iter=1000, thin=10) # for trackers on everything, diagnostic only
mcmcplot(m2.samples)
m2.samples <- coda.samples(m2.jags, c("sd.motherLE","sd.motherLL","sd.motherStCS","sd.motherGS","sd.GS","sd.indivCS","sd.indivLE","sd.indivLL","sd.StCS","Mu.LE","b.GS","b.LL","GS.contrast"),n.iter=10000, thin=100) # trimmed down trackers for bigger runs
summary(m2.samples)
mcmcplot(m2.samples)
m2.samples <- coda.samples(m2.jags, c("sd.motherLE","sd.motherLL","sd.motherStCS","sd.motherGS","sd.GS","sd.indivCS","sd.indivLE","sd.indivLL","sd.StCS","Mu.LE","b.GS","b.LL","GS.contrast"),n.iter=1000000, thin=1000) # trimmed down trackers for bigger runs
mcmcplot(m2.samples)
m2.samples <- coda.samples(m2.jags, c("sd.motherLE","sd.motherLL","sd.motherStCS","sd.motherGS","sd.GS","sd.indivCS","sd.indivLE","sd.indivLL","sd.StCS","Mu.LE","b.GS","b.LL","GS.contrast"),n.iter=2000000, thin=2000) # trimmed down trackers for bigger runs
mcmcplot(m2.samples)
fgrote<-read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/grote_Indexmoms.csv")
library(rjags) #make sure to get this working
library(stringr)
library(mcmcplots)
stoma.positions <- str_detect(names(fgrote),"stom*") # this fetches the names of the columns with stom in it
stoma <- fgrote[,names(fgrote)[stoma.positions]]
leaflength.positions <- str_detect(names(fgrote), "leaf3.*")
leaflength <- fgrote[,names(fgrote)[leaflength.positions]]
n.cells <- apply(!is.na(stoma), MAR=1, FUN="sum")
m2.jags <- jags.model("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/grote_DAG_leafelong.txt", list(n.cells=n.cells,leaflength=log(leaflength),stoma=log(stoma),n.mothers=max(fgrote$momindex),n.indiv=dim(fgrote)[1],n.times=4,mother.index=fgrote$momindex,GS=log(fgrote$genomesize)),n.chains=2)
update(m2.jags, n.iter=1000) #this is the burn in step, explore full space, start "randomly" then ideally get to sweet spot for further explore and store data there
update(m2.jags, n.iter=20000) #this is the burn in step, explore full space, start "randomly" then ideally get to sweet spot for further explore and store data there
m2.samples <- coda.samples(m2.jags, c("sd.motherLE","sd.motherLL","sd.motherStCS","sd.motherGS","sd.GS","sd.indivCS","sd.indivLE","sd.indivLL","sd.StCS","Mu.LE","b.GS","b.LL","GS.contrast"),n.iter=2000000, thin=2000) # trimmed down trackers for bigger runs
summary(m2.samples)
mcmcplot(m2.samples)
chain1<- as.matrix(m2.samples[[1]])
chain2<- as.matrix(m2.samples[[2]])
write.csv(chain1,"~/Desktop/m2.jags.2mil_reducedpres.chain1.csv")
write.csv(chain2,"~/Desktop/m2.jags.2mil_reducedpres.chain2.csv")
fgrote<-read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/grote_Indexmoms.csv")
library(rjags) #make sure to get this working
library(stringr)
library(mcmcplots)
stoma.positions <- str_detect(names(fgrote),"stom*") # this fetches the names of the columns with stom in it
stoma <- fgrote[,names(fgrote)[stoma.positions]]
leaflength.positions <- str_detect(names(fgrote), "leaf3.*")
leaflength <- fgrote[,names(fgrote)[leaflength.positions]]
n.cells <- apply(!is.na(stoma), MAR=1, FUN="sum")
m3.jags <- jags.model("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/grote_DAG_Testing_refilnv.txt", list(n.cells=n.cells,leaflength=log(leaflength),stoma=log(stoma),n.mothers=max(fgrote$momindex),n.indiv=dim(fgrote)[1],n.times=4,mother.index=fgrote$momindex,GS=log(fgrote$genomesize)),n.chains=2)
m3.jags <- jags.model("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/grote_DAG_Testing_refilnv.txt", list(leaflength=log(leaflength),n.mothers=max(fgrote$momindex),n.indiv=dim(fgrote)[1],n.times=4,mother.index=fgrote$momindex,GS=log(fgrote$genomesize)),n.chains=2)
update(m3.jags, n.iter=1000) #this is the burn in step, explore full space, start "randomly" then ideally get to sweet spot for further explore and store data there
m3.samples <- coda.samples(m3.jags, c("sd.motherLE","sd.motherLL","sd.motherGS","sd.GS","sd.indivLE","sd.indivLL","Mu.LE","b.GS","b.LL","GS.contrast","z.indivLL","z.motherLL"),n.iter=10000, thin=100) # trimmed down trackers for bigger runs, or just monitors
mcmcplot(m3.samples)
summary(m3.samples)
samples.combined<-rbind(m3.samples[[1]]],m3.samples[[2]])
samples.combined<-rbind(m3.samples[[1]],m3.samples[[2]])
View(samples.combined)
names(samples.combined)
colnames(samples.combined)
samples.combined<-as.data.frame(rbind(m3.samples[[1]],m3.samples[[2]]))
par(mfrow=c(3,2),pty="s")
for(i in 5:10){
plot(samples.combined$z.indiv[i],samples.combined$b.LL)
}
for(i in 5:10){
plot(samples.combined$z.indivLL[i],samples.combined$b.LL)
}
samples.combined<-rbind(m3.samples[[1]],m3.samples[[2]])
colnames(samples.combined)
the.column<- paste("z.indivLL[",i,"]")
for(i in 5:10){
the.column<- paste("z.indivLL[",i,"]")
plot(samples.combined[,the.column],samples.combined$b.LL)
}
for(i in 5){
the.column<- paste("z.indivLL[",i,"]")
plot(samples.combined[,the.column],samples.combined$b.LL)
}
the.column
the.column<- paste("z.indivLL[",i,"]",sep="")
for(i in 5){
the.column<- paste("z.indivLL[",i,"]",sep="")
plot(samples.combined[,the.column],samples.combined$b.LL)
}
the.column
for(i in 5){
the.column<- paste("z.indivLL[",i,"]",sep="")
plot(samples.combined[,the.column],samples.combined[,"b.LL"])
}
for(i in 5:10){
the.column<- paste("z.indivLL[",i,"]",sep="")
plot(samples.combined[,the.column],samples.combined[,"b.LL"])
}
par(mfrow=c(3,2),pty="s")
for(i in 5:10){
the.column<- paste("z.indivLL[",i,"]",sep="")
plot(samples.combined[,the.column],samples.combined[,"b.LL"])
}
par(mfrow=c(3,2),pty="s")
for(i in 5:11){
the.column<- paste("z.indivLL[",i,"]",sep="")
plot(samples.combined[,the.column],samples.combined[,"b.LL"])
}
the.column
for(i in 100:105){
the.column<- paste("z.indivLL[",i,"]",sep="")
plot(samples.combined[,the.column],samples.combined[,"b.LL"])
}
m3.samples <- coda.samples(m3.jags, c("sd.motherLE","sd.motherLL","sd.motherGS","sd.GS","sd.indivLE","sd.indivLL","Mu.LE","b.GS","b.LL","GS.contrast","z.indivLL","z.motherLL","Mu.LL"),n.iter=10000, thin=100) # trimmed down trackers for bigger runs, or just monitors
samples.combined<-rbind(m3.samples[[1]],m3.samples[[2]])
plot(samples.combined[,"Mu.LL"],samples.combined[,"b.LL"])
fgrote<-read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/grote_Indexmoms.csv")
View(fgrote)
fgrote$relLL.1 <- fgrote$leaf3.1 - frote$leaf3.0
fgrote$relLL.1 <- fgrote$leaf3.1 - fgrote$leaf3.0
fgrote$relLL.2 <- fgrote$leaf3.2 - fgrote$leaf3.0
fgrote$relLL.3 <- fgrote$leaf3.3 - fgrote$leaf3.0
fgrote$leaf3.0
fgrote2<- subset(fgrote, subset=fgrote$leaf3.0=!"NA")
fgrote2<- subset(fgrote, subset=!is.na(fgrote$leaf3.0))
stoma.positions <- str_detect(names(fgrote),"stom*") # this fetches the names of the columns with stom in it
stoma <- fgrote[,names(fgrote)[stoma.positions]]
leaflength.positions <- str_detect(names(fgrote), "leaf3.*")
leaflength <- fgrote[,names(fgrote)[leaflength.positions]]
n.cells <- apply(!is.na(stoma), MAR=1, FUN="sum")
leaflength.positions <- str_detect(names(fgrote), "relLL.*")
leaflength <- fgrote[,names(fgrote)[leaflength.positions]]
leaflength
stoma.positions <- str_detect(names(fgrote2),"stom*") # this fetches the names of the columns with stom in it
stoma <- fgrote[,names(fgrote2)[stoma.positions]]
leaflength.positions <- str_detect(names(fgrote2), "relLL.*")
leaflength <- fgrote[,names(fgrote2)[leaflength.positions]]
leaflength
stoma.positions <- str_detect(names(fgrote2),"stom*") # this fetches the names of the columns with stom in it
stoma <- fgrote2[,names(fgrote2)[stoma.positions]]
leaflength.positions <- str_detect(names(fgrote2), "relLL.*")
leaflength <- fgrote2[,names(fgrote2)[leaflength.positions]]
n.cells <- apply(!is.na(stoma), MAR=1, FUN="sum")
m3.jags <- jags.model("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/grote_DAG_Testing_refilnv.txt", list(leaflength=log(leaflength),n.mothers=max(fgrote2$momindex),n.indiv=dim(fgrote2)[1],n.times=3,mother.index=fgrote2$momindex,GS=log(fgrote2$genomesize)),n.chains=2)
update(m3.jags, n.iter=1000) #this is the burn in step, explore full space, start "randomly" then ideally get to sweet spot for further explore and store data there
m3.samples <- coda.samples(m3.jags, c("sd.motherLE","sd.motherLL","sd.motherGS","sd.GS","sd.indivLE","sd.indivLL","Mu.LE","b.GS","b.LL","GS.contrast","z.indivLL","z.motherLL","Mu.LL"),n.iter=10000, thin=100) # trimmed down trackers for bigger runs, or just monitors
samples.combined<-rbind(m3.samples[[1]],m3.samples[[2]])
plot(samples.combined[,"Mu.LL"],samples.combined[,"b.LL"])
m3.samples <- coda.samples(m3.jags, c("sd.motherLE","sd.motherLL","sd.motherGS","sd.GS","sd.indivLE","sd.indivLL","Mu.LE","b.GS","b.LL","GS.contrast","z.indivLL","z.motherLL","Mu.LL"),n.iter=10000, thin=100) # trimmed down trackers for bigger runs, or just monitors
samples.combined<-rbind(m3.samples[[1]],m3.samples[[2]])
plot(samples.combined[,"Mu.LL"],samples.combined[,"b.LL"])
plot(log(fgrote2$genomesize),log(fgrote2$relLL.1))
plot(fgrote2$genomesize,fgrote2$relLL.1)
plot(log(fgrote2$genomesize),log(fgrote2$relLL.2))
plot(log(fgrote2$genomesize),log(fgrote2$relLL.3))
plot(log(fgrote2$genomesize),log(fgrote2$relLL.1))
log(3.5)
m3.jags <- jags.model("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/grote_DAG_Testing_refilnv.txt", list(leaflength=log(leaflength),n.mothers=max(fgrote2$momindex),n.indiv=dim(fgrote2)[1],n.times=3,mother.index=fgrote2$momindex,GS=log(fgrote2$genomesize)),n.chains=2)
update(m3.jags, n.iter=1000) #this is the burn in step, explore full space, start "randomly" then ideally get to sweet spot for further explore and store data there
m3.samples <- coda.samples(m3.jags, c("sd.motherLE","sd.motherLL","sd.motherGS","sd.GS","sd.indivLE","sd.indivLL","Mu.LE","b.GS","b.LL","GS.contrast","z.indivLL","z.motherLL","Mu.LL"),n.iter=10000, thin=100) # trimmed down trackers for bigger runs, or just monitors
samples.combined<-rbind(m3.samples[[1]],m3.samples[[2]])
plot(samples.combined[,"Mu.LL"],samples.combined[,"b.LL"])
m3.jags <- jags.model("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/grote_DAG_Testing_refilnv.txt", list(leaflength=log(leaflength),n.mothers=max(fgrote2$momindex),n.indiv=dim(fgrote2)[1],n.times=3,mother.index=fgrote2$momindex,GS=log(fgrote2$genomesize)),n.chains=2)
update(m3.jags, n.iter=1000) #this is the burn in step, explore full space, start "randomly" then ideally get to sweet spot for further explore and store data there
m3.samples <- coda.samples(m3.jags, c("sd.motherLE","sd.motherLL","sd.motherGS","sd.GS","sd.indivLE","sd.indivLL","Mu.LE","b.GS","b.LL","GS.contrast","z.indivLL","z.motherLL","Mu.LL"),n.iter=10000, thin=100) # trimmed down trackers for bigger runs, or just monitors
m3.samples <- coda.samples(m3.jags, c("sd.motherLE","sd.motherLL","sd.motherGS","sd.GS","sd.indivLE","sd.indivLL","Mu.LE","b.GS","b.LL","GS.contrast","z.indivLL","z.motherLL"),n.iter=10000, thin=100) # trimmed down trackers for bigger runs, or just monitors
mcmcplot(m3.samples)
par(mfrow=c(3,2),pty="s")
samples.combined<-rbind(m3.samples[[1]],m3.samples[[2]])
colnames(samples.combined)
par(mfrow=c(3,2),pty="s")
the.column<- paste("z.indivLL[",i,"]")
for(i in 100:105){
the.column<- paste("z.indivLL[",i,"]",sep="")
plot(samples.combined[,the.column],samples.combined[,"b.LL"])
}
m3.jags <- jags.model("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/grote_DAG_Testing_refilnv.txt", list(leaflength=log(leaflength),n.mothers=max(fgrote2$momindex),n.indiv=dim(fgrote2)[1],n.times=3,mother.index=fgrote2$momindex,GS=log(fgrote2$genomesize)),n.chains=2)
update(m3.jags, n.iter=1000) #this is the burn in step, explore full space, start "randomly" then ideally get to sweet spot for further explore and store data there
m3.samples <- coda.samples(m3.jags, c("sd.motherLE","sd.motherLL","sd.motherGS","sd.GS","sd.indivLE","sd.indivLL","Mu.LE","b.GS","b.LL","GS.contrast","z.indivLL","z.motherLL"),n.iter=10000, thin=100) # trimmed down trackers for bigger runs, or just monitors
mcmcplot(m3.samples)
samples.combined<-rbind(m3.samples[[1]],m3.samples[[2]])
colnames(samples.combined)
par(mfrow=c(3,2),pty="s")
the.column<- paste("z.indivLL[",i,"]")
for(i in 100:105){
the.column<- paste("z.indivLL[",i,"]",sep="")
plot(samples.combined[,the.column],samples.combined[,"b.LL"])
}
setwd("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/Mexicana_conversion/")
pheno<-read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Master_mexnucleo_pruned.csv")
View(pheno)
plot(pheno$X1C_GS,pheno$Altitude)
plot(pheno$Altitude,pheno$X1C_GS)
plot(pheno$Altitude,pheno$X1C_GS,pch=12)
plot(pheno$Altitude,pheno$X1C_GS,pch=11)
plot(pheno$Altitude,pheno$X1C_GS,pch=10)
plot(pheno$Altitude,pheno$X1C_GS,pch=14)
plot(pheno$Altitude,pheno$X1C_GS,pch=13)
plot(pheno$Altitude,pheno$X1C_GS,pch=9)
plot(pheno$Altitude,pheno$X1C_GS,pch=8)
plot(pheno$Altitude,pheno$X1C_GS,pch=7)
plot(pheno$Altitude,pheno$X1C_GS,pch=6)
plot(pheno$Altitude,pheno$X1C_GS,pch=5)
plot(pheno$Altitude,pheno$X1C_GS,pch=4)
plot(pheno$Altitude,pheno$X1C_GS,pch=4,ylab="Genome Size",xlab="Altitude")
fgrote<-read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/grote_Indexmoms.csv")
stoma.positions <- str_detect(names(grote),"stom*") # this fetches the names of the columns with stom in it
cellprod <- read.csv("CellProduction_All_crap.csv") #This is the dataset with all the phenotypes, the crap at the end designates that we have to remove a lot of NA rows.
cellprod <- cellprod[1:202,1:16]
setwd("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/")
cellprod <- read.csv("CellProduction_All_crap.csv") #This is the dataset with all the phenotypes, the crap at the end designates that we have to remove a lot of NA rows.
cellprod <- cellprod[1:202,1:16]
grote <- Reduce(function(x, y) merge(x, y, by="fullid"), list(cellprod, Fleaf3stom, Fleaf3mid, Fleaf3adj))
fgrote<-read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/grote_Indexmoms.csv")
stoma <- fgrote[,names(fgrote)[stoma.positions]]
stoma.positions <- str_detect(names(fgrote),"stom*") # this fetches the names of the columns with stom in it
stoma <- fgrote[,names(fgrote)[stoma.positions]]
gensize.conforming <- matrix(fgrote$genomesize,nrow=nrow(stoma),ncol=ncol(stoma),byrow=FALSE)
plot(log(as.vector(gensize.conforming)), log(as.vector(as.matrix(stoma))),pch=".",cex=2,xlab="Log Genome Size",ylab="Log Stomatal Cell Size",bty="n") #alternatively we can make new grote table
lines(smooth.spline(log(as.vector(gensize.conforming)), log(as.vector(as.matrix(stoma))),spar=1.0)) #fix NA's and the smoothspline will work, to show non parametric
2 * (4/11)^2 +(3/11)^2
1/ (2 * (4/11)^2 +(3/11)^2 )
