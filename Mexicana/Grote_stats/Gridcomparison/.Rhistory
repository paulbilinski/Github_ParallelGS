<<<<<<< HEAD
p2
p2<-ggplot(altg,aes(x=factor(Groups), X180knobbp,fill=factor(Species)))+ ylab("180bp Knob (bp)")+geom_boxplot()+scale_x_discrete(breaks = 1:6, labels=c("<500","<1000","<1500","<2000","<2500",">2500")) + xlab(NULL)+guides(fill = guide_legend(title = "Species"))
p2
p3<-ggplot(altg,aes(x=factor(Groups), TR1bp,fill=factor(Species)))+ ylab("180bp Knob (bp)")+geom_boxplot()+scale_x_discrete(breaks = 1:6, labels=c("<500","<1000","<1500","<2000","<2500",">2500")) + xlab(NULL)+guides(fill = guide_legend(title = "Species"))
p3
p4<-ggplot(altg,aes(x=factor(Groups), TotalTebp,fill=factor(Species)))+ ylab("180bp Knob (bp)")+geom_boxplot()+scale_x_discrete(breaks = 1:6, labels=c("<500","<1000","<1500","<2000","<2500",">2500")) + xlab(NULL)+guides(fill = guide_legend(title = "Species"))
p4
grid.arrange(p2,p3,p4,ncol=1)
p2<-ggplot(altg,aes(x=factor(Groups), X180knobbp,fill=factor(Species)))+ ylab("180bp Knob (bp)")+geom_boxplot()+scale_x_discrete(breaks = 1:6, labels=c("<500","<1000","<1500","<2000","<2500",">2500")) + xlab(NULL)+guides(fill = guide_legend(title = "Species"))
p2
p3<-ggplot(altg,aes(x=factor(Groups), TR1bp,fill=factor(Species)))+ ylab("TR1 (bp)")+geom_boxplot()+scale_x_discrete(breaks = 1:6, labels=c("<500","<1000","<1500","<2000","<2500",">2500")) + xlab(NULL)+guides(fill = guide_legend(title = "Species"))
p3
p4<-ggplot(altg,aes(x=factor(Groups), TotalTebp,fill=factor(Species)))+ ylab("Total TE (bp)")+geom_boxplot()+scale_x_discrete(breaks = 1:6, labels=c("<500","<1000","<1500","<2000","<2500",">2500")) + xlab(NULL)+guides(fill = guide_legend(title = "Species"))
p4
grid.arrange(p2,p3,p4,ncol=1)
p2<-ggplot(altg,aes(x=factor(Groups), X180knobbp,fill=factor(Species)))+ ylab("180bp Knob (bp)")+geom_boxplot()+scale_x_discrete(breaks = 1:6, labels=c("<500","<1000","<1500","<2000","<2500",">2500")) + xlab("Altitude")+guides(fill = guide_legend(title = "Species"))
p2
p3<-ggplot(altg,aes(x=factor(Groups), TR1bp,fill=factor(Species)))+ ylab("TR1 (bp)")+geom_boxplot()+scale_x_discrete(breaks = 1:6, labels=c("<500","<1000","<1500","<2000","<2500",">2500")) + xlab("Altitude")+guides(fill = guide_legend(title = "Species"))
p3
p4<-ggplot(altg,aes(x=factor(Groups), TotalTebp,fill=factor(Species)))+ ylab("Total TE (bp)")+geom_boxplot()+scale_x_discrete(breaks = 1:6, labels=c("<500","<1000","<1500","<2000","<2500",">2500")) + xlab("Altitude")+guides(fill = guide_legend(title = "Species"))
p4
grid.arrange(p2,p3,p4,ncol=1)
source("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SelectionTests/jri_emma_returnbeta.txt")
pheno <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Master_mexnucleo_pruned.csv") #phenotype data in matching order
geno <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/Mexicana_conversion/GBS_final.txt")
geno$X <- NULL
dt <- t(geno)
A <- A.mat(dt)
gs <- t ( as.matrix ( pheno$GS_bp, ncol = 1 ) )
A <- A.mat(dt)
library ( emma )
library("rrBLUP")
A <- A.mat(dt)
#create seperate matrices for each phenotype you want to model.
gs <- t ( as.matrix ( pheno$GS_bp, ncol = 1 ) )
gsgb <- gs/1000000000
knob180 <- t ( as.matrix (pheno$X180knobbp, ncol=1))
knob180gb <- knob180/1000000000
alt <- t ( as.matrix ( pheno$Altitude , ncol = 1 ) )
alt <- alt - mean ( alt ) + 0.5
#mean centering between 0 and 1
A <- as.matrix ( A )
#make sure your kinship matrix is a matrix.
out.gsgb <- emma.REML.t ( gsgb , alt , K = A )
out.gsgb
out.gsgb <- emma.REML.t_beta ( gsgb , alt , K = A )
out.gsgb
gbs<-read.csv("GBS_alt_threshold_final.txt")
setwd("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SelectionTests/SelectionTestData/")
gbs<-read.csv("GBS_alt_threshold_final.txt")
gbs$X <- NULL
dt<-(t(gbs))
A<-A.mat(dt)
pheno<-read.csv("Pheno_alt_threshold_ordered.csv")
gs <- t ( as.matrix (pheno$GS_bp, ncol=1) )
A<-A.mat(dt)
pheno<-read.csv("Pheno_alt_threshold_ordered.csv")
gs <- t ( as.matrix (pheno$GS_bp, ncol=1) )
gsgb <- gs/1000000000
alt <- t ( as.matrix (pheno$Altitude, ncol=1))
alt <- alt - mean(alt) + 0.5
knob180 <- t ( as.matrix (pheno$X180knobbp, ncol=1))
knob180gb <- knob180/1000000000
out.gsgb <- emma.REML.t( gsgb,alt,K=A)
out.gsgb <- emma.REML.t_beta( gsgb,alt,K=A)
out.gsgb
out.knob <- emma.REML.t_beta(knob180gb,alt,K=A)
out.knob
out.knob <- emma.REML.t_beta(knob180gb,alt,K=A)
out.knob
TR1 <- t ( as.matrix (pheno$TR1bp, ncol=1))
TR1gb <- TR1/1000000000
out.tr1 <- emma.REML.t_beta(TR1gb,alt,K=A)
out.tr1
out.te <- emma.REML.t_beta(TotalTebp,alt,K=A)
TR1 <- t ( as.matrix (pheno$TotalTebp, ncol=1))
TR1 <- t ( as.matrix (pheno$TR1bp, ncol=1))
TR1gb <- TR1/1000000000
Te <- t ( as.matrix (pheno$TotalTebp, ncol=1))
Tegb <- TR1/1000000000
out.te <- emma.REML.t_beta(Tegb,alt,K=A)
out.te
knob180 <- t ( as.matrix (pheno$X180knobbp, ncol=1))
knob180gb <- knob180/1000000000
TR1 <- t ( as.matrix (pheno$TR1bp, ncol=1))
TR1gb <- TR1/1000000000
Te <- t ( as.matrix (pheno$TotalTebp, ncol=1))
Tegb <- TR1/1000000000
out.gsgb <- emma.REML.t_beta( gsgb,alt,K=A)
out.gsgb
out.knob <- emma.REML.t_beta(knob180gb,alt,K=A)
out.knob
out.tr1 <- emma.REML.t_beta(TR1gb,alt,K=A)
out.tr1
plot(pheno$Altitude,pheno$TR1bp,xlab="Altitude (m)",ylab="TR1 abundance",pch=19, col="black")
Te <- t ( as.matrix (pheno$TotalTebp, ncol=1))
Tegb <- TR1/1000000000
out.te <- emma.REML.t_beta(Tegb,alt,K=A)
out.te
plot(pheno$Altitude,pheno$TotalTebp,xlab="Altitude (m)",ylab="TE abundance",pch=19, col="black")
Te <- t ( as.matrix (pheno$TotalTebp, ncol=1))
Tegb <- TR1/1000000000
out.te <- emma.REML.t_beta(Tegb,alt,K=A)
out.te
out.tr1 <- emma.REML.t_beta(TR1gb,alt,K=A)
out.tr1
View(pheno)
out.gsgb <- emma.REML.t_beta( gsgb,alt,K=A)
out.gsgb
out.knob <- emma.REML.t_beta(knob180gb,alt,K=A)
out.knob
out.te <- emma.REML.t_beta(Tegb,alt,K=A)
out.te
Te <- t ( as.matrix (pheno$TotalTebp, ncol=1))
Tegb <- Te/1000000000
out.te <- emma.REML.t_beta(Tegb,alt,K=A)
out.te
pheno <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Master_mexnucleo_pruned.csv") #phenotype data in matching order
geno <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/Mexicana_conversion/GBS_final.txt")
geno$X <- NULL
dt <- t(geno)
A <- A.mat(dt)
gs <- t ( as.matrix ( pheno$GS_bp, ncol = 1 ) )
gsgb <- gs/1000000000
knob180 <- t ( as.matrix (pheno$X180knobbp, ncol=1))
knob180gb <- knob180/1000000000
alt <- t ( as.matrix ( pheno$Altitude , ncol = 1 ) )
alt <- alt - mean ( alt ) + 0.5
A <- as.matrix ( A )
out.gsgb <- emma.REML.t_beta ( gsgb , alt , K = A )
out.gsgb
gs <- t ( as.matrix ( pheno$X180knobbp, ncol = 1 ) )
gsgb <- gs/1000000000
out.gsgb <- emma.REML.t_beta ( gsgb , alt , K = A )
out.gsgb
gs <- t ( as.matrix ( pheno$TR1bp, ncol = 1 ) )
gsgb <- gs/1000000000
out.gsgb <- emma.REML.t_beta ( gsgb , alt , K = A )
out.gsgb
gs <- t ( as.matrix ( pheno$TotalTebp, ncol = 1 ) )
gsgb <- gs/1000000000
out.gsgb <- emma.REML.t_beta ( gsgb , alt , K = A )
out.gsgb
setwd("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SelectionTests/SelectionTestData/")
gbs<-read.csv("GBS_alt_threshold_final.txt")
gbs$X <- NULL
dt<-(t(gbs))
A<-A.mat(dt)
pheno<-read.csv("Pheno_alt_threshold_ordered.csv")
gs <- t ( as.matrix (pheno$GS_bp, ncol=1) )
gsgb <- gs/1000000000
gs <- t ( as.matrix (pheno$GS_bp, ncol=1) )
gsgb <- gs/1000000000
alt <- t ( as.matrix (pheno$Altitude, ncol=1))
alt <- alt - mean(alt) + 0.5
knob180 <- t ( as.matrix (pheno$X180knobbp, ncol=1))
knob180gb <- knob180/1000000000
TR1 <- t ( as.matrix (pheno$TR1bp, ncol=1))
TR1gb <- TR1/1000000000
Te <- t ( as.matrix (pheno$TotalTebp, ncol=1))
Tegb <- Te/1000000000
out.gsgb <- emma.REML.t_beta( gsgb,alt,K=A)
out.gsgb
out.knob <- emma.REML.t_beta(knob180gb,alt,K=A)
out.knob
out.tr1 <- emma.REML.t_beta(TR1gb,alt,K=A)
out.tr1
out.te <- emma.REML.t_beta(Tegb,alt,K=A)
out.te
fin.knob <- emma.REML.t ( knobgb , alt , X0 =  cbind ( rep ( 1 , 93 ) , c ( gsgb ) ) , K = A )
fin.knob <- emma.REML.t_beta ( knob180gb , alt , X0 =  cbind ( rep ( 1 , 83 ) , c ( gsgb ) ) , K = A )
fin.knob <- emma.REML.t_beta ( knob180gb , alt , X0 =  cbind ( rep ( 1 , 93 ) , c ( gsgb ) ) , K = A )
fin.knob <- emma.REML.t_beta ( knob180gb , alt , X0 =  cbind ( rep ( 1 , 70 ) , c ( gsgb ) ) , K = A )
fin.knob
fin.tr1 <- emma.REML.t_beta ( TR1gb , alt , X0 =  cbind ( rep ( 1 , 70 ) , c ( gsgb ) ) , K = A )
fin.tr1
fin.te <- emma.REML.t_beta ( Tegb , alt , X0 =  cbind ( rep ( 1 , 70 ) , c ( gsgb ) ) , K = A )
fin.te
lrdta <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_data.csv")
lrdta$X <- NULL
data <- subset(lrdta, lrdta$Region!="SWUS")
geno <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/Landrace_noSWUS_matrix.csv",header=TRUE,row.names=1)
A <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_kinshipmatrix.csv",row.names="X")
le1 <- as.data.frame(colnames(geno))
names(le1)[1] <- "names"
le2 <- as.data.frame(data$Row.names)
#again, this is where i realize i had to rename 626.2 to 626.1
phenoorder <- merge(le1, data, by.x="names", by.y="Row.names",sort=FALSE)
```
phenoorder <- merge(le1, data, by.x="names", by.y="Row.names",sort=FALSE)
geno <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/Landrace_noSWUS_matrix.csv",header=TRUE,row.names=1)
A <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_kinshipmatrix.csv",row.names="X")
lrdta <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_data.csv")
lrdta$X <- NULL
data <- subset(lrdta, lrdta$Region!="SWUS")
le1 <- as.data.frame(colnames(geno))
names(le1)[1] <- "names"
le2 <- as.data.frame(data$Row.names)
phenoorder <- merge(le1, data, by.x="names", by.y="Row.names",sort=FALSE)le1 <- as.data.frame(colnames(geno))
names(le1)[1] <- "names"
le2 <- as.data.frame(data$Row.names)
#again, this is where i realize i had to rename 626.2 to 626.1
phenoorder <- merge(le1, data, by.x="names", by.y="Row.names",sort=FALSE)
=======
n.cells <- apply(!is.na(stoma), MAR=1, FUN="sum")
DAGLL.jags <- jags.model("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/DAG_twomediator_NomomGS.txt", list(leaflength=log(leaflength),stoma=log(stoma),n.mothers=max(fgrote$momindex),n.indiv=dim(fgrote)[1],n.cells=n.cells,n.times=3,mother.index=fgrote$momindex,GS=log(fgrote$genomesize)),n.chains=2)#n.times=3
update(DAGLL.jags, n.iter=20000)
DAGLL.samples <- coda.samples(DAGLL.jags, c("beta.GS","tao.GS","GS.contrast","U.z.indivCS","U.z.indivLL","U.z.indivLE","U.tao.LL","U.LE.coeffs","U.StCS.coeffs"),n.iter=100000, thin=100)
mcmcplot(DAGLL.samples)
chain1<- as.matrix(DAGLL.samples[[1]])
chain2<- as.matrix(DAGLL.samples[[2]])
write.csv(chain1,"~/Desktop/DAGLL10prior.jags.1mil.chain1.csv")
write.csv(chain2,"~/Desktop/DAGLL10prior.jags.1mil.chain2.csv")
fgrote<-read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/grote_Indexmoms_groundedLL_d16NA.csv")
stoma.positions <- str_detect(names(fgrote),"stom*")
stoma <- fgrote[,names(fgrote)[stoma.positions]]
stoma <- 0.0001 * stoma #convert mircons to centimeters
leaflength.positions <- str_detect(names(fgrote), "leaf3diff*")#change this to leaf3diff*
leaflength <- fgrote[,names(fgrote)[leaflength.positions]]
n.cells <- apply(!is.na(stoma), MAR=1, FUN="sum")
DAGLL.jags <- jags.model("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/DAG_twomediator_NomomGS.txt", list(leaflength=log(leaflength),stoma=log(stoma),n.mothers=max(fgrote$momindex),n.indiv=dim(fgrote)[1],n.cells=n.cells,n.times=3,mother.index=fgrote$momindex,GS=log(fgrote$genomesize)),n.chains=2)#n.times=3
update(DAGLL.jags, n.iter=20000)
DAGLL.samples <- coda.samples(DAGLL.jags, c("beta.GS","tao.GS","GS.contrast","U.z.indivCS","U.z.indivLL","U.z.indivLE","U.tao.LL","U.LE.coeffs","U.StCS.coeffs"),n.iter=100000, thin=100)
mcmcplot(DAGLL.samples)
data <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Teosinte_averages.csv")
View(data)
plot(data$X1C_GS ~ data$Altitude)
data <- read.csv("~/Desktop/Teosinte_perindividual.csv")
View(data)
data <- read.csv("~/Desktop/Teosinte_perindividual.csv")
View(data)
plot(data$genomesize, data$altitude)
plot(data$altitude,data$genomesize,)
library ( emma )
install.packages("rrBLUP")
library("rrBLUP")
lrdta <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_data.csv")
lrdta$X <- NULL
data <- subset(lrdta, lrdta$Region!="SWUS")
le1 <- as.data.frame(colnames(geno))
geno <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/Landrace_noSWUS_matrix.csv",header=TRUE,row.names=1)
A <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_kinshipmatrix.csv",row.names="X")
geno <- read.csv("~/Desktop/sandbox/Landrace_noSWUS_matrix.csv",header=TRUE,row.names=1)
A <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_kinshipmatrix.csv",row.names="X")
le1 <- as.data.frame(colnames(geno))
geno <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/Landrace_noSWUS_matrix.csv",header=TRUE,row.names=1)
le1 <- as.data.frame(colnames(geno))
names(le1)[1] <- "names"
le2 <- as.data.frame(data$Row.names)
phenoorder <- merge(le1, data, by.x="names", by.y="Row.names",sort=FALSE)
library ( emma )
install.packages("rrBLUP")
library ( emma )
library("rrBLUP")
lrdta <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_data.csv")
lrdta$X <- NULL
data <- subset(lrdta, lrdta$Region!="SWUS")
le1 <- as.data.frame(colnames(geno))
names(le1)[1] <- "names"
le2 <- as.data.frame(data$Row.names)
phenoorder <- merge(le1, data, by.x="names", by.y="Row.names",sort=FALSE)
geno <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/Landrace_noSWUS_matrix.csv",header=TRUE,row.names=1)
A <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_kinshipmatrix.csv",row.names="X")
le1 <- as.data.frame(colnames(geno))
names(le1)[1] <- "names"
le2 <- as.data.frame(data$Row.names)
phenoorder <- merge(le1, data, by.x="names", by.y="Row.names",sort=FALSE)
gs <- t ( as.matrix ( phenoorder$GS_bp, ncol = 1 ) )
gsgb <- gs/1000000000
alt <- t ( as.matrix ( phenoorder$Altitude , ncol = 1 ) )
alt <- alt - mean ( alt ) + 0.5
A <- as.matrix ( A )
out.gsgb <- emma.REML.t ( gsgb , alt , K = A )
out.gsgb
crap <- read.csv("~/Desktop/Teosinte_perindividual.csv")
plot(crap$altitude,crap$genomesize)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
ggplot(crap, aes(altitude, genomesize, fill=speices),) + ylab("1C Genome Size") + theme(plot.background = element_rect(fill = "transparent",colour = NA))
ggplot(crap, aes(altitude, genomesize, fill=species),) + ylab("1C Genome Size") + theme(plot.background = element_rect(fill = "transparent",colour = NA))
View(crap)
ggplot(crap, aes(altitude, genomesize, fill=species),) + ylab("1C Genome Size") + theme(plot.background = element_rect(fill = "transparent",colour = NA)) + geom_points()
ggplot(crap, aes(altitude, genomesize, fill=species),) + ylab("1C Genome Size") + theme(plot.background = element_rect(fill = "transparent",colour = NA)) + geom_point()
ggplot(crap, aes(altitude, genomesize, fill=species),) + ylab("1C Genome Size") + theme(plot.background = element_rect(fill = "transparent",colour = NA)) + geom_boxplot()
ggplot(crap, aes(altitude, genomesize, fill=species),) + ylab("1C Genome Size") + theme(plot.background = element_rect(fill = "transparent",colour = NA)) + geom_point()
View(crap)
crap2 <- read.csv("~/Desktop/Teosinte_perindividual.csv")
crap <- subset(crap, crap$altitude=! "NA")
crap <- subset(crap, crap$altitude!= "NA")
View(crap)
plot(crap$altitude,crap$genomesize)
ggplot(crap, aes(altitude, genomesize, fill=species),) + ylab("1C Genome Size") + theme(plot.background = element_rect(fill = "transparent",colour = NA)) + geom_boxplot()
ggplot(crap, aes(altitude, genomesize, fill=species),) + ylab("1C Genome Size") + theme(plot.background = element_rect(fill = "transparent",colour = NA)) + geom_point()
ggplot(crap, aes(altitude, genomesize, fill=species),) + ylab("1C Genome Size") + geom_boxplot()
ggplot(crap, aes(altitude, genomesize, fill=species),) + ylab("1C Genome Size") + geom_point()
ggplot(crap, aes(altitude, genomesize, shape=factor(species)),) + ylab("1C Genome Size") + geom_point()
ggplot(crap, aes(altitude, genomesize, shape=factor(species)),) + ylab("1C Genome Size") + geom_point(fill=species)
ggplot(crap, aes(altitude, genomesize, shape=factor(species)),) + ylab("1C Genome Size") + geom_point(aes(fill=species))
ggplot(crap, aes(altitude, genomesize, shape=factor(species)),) + ylab("1C Genome Size") + geom_point()
ggplot(crap, aes(altitude, genomesize, shape=factor(species)),) + ylab("1C Genome Size") + geom_point(size=3)
head(crap)
library(dplyr)
install.packages("dplyr")
library(dplyr)
head(crap)
filter(crap,species=="mexicana") %>% ggplot()+geom_point()
filter(crap,species=="mexicana") %>% ggplot(aes(y=genomesize,x=altitude))+geom_point()
filter(crap,species=="mexicana") %>% ggplot(aes(y=genomesize,x=altitude))+geom_point()+geom_smooth(method="lm")
mex<-subset(crap,species=="mexicana")
summary(lm(data=mex,genomeisze~pop+altitude))
summary(lm(data=mex,genomesize~pop+altitude))
summary(lm(data=mex,genomesize~Pop+altitude))
lm(data=mex,genomesize~altitude)
mex
sumary(lm(data=mex,genomesize~altitude))
summary(lm(data=mex,genomesize~altitude))
mexres<-lm(data=mex,genomesize~altitude)$residuals
mexres
mexres<-lm(data=mex,genomesize~Pop)$residuals
summary(lm(mexres~mex$altitude))
plot(mexres~mex$altitude)
summary(lm(data=mex,genomesize~Pop+altitude))
library(lme4)
summary(lme4(data=mex,genomesize~altitude+1|Pop))
summary(lmer(data=mex,genomesize~altitude+1|Pop))
mex
lenth(factor(mex$Pop))
length(factor(mex$Pop))
factor(mex$Pop)
levels(factor(mex$Pop))
summary(lmer(data=mex,genomesize~altitude+1|Pop))
mex$Pop[1]
mex$Pop[1]==mnex$Pop[2]
mex$Pop[1]==mex$Pop[2]
sample(mex,10,replace=T)
bobmex=mex[c(1,3,5,7,9,11,13,15,17,19),]
bobmex
summary(lm(bobmex$genomesize~bobmex$altitude))
bobmex=mex[c(1,2,5,6,9,12,13,15,17,19),]
summary(lm(bobmex$genomesize~bobmex$altitude))
summary(lmer(data=mex,genomesize~altitude+(1|Pop)))
summary(lmer(data=mex,genomesize~altitude+1|Pop))
summary(lmer(data=mex,genomesize~altitude+(1|Pop)))
install.packages(lmerTest)
install.packages("lmerTest")
library(lmerTest)
summary(lmer(data=mex,genomesize~altitude+(1|Pop)))
filter(crap,species=="mexicana") %>% summary(lmer(.,genomesize~altitude+(1|Pop)))
filter(crap,species=="mexicana") %>% summary(lmer($.$,genomesize~altitude+(1|Pop)))
parv=filter(crap,species=="parviglumis") %>%
parv=filter(crap,species=="parviglumis")
summary(lmer(parv,genomesize~altitude+(1|Pop)))
mex=filter(crap,species=="mexicana")
summary(lmer(mex,genomesize~altitude+(1|Pop)))
summary(lmer(data=mex,genomesize~altitude+(1|Pop)))
summary(lmer(data=parv,genomesize~altitude+(1|Pop)))
summary(lmer(data=parv,genomesize~altitude+(1|Pop)))
parv=filter(crap,species=="parviglumis")
summary(lmer(data=parv,genomesize~altitude+(1|Pop)))
head(crap)
summary(lmer(data=crap,genomesize~altitude+species+(1|Pop)))
ggplot(crap, aes(altitude, genomesize, fill=species),) + ylab("1C Genome Size") + geom_boxplot()
t
ggplot(crap, aes(altitude, genomesize, shape=factor(species))) + ylab("1C Genome Size") + geom_point(size=3)
filter(crap,altitude>1750 || altitude < 1250)
ggplot(aes(altitude, genomesize, shape=factor(species))) + ylab("1C Genome Size") + geom_point(size=3)
filter(crap,altitude>1750 || altitude < 1250) %>%
ggplot(aes(altitude, genomesize, shape=factor(species))) + ylab("1C Genome Size") + geom_point(size=3)
filter(crap,altitude>1750 || altitude < 1250) %>%
ggplot(aes(altitude, genomesize, shape=factor(species))) + ylab("1C Genome Size") + geom_point(size=3)
filter(crap,abs(altitude-1500)>250) %>%
ggplot(aes(altitude, genomesize, shape=factor(species))) + ylab("1C Genome Size") + geom_point(size=3)
summary(lmer(data=bob,genomesize~altitude+species+(1|Pop)))
summary(lmer(data=bob,genomesize~altitude+species+(1|Pop)))
bob=filter(crap,abs(altitude-1500)>250)
summary(lmer(data=bob,genomesize~altitude+species+(1|Pop)))
out.gsgb
out.gsgb <- emma.REML.t ( gsgb , alt , K = A )
emma.REML.t
source("~/Desktop/jri_emma_fun.txt")
source("~/Desktop/jri_emma_fun.txt")
out.gsgb <- emma.REML.t_beta ( gsgb , alt , K = A )
out.gsgb <- emma::emma.REML.t_beta ( gsgb , alt , K = A )
emma.eigen.L.w.Z
source("~/Desktop/jri_emma_fun.txt")
out.gsgb <- emma.REML.t_beta ( gsgb , alt , K = A )
out.gsgb <- emma.REML.t ( gsgb , alt , K = A )
out.gsgb <- emma.REML.t ( gsgb , alt , K = A )
source("~/Desktop/jri_emma_fun.txt")
out.gsgb <- emma.REML.t_beta ( gsgb , alt , K = A )
out.gsgb$beta
out.gsgb
-0.0001104795*100
-0.0001104795*100*1E6
-0.0001104795*1E6
gsgb
alt
-0.0001104795*1E6
-0.0001104795*1E3
-0.0001104795*1E3*100
library ( emma )
library("rrBLUP")
lrdta <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_data.csv")
lrdta$X <- NULL
data <- subset(lrdta, lrdta$Region!="SWUS")
le1 <- as.data.frame(colnames(geno))
names(le1)[1] <- "names"
le2 <- as.data.frame(data$Row.names)
phenoorder <- merge(le1, data, by.x="names", by.y="Row.names",sort=FALSE)
lrdta <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_data.csv")
lrdta$X <- NULL
data <- subset(lrdta, lrdta$Region!="SWUS")
geno <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/Landrace_noSWUS_matrix.csv",header=TRUE,row.names=1)
A <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_kinshipmatrix.csv",row.names="X")
le1 <- as.data.frame(colnames(geno))
names(le1)[1] <- "names"
le2 <- as.data.frame(data$Row.names)
#again, this is where i realize i had to rename 626.2 to 626.1
phenoorder <- merge(le1, data, by.x="names", by.y="Row.names",sort=FALSE)
lrdta <- read.csv("~/Desktop/sandbox/Landrace_data.csv")
>>>>>>> 9418a0eb3035598edffcb06d5c38aa669b8c3859
gs <- t ( as.matrix ( phenoorder$GS_bp, ncol = 1 ) )
gsgb <- gs/1000000000
alt <- t ( as.matrix ( phenoorder$Altitude , ncol = 1 ) )
alt <- alt - mean ( alt ) + 0.5
A <- as.matrix ( A )
<<<<<<< HEAD
source("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SelectionTests/jri_emma_returnbeta.txt")
=======
source("~/Desktop/jri_emma_fun.txt")
>>>>>>> 9418a0eb3035598edffcb06d5c38aa669b8c3859
out.gsgb <- emma.REML.t ( gsgb , alt , K = A )
out.gsgb <- emma.REML.t_beta ( gsgb , alt , K = A )
out.gsgb
knob <- t ( as.matrix ( phenoorder$X180knobbp, ncol = 1 ) )
knobgb <- knob/1000000000
<<<<<<< HEAD
out.knobgb <- emma.REML.t ( knobgb , alt , K = A )
=======
>>>>>>> 9418a0eb3035598edffcb06d5c38aa669b8c3859
out.knobgb <- emma.REML.t_beta ( knobgb , alt , K = A )
out.knobgb
tr1 <- t ( as.matrix ( phenoorder$TR1bp, ncol = 1 ) )
tr1gb <- tr1/1000000000
out.tr1gb <- emma.REML.t ( tr1gb , alt , K = A )
out.tr1gb <- emma.REML.t_beta ( tr1gb , alt , K = A )
out.tr1gb
<<<<<<< HEAD
=======
out.centcgb <- emma.REML.t_beta ( centcgb , alt , K = A )
>>>>>>> 9418a0eb3035598edffcb06d5c38aa669b8c3859
centc <- t ( as.matrix ( phenoorder$CentCbp, ncol = 1 ) )
centcgb <- centc/1000000000
out.centcgb <- emma.REML.t ( centcgb , alt , K = A )
out.centcgb <- emma.REML.t_beta ( centcgb , alt , K = A )
out.centcgb
<<<<<<< HEAD
# pval: 0.8488931
# beta: 8.700442e-08
#selection on overall TE's
=======
tes <- t ( as.matrix ( phenoorder$TotallTebp, ncol = 1 ) )
tesgb <- tes/1000000000
>>>>>>> 9418a0eb3035598edffcb06d5c38aa669b8c3859
tes <- t ( as.matrix ( phenoorder$TotallTebp, ncol = 1 ) )
tesgb <- tes/1000000000
out.tesgb <- emma.REML.t ( tesgb , alt , K = A )
out.tesgb <- emma.REML.t_beta ( tesgb , alt , K = A )
out.tesgb
<<<<<<< HEAD
#pval: 0.00184469
#beta: -6.012855e-05
#selection on gs-knobs
noknob <- t ( as.matrix ( phenoorder$Gsnoknob, ncol = 1 ) )
noknobgb <- noknob/1000000000
out.noknobgb <- emma.REML.t ( noknobgb , alt , K = A )
out.noknobgb
# pval: 0.01652117
fin.knob <- emma.REML.t ( knobgb , alt , X0 =  cbind ( rep ( 1 , 83 ) , c ( gsgb ) ) , K = A )
fin.knob <- emma.REML.t_beta ( knobgb , alt , X0 =  cbind ( rep ( 1 , 83 ) , c ( gsgb ) ) , K = A )
fin.knob
fin.tr1 <- emma.REML.t ( tr1gb , alt , X0 =  cbind ( rep ( 1 , 83 ) , c ( gsgb ) ) , K = A )
fin.tr1 <- emma.REML.t_beta ( tr1gb , alt , X0 =  cbind ( rep ( 1 , 83 ) , c ( gsgb ) ) , K = A )
fin.tr1
knob <- t ( as.matrix ( phenoorder$X180knobbp, ncol = 1 ) )
knobgb <- knob/1000000000
out.knobgb <- emma.REML.t ( knobgb , alt , K = A )
out.knobgb <- emma.REML.t_beta ( knobgb , alt , K = A )
out.knobgb
source("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SelectionTests/jri_emma_returnbeta.txt")
pheno <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Master_mexnucleo_pruned.csv") #phenotype data in matching order
geno <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/Mexicana_conversion/GBS_final.txt")
geno$X <- NULL
dt <- t(geno)
A <- A.mat(dt)
#create seperate matrices for each phenotype you want to model.
gs <- t ( as.matrix ( pheno$GS_bp, ncol = 1 ) )
gsgb <- gs/1000000000
knob180 <- t ( as.matrix (pheno$X180knobbp, ncol=1))
knob180gb <- knob180/1000000000
alt <- t ( as.matrix ( pheno$Altitude , ncol = 1 ) )
alt <- alt - mean ( alt ) + 0.5
#mean centering between 0 and 1
A <- as.matrix ( A )
#make sure your kinship matrix is a matrix.
out.gsgb <- emma.REML.t_beta ( gsgb , alt , K = A )
out.gsgb
gs <- t ( as.matrix ( pheno$X180knobbp, ncol = 1 ) )
gsgb <- gs/1000000000
out.gsgb <- emma.REML.t_beta ( gsgb , alt , K = A )
out.gsgb
gs <- t ( as.matrix ( pheno$TR1bp, ncol = 1 ) )
gsgb <- gs/1000000000
out.gsgb <- emma.REML.t_beta ( gsgb , alt , K = A )
out.gsgb
gs <- t ( as.matrix ( pheno$TotalTebp, ncol = 1 ) )
gsgb <- gs/1000000000
out.gsgb <- emma.REML.t_beta ( gsgb , alt , K = A )
out.gsgb
setwd("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SelectionTests/SelectionTestData/")
gbs<-read.csv("GBS_alt_threshold_final.txt")
gbs$X <- NULL
dt<-(t(gbs))
A<-A.mat(dt)
pheno<-read.csv("Pheno_alt_threshold_ordered.csv")
gs <- t ( as.matrix (pheno$GS_bp, ncol=1) )
gsgb <- gs/1000000000
alt <- t ( as.matrix (pheno$Altitude, ncol=1))
alt <- alt - mean(alt) + 0.5
knob180 <- t ( as.matrix (pheno$X180knobbp, ncol=1))
knob180gb <- knob180/1000000000
TR1 <- t ( as.matrix (pheno$TR1bp, ncol=1))
TR1gb <- TR1/1000000000
Te <- t ( as.matrix (pheno$TotalTebp, ncol=1))
Tegb <- Te/1000000000
out.gsgb <- emma.REML.t_beta( gsgb,alt,K=A)
out.gsgb
fin.gs <- emma.REML.t_beta ( gsgb , alt , X0 =  cbind ( rep ( 1 , 70 ) , c ( TR1gb ) ) , K = A )
fin.gs
-5.422124E-05
as.integer(-5.422124E-05)
format(-5.422124E-05, scientific=FALSE)
format(-0.0001764108 , scientific=FALSE)
library(rjags)
install.packages("rjags")
library(rjags) #make sure to get this working
setwd("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/Gridcomparison/")
chain1<- read.csv("FINAL_4.0ll_.003cellsizechain1.csv")
chain2<- read.csv("FINAL_4.0ll_.003cellsizechain2.csv")
both<- rbind(chain1,chain2)
input4.0_.3 <- density(both$GS.contrast,adjust=1.3,from=-.1,to=.1)
input4.0_.3
View(chain1)
colnames(both)
setwd("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/Gridcomparison/")
chain1<- read.csv("FINAL_4.0ll_.003cellsizechain1.csv")
chain2<- read.csv("FINAL_4.0ll_.003cellsizechain2.csv")
both<- rbind(chain1,chain2)
input4.0_.3 <- density(both$beta.GS,adjust=1.3,from=-.1,to=.1)
chain1<- read.csv("FINAL_4.0ll_.0032cellsizechain1.csv")
chain2<- read.csv("FINAL_4.0ll_.0032cellsizechain2.csv")
both<- rbind(chain1,chain2)
input4.0_.32 <- density(both$beta.GS,adjust=1.3,from=-.1,to=.1)
chain1<- read.csv("FINAL_3.6ll_.003cellsizechain1.csv")
chain2<- read.csv("FINAL_3.6ll_.003cellsizechain2.csv")
both<- rbind(chain1,chain2)
input3.6_.3 <- density(both$beta.GS,adjust=1.3,from=-.1,to=.1)
chain1<- read.csv("FINAL_3.6ll_.0028cellsizechain1.csv")
chain2<- read.csv("FINAL_3.6ll_.0028cellsizechain2.csv")
both<- rbind(chain1,chain2)
input3.6_.28 <- density(both$beta.GS,adjust=1.3,from=-.1,to=.1)
chain1<- read.csv("FINAL_3.6ll_.0032cellsizechain1.csv")
chain2<- read.csv("FINAL_3.6ll_.0032cellsizechain2.csv")
both<- rbind(chain1,chain2)
input3.6_.32 <- density(both$beta.GS,adjust=1.3,from=-.1,to=.1)
par(mar=c(2,.8,2,.8)+0.1,oma=c(.5,3.5,3.5,.5))
my.layout <- layout(matrix(1:12, ncol=4,byrow=TRUE),widths=c(1.5,3,3,3),heights=c(1,1,1))
#layout.show(my.layout)
#toprow
plot(c(0,1),c(0,1),type="n",bty="n",xaxt="n",yaxt="n",xlab="",ylab="")
plot(c(0,1),c(0,1),type="n",bty="n",xaxt="n",yaxt="n",xlab="",ylab="")
text(0.5,0.5,".0028",cex=2,font=2)
plot(c(0,1),c(0,1),type="n",bty="n",xaxt="n",yaxt="n",xlab="",ylab="")
text(0.5,0.5,".0030",cex=2,font=2)
plot(c(0,1),c(0,1),type="n",bty="n",xaxt="n",yaxt="n",xlab="",ylab="")
text(0.5,0.5,".0032",cex=2,font=2)
plot(c(0,1),c(0,1),type="n",bty="n",xaxt="n",yaxt="n",xlab="",ylab="")
text(0.5,0.5,"3.6",cex=2,font=2)
plot(input3.6_.28,ylab="",yaxt="n",main="",bty="n",lwd=2,cex.axis=1.5)
abline(v=0,col="red",lty=2,lwd=2)
plot(input3.6_.3,ylab="",yaxt="n",main="",bty="n",lwd=2,cex.axis=1.5)
abline(v=0,col="red",lty=2,lwd=2)
plot(input3.6_.32,ylab="",yaxt="n",main="",bty="n",lwd=2,cex.axis=1.5)
abline(v=0,col="red",lty=2,lwd=2)
plot(c(0,1),c(0,1),type="n",bty="n",xaxt="n",yaxt="n",xlab="",ylab="")
text(0.5,0.5,"4.0",cex=2,font=2)
plot(input4.0_.28,ylab="",yaxt="n",main="",bty="n",lwd=2,cex.axis=1.5)
abline(v=0,col="red",lty=2,lwd=2)
plot(input4.0_.3,ylab="",yaxt="n",main="",bty="n",lwd=2,cex.axis=1.5)
abline(v=0,col="red",lty=2,lwd=2)
plot(input4.0_.32,ylab="",yaxt="n",main="",bty="n",lwd=2,cex.axis=1.5)
abline(v=0,col="red",lty=2,lwd=2)
par(xpd=NA)
text.x<- grconvertX(.6,from="ndc",to="user")
text.y<- grconvertY(.95,from="ndc",to="user")
text(text.x,text.y,"Stomatal Cell Size Prior Mean (cm)",cex=1.5,font=2)
plot(input4.0_.3,ylab="",yaxt="n",main="",bty="n",lwd=2,cex.axis=1.5)
abline(v=0,col="red",lty=2,lwd=2)
par(mfrow=c(2,1))
plot(input4.0_.3,ylab="",yaxt="n",main="",bty="n",lwd=2,cex.axis=1.5,)
abline(v=0,col="red",lty=2,lwd=2)
par(mfrow=c(1,2))
plot(input4.0_.3,ylab="",yaxt="n",main="",bty="n",lwd=2,cex.axis=1.5,)
abline(v=0,col="red",lty=2,lwd=2)
input4.0_.3 <- density(both$beta.GS,adjust=1.3,from=-.1,to=.1)
inputcontrast <- density(both$beta.GS,adjust=1.3,from=-.1,to=.1)
par(mfrow=c(2,1))
plot(input4.0_.3,ylab="",yaxt="n",main="",bty="n",lwd=2,cex.axis=1.5,)
abline(v=0,col="red",lty=2,lwd=2)
plot(inputcontrast,ylab="",yaxt="n",main="",bty="n",lwd=2,cex.axis=1.5,)
abline(v=0,col="red",lty=2,lwd=2)
chain1<- read.csv("FINAL_4.0ll_.003cellsizechain1.csv")
chain2<- read.csv("FINAL_4.0ll_.003cellsizechain2.csv")
both<- rbind(chain1,chain2)
input4.0_.3 <- density(both$beta.GS,adjust=1.3,from=-.1,to=.1)
inputcontrast <- density(both$GS.contrast,adjust=1.3,from=-.1,to=.1)
par(mfrow=c(2,1))
plot(input4.0_.3,ylab="",yaxt="n",main="",bty="n",lwd=2,cex.axis=1.5,)
abline(v=0,col="red",lty=2,lwd=2)
plot(inputcontrast,ylab="",yaxt="n",main="",bty="n",lwd=2,cex.axis=1.5,)
abline(v=0,col="red",lty=2,lwd=2)
par(mfrow=c(2,1))
plot(input4.0_.3,ylab="",yaxt="n",main="",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Size Coefficient")
plot(input4.0_.3,ylab="",yaxt="n",main="",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Size Coefficient")
plot(input4.0_.3,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Size Coefficient")
abline(v=0,col="red",lty=2,lwd=2)
plot(input4.0_.3,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Size Coefficient",xlab="")
par(mfrow=c(2,1))
plot(input4.0_.3,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Size Coefficient",xlab="")
abline(v=0,col="red",lty=2,lwd=2)
plot(inputcontrast,ylab="",yaxt="n",main="",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Production Coefficient")
plot(inputcontrast,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Production Coefficient")
abline(v=0,col="red",lty=2,lwd=2)
par(mfrow=c(2,1))
plot(input4.0_.3,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Size Coefficient",xlab="")
abline(v=0,col="red",lty=2,lwd=2)
plot(inputcontrast,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Production Coefficient",xlab="")
abline(v=0,col="red",lty=2,lwd=2)
par(mfrow=c(2,1))
plot(input4.0_.3,ylab="",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Size Coefficient",xlab="")
plot(input4.0_.3,bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Size Coefficient",xlab="")
par(mfrow=c(2,1))
plot(input4.0_.3,bty="n",yaxt="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Size Coefficient",xlab="")
abline(v=0,col="red",lty=2,lwd=2)
par(mfrow=c(2,1))
plot(input4.0_.3,bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Size Coefficient",xlab="")
abline(v=0,col="red",lty=2,lwd=2)
plot(inputcontrast,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Production Coefficient",xlab="")
abline(v=0,col="red",lty=2,lwd=2)
par(mfrow=c(2,1))
plot(input4.0_.3,bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Size Coefficient",xlab="")
abline(v=0,col="red",lty=2,lwd=2)
plot(inputcontrast,bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Production Coefficient",xlab="")
abline(v=0,col="red",lty=2,lwd=2)
par(mfrow=c(2,1))
plot(input4.0_.3,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Size Coefficient",xlab="")
abline(v=0,col="red",lty=2,lwd=2)
plot(inputcontrast,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Production Coefficient",xlab="")
abline(v=0,col="red",lty=2,lwd=2)
par(mfrow=c(2,1))
plot(input4.0_.3,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Size Coefficient",xlab="")
polygon(input4.0_.3, col="red", border="blue")
plot(input4.0_.3,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Size Coefficient",xlab="")
polygon(input4.0_.3, col=rgb(.5, .5, .5, .2, names = NULL, maxColorValue = 1), border="black")
plot(input4.0_.3,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Size Coefficient",xlab="")
polygon(input4.0_.3, col=rgb(.5, .5, .1, .2, names = NULL, maxColorValue = 1), border="black")
abline(v=0,col="red",lty=2,lwd=2)
plot(input4.0_.3,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Size Coefficient",xlab="")
polygon(input4.0_.3, col=rgb(.5, .5, .1, .2, names = NULL, maxColorValue = 1), border="gray")
abline(v=0,col="red",lty=2,lwd=2)
polygon(input4.0_.3, col=rgb(.5, .1, .1, .2, names = NULL, maxColorValue = 1), border="gray")
plot(input4.0_.3,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Size Coefficient",xlab="")
polygon(input4.0_.3, col=rgb(.5, .1, .1, .2, names = NULL, maxColorValue = 1), border="gray")
abline(v=0,col="red",lty=2,lwd=2)
plot(inputcontrast,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Production Coefficient",xlab="")
plot(input4.0_.3,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Size Coefficient",xlab="")
polygon(input4.0_.3, col=rgb(.5, .1, .1, .2, names = NULL, maxColorValue = 1), border="gray")
plot(input4.0_.3,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Size Coefficient",xlab="")
polygon(input4.0_.3, col=rgb(.1, .5, .1, .2, names = NULL, maxColorValue = 1), border="gray")
abline(v=0,col="red",lty=2,lwd=2)
plot(inputcontrast,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Production Coefficient",xlab="")
polygon(input4.0_.3, col=rgb(.1, .1, .5, .2, names = NULL, maxColorValue = 1), border="gray")
abline(v=0,col="red",lty=2,lwd=2)
par(mfrow=c(2,1))
plot(input4.0_.3,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Size Coefficient",xlab="")
polygon(input4.0_.3, col=rgb(.1, .5, .1, .2, names = NULL, maxColorValue = 1), border="gray")
abline(v=0,col="red",lty=2,lwd=2)
plot(inputcontrast,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Production Coefficient",xlab="")
polygon(inputcontrast, col=rgb(.1, .1, .5, .2, names = NULL, maxColorValue = 1), border="gray")
abline(v=0,col="red",lty=2,lwd=2)
polygon(inputcontrast, col=rgb(.1, .1, .5, .2, names = NULL, maxColorValue = 1), border="blue")
par(mfrow=c(2,1))
plot(input4.0_.3,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Size Coefficient",xlab="")
polygon(input4.0_.3, col=rgb(.1, .5, .1, .2, names = NULL, maxColorValue = 1), border="gray")
abline(v=0,col="red",lty=2,lwd=2)
plot(inputcontrast,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Production Coefficient",xlab="")
polygon(inputcontrast, col=rgb(.1, .1, .5, .2, names = NULL, maxColorValue = 1), border="blue")
abline(v=0,col="red",lty=2,lwd=2)
par(mfrow=c(2,1))
plot(input4.0_.3,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Size Coefficient",xlab="")
#polygon(input4.0_.3, col=rgb(.1, .5, .1, .2, names = NULL, maxColorValue = 1), border="gray")
abline(v=0,col="red",lty=2,lwd=2)
plot(inputcontrast,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Production Coefficient",xlab="")
#polygon(inputcontrast, col=rgb(.1, .1, .5, .2, names = NULL, maxColorValue = 1), border="blue")
abline(v=0,col="red",lty=2,lwd=2)
plot(inputcontrast,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Production Coefficient",xlab="")
polygon(inputcontrast, col=rgb(.1, .1, .5, .2, names = NULL, maxColorValue = 1), border="blue")
abline(v=0,col="red",lty=2,lwd=2)
plot(inputcontrast,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Production Coefficient",xlab="")
polygon(inputcontrast, col=rgb(.1, .1, .5, .2, names = NULL, maxColorValue = 1), border="gray")
abline(v=0,col="red",lty=2,lwd=2)
plot(inputcontrast,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Production Coefficient",xlab="")
polygon(inputcontrast, col=rgb(.1, .1, .5, .2, names = NULL, maxColorValue = 1), border="white")
abline(v=0,col="red",lty=2,lwd=2)
par(mfrow=c(2,1))
plot(input4.0_.3,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Size Coefficient",xlab="")
polygon(input4.0_.3, col=rgb(.5, .5, .1, .2, names = NULL, maxColorValue = 1), border="gray")
abline(v=0,col="red",lty=2,lwd=2)
plot(input4.0_.3,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Size Coefficient",xlab="")
polygon(input4.0_.3, col=rgb(.5, .2, .1, .2, names = NULL, maxColorValue = 1), border="gray")
abline(v=0,col="red",lty=2,lwd=2)
plot(input4.0_.3,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Size Coefficient",xlab="")
polygon(input4.0_.3, col=rgb(.5, .2, 0, .2, names = NULL, maxColorValue = 1), border="gray")
plot(input4.0_.3,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Size Coefficient",xlab="")
polygon(input4.0_.3, col=rgb(.5, .5, 0, .2, names = NULL, maxColorValue = 1), border="gray")
plot(input4.0_.3,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Size Coefficient",xlab="")
polygon(input4.0_.3, col=rgb(.5, .4, 0, .2, names = NULL, maxColorValue = 1), border="gray")
abline(v=0,col="red",lty=2,lwd=2)
plot(input4.0_.3,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Size Coefficient",xlab="")
polygon(input4.0_.3, col=rgb(.4, .4, 0, .2, names = NULL, maxColorValue = 1), border="gray")
abline(v=0,col="red",lty=2,lwd=2)
plot(input4.0_.3,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Size Coefficient",xlab="")
polygon(input4.0_.3, col=rgb(1, 1, 0, .2, names = NULL, maxColorValue = 1), border="gray")
abline(v=0,col="red",lty=2,lwd=2)
plot(inputcontrast,ylab="",yaxt="n",bty="n",lwd=2,cex.axis=1.5,main="Posterior Distribution of Cell Production Coefficient",xlab="")
polygon(inputcontrast, col=rgb(.1, .1, .5, .2, names = NULL, maxColorValue = 1), border="white")
abline(v=0,col="red",lty=2,lwd=2)
=======
fin.te <- emma.REML.t_beta ( tes , alt , X0 =  cbind ( rep ( 1 , 83 ) , c ( gsgb ) ) , K = A )
fin.te
gsgb <- gs/1000000000
1000000000/1000000000
fin.knob <- emma.REML.t_beta ( knobgb , alt , X0 =  cbind ( rep ( 1 , 83 ) , c ( gsgb ) ) , K = A )
fin.knob
fin.tr1 <- emma.REML.t_beta ( tr1gb , alt , X0 =  cbind ( rep ( 1 , 83 ) , c ( gsgb ) ) , K = A )
fin.tr1
fin.centc <- emma.REML.t_beta ( centcgb , alt , X0 =  cbind ( rep ( 1 , 83 ) , c ( gsgb ) ) , K = A )
fin.centc
data <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/FISHcorrelation")
View(data)
library(ggplot2)
View(data)
ggplot(data, aes(knob180, X180knobmb))
ggplot(data, aes(knob180, X180knobmb)) + geom_point()
ggplot(data, aes(knob180, X180knobmb)) + ylab("Measured Knob Content") + xlab("Observed Knob Count") + geom_point()
ggplot(crap, aes(altitude, genomesize, fill=species),) + ylab("1C Genome Size") + geom_boxplot() + geom_abline()
ggplot(data, aes(knob180, X180knobmb)) + ylab("Measured Knob Content") + xlab("Observed Knob Count") + geom_point() + geom_abline()
ggplot(data, aes(knob180, X180knobmb)) + ylab("Measured Knob Content") + xlab("Observed Knob Count") + geom_point() + geom_abline(method="lm")
ggplot(data, aes(knob180, X180knobmb)) + ylab("Measured Knob Content") + xlab("Observed Knob Count") + geom_point() + geom_smooth(method="lm", se = TRUE)
library ( emma )
library("rrBLUP")
lrdta <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_data.csv")
lrdta$X <- NULL
data <- subset(lrdta, lrdta$Region!="SWUS")
le1 <- as.data.frame(colnames(geno))
names(le1)[1] <- "names"
le2 <- as.data.frame(data$Row.names)
phenoorder <- merge(le1, data, by.x="names", by.y="Row.names",sort=FALSE)
geno <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/Landrace_noSWUS_matrix.csv",header=TRUE,row.names=1)
data <- subset(lrdta, lrdta$Region!="SWUS")
le1 <- as.data.frame(colnames(geno))
names(le1)[1] <- "names"
le2 <- as.data.frame(data$Row.names)
phenoorder <- merge(le1, data, by.x="names", by.y="Row.names",sort=FALSE)
geno <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/Landrace_noSWUS_matrix.csv",header=TRUE,row.names=1)
A <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_kinshipmatrix.csv",row.names="X")
le1 <- as.data.frame(colnames(geno))
names(le1)[1] <- "names"
le2 <- as.data.frame(data$Row.names)
phenoorder <- merge(le1, data, by.x="names", by.y="Row.names",sort=FALSE)
dataall <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Master_Data_prunedbpconv_noswus.csv")
dataal <- subset(dataall, dataall$X1C_GS!="NA")
data <- subset(dataal, dataal$X1C_GS<3.6)
dmays <- subset(data, data$Species=="mays")
dteo <- subset(data, data$Species!="mays")
View(dmays)
ggplot(lrdata, aes(Region, X1C_GS, fill=Region),) + geom_boxplot()+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size") + theme(legend.position = "none") + theme(plot.background = element_rect(fill = "transparent",colour = NA))
library(ggplot2)
ggplot(lrdata, aes(Region, X1C_GS, fill=Region),) + geom_boxplot()+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size") + theme(legend.position = "none") + theme(plot.background = element_rect(fill = "transparent",colour = NA))
lrdta <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_data.csv")
lrdta$X <- NULL
data <- subset(lrdta, lrdta$Region!="SWUS")
lrdta <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_data.csv")
lrdta$X <- NULL
data <- subset(lrdta, lrdta$Region!="SWUS")
#KINSHIP MATRIX, this is saved in Landrace_kinshipmatrix.csv
geno <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/Landrace_noSWUS_matrix.csv",header=TRUE,row.names=1)
#dt <-t(geno)
#A <- A.mat(dt)
#write.csv(A,"~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_kinshipmatrix.csv")
#to make sure order is the same
A <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_kinshipmatrix.csv",row.names="X")
le1 <- as.data.frame(colnames(geno))
names(le1)[1] <- "names"
le2 <- as.data.frame(data$Row.names)
#again, this is where i realize i had to rename 626.2 to 626.1
phenoorder <- merge(le1, data, by.x="names", by.y="Row.names",sort=FALSE)
ggplot(phenoorder, aes(Region, X1C_GS, fill=Region),) + geom_boxplot()+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size") + theme(legend.position = "none") + theme(plot.background = element_rect(fill = "transparent",colour = NA))
ggplot(phenoorder, aes(Region, X1C_GS, fill=Region),) + geom_point()+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size") + theme(legend.position = "none") + theme(plot.background = element_rect(fill = "transparent",colour = NA))
ggplot(phenoorder, aes(Altitude, X1C_GS, fill=Region),) + geom_point()+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size") + theme(legend.position = "none") + theme(plot.background = element_rect(fill = "transparent",colour = NA))
View(phenoorder)
Region
ggplot(phenoorder, aes(Altitude, X1C_GS, fill=Region),) + geom_point()+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size")
library(ggplot2)
library(gridExtra)
dataall <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Master_Data_prunedbpconv_noswus.csv")
dataal <- subset(dataall, dataall$X1C_GS!="NA")
data <- subset(dataal, dataal$X1C_GS<3.6)
dmays <- subset(data, data$Species=="mays")
dteo <- subset(data, data$Species!="mays")
p1 <- ggplot(dmays, aes(Region, X1C_GS, fill=Region),) + geom_boxplot()+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size") + theme(legend.position = "none") + theme(plot.background = element_rect(fill = "transparent",colour = NA))
p1
ggplot(data, aes(Region, X1C_GS, fill=Species),) + geom_boxplot()+ ylab("1C Genome Size") + ggtitle("Zea Genome Size") + theme(plot.background = element_rect(fill = "transparent",colour = NA))+theme(axis.text=element_text(size=13), axis.title=element_text(size=14,face="bold"),legend.text=element_text(size=13))
ggplot(dteo, aes(Species, X1C_GS, fill=Species)) + geom_boxplot()+ ylab("1C Genome Size") + ggtitle("Teosinte Genome Size") + theme(legend.position = "none") + theme(plot.background = element_rect(fill = "transparent",colour = NA))
p1
ggplot(dteo, aes(Altitude, TR1bp, color=Species)) + geom_point()+ ylab("Base Pairs") + theme(legend.title=element_blank()) +ggtitle("TR1 BP")+ geom_smooth(method=lm)
ggplot(dmays, aes(Altitude, X180knobbp, color=Species)) + geom_point()+ ylab("Base Pairs") + theme(legend.title=element_blank()) +ggtitle("180 Knob BP")+ geom_smooth(method=lm)
ggplot(data, aes(Altitude, CentCbp, color=Species)) + geom_point()+ ylab("Base Pairs") + theme(legend.title=element_blank()) +ggtitle("CentC") + geom_smooth(method=lm)
library(plyr)
library(plotrix)
library(reshape2)
agg <- ddply(data, .(Species, Region), numcolwise(mean))
logagg <- log10(agg[,8:ncol(agg)]/1000000)
ag <- as.data.frame(c(agg[,1:7],logagg))
cleanag <- ag[,c("Species","Region","TotallTebp", "X180knobbp","TR1bp","CentCbp")]
cleanag$Taxa <- paste(cleanag$Species,cleanag$Region)
cleanag2 <- cleanag[,3:ncol(cleanag)]
cleanag.m <- melt(cleanag2,id.vars="Taxa")
log10(1000)
crap <- c("a","b","c")
ggplot(cleanag.m, aes(Taxa, value)) + geom_bar(aes(fill = variable), position = "dodge", stat="identity") + labs(y="log Composition") + scale_fill_manual(name="", breaks=c("TotallTebp", "X180knobbp","TR1bp","CentCbp"), labels=c("Total TE", "180 Knob","TR1","CentC"), values = c("darkgreen", "royalblue4", "khaki4", "peru")) + theme(axis.text=element_text(size=13), axis.title=element_text(size=14,face="bold"),legend.text=element_text(size=13)) + scale_y_continuous(breaks = 1:3, labels=c("10","100","1000"))
ggplot(cleanag.m, aes(Taxa, value)) + geom_bar(aes(fill = variable), position = "dodge", stat="identity") + labs(y="log Composition") + theme(axis.ticks = element_blank(), axis.text.y = element_blank()) + scale_fill_manual(name="", breaks=c("TotallTebp", "X180knobbp","TR1bp","CentCbp"), labels=c("Total TE", "180 Knob","TR1","CentC"), values = c("darkgreen", "royalblue4", "khaki4", "peru"))+theme(axis.text=element_text(size=13), axis.title=element_text(size=14,face="bold"),legend.text=element_text(size=13))
ggplot(phenoorder, aes(Altitude, X1C_GS, fill=Region),) + geom_point()+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size")
ggplot(phenoorder, aes(Altitude, X1C_GS, color=Region),) + geom_point()+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size")
ggplot(phenoorder, aes(Altitude, X1C_GS, color=Region),) + geom_point()+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size")+geom_abline()
ggplot(phenoorder, aes(Altitude, X1C_GS, color=Region),) + geom_point()+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size")+stat_smooth(mehtod="lm")
ggplot(phenoorder, aes(Altitude, X1C_GS, color=Region),) + geom_point()+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size")+stat_smooth(method="lm")
ggplot(phenoorder, aes(Altitude, X1C_GS, color=Region),) + geom_point()+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size")+geom_smooth(method="lm")
ggplot(phenoorder, aes(Altitude, X1C_GS, color=Region),) + geom_point()+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size")+geom_smooth(aes(Altitude, X1C_GS),method="lm")
ggplot(phenoorder, aes(Altitude, X1C_GS),) + geom_point()+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size")+geom_smooth(aes(Altitude, X1C_GS),method="lm")
ggplot(phenoorder, aes(Altitude, X1C_GS),) + geom_point(color=Region)+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size")+geom_smooth(aes(Altitude, X1C_GS),method="lm")
ggplot(phenoorder, aes(Altitude, X1C_GS)) + geom_point(aes(Altitude, X1C_GS),color=Region)+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size")+geom_smooth(aes(Altitude, X1C_GS),method="lm")
ggplot(phenoorder, aes(Altitude, X1C_GS)) + geom_point(aes(Altitude, X1C_GS,aes(Altitude, X1C_GS)),)+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size")+geom_smooth(aes(Altitude, X1C_GS),method="lm")
ggplot(phenoorder, aes(Altitude, X1C_GS)) + geom_point(aes(Altitude, X1C_GS,aes(Altitude, X1C_GS))+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size")+geom_smooth(aes(Altitude, X1C_GS),method="lm")
)
ggplot(phenoorder, aes(Altitude, X1C_GS,color=Region)) + geom_point(aes(Altitude, X1C_GS,aes(Altitude, X1C_GS))+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size")+geom_smooth(aes(Altitude, X1C_GS),method="lm")
ggplot(phenoorder, aes(Altitude, X1C_GS,color=Region)) + geom_point())+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size")+geom_smooth(aes(Altitude, X1C_GS),method="lm")
ggplot(phenoorder, aes(Altitude, X1C_GS,color=Region),) + geom_point())+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size")+geom_smooth(aes(Altitude, X1C_GS),method="lm")
ggplot(phenoorder, aes(Altitude, X1C_GS,color=Region),) + geom_point()+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size")+geom_smooth(aes(Altitude, X1C_GS),method="lm")
ggplot(phenoorder, aes(Altitude, X1C_GS,color=Region),) + geom_point()+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size")+geom_smooth(aes(Altitude, X1C_GS),method="lm",formula=lm(Altitude, X1C_GS))
ggplot(phenoorder, aes(Altitude, X1C_GS,color=Region),) + geom_point()+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size")+geom_smooth(method="lm",formula=lm(Altitude, X1C_GS))
ggplot(phenoorder, aes(Altitude, X1C_GS,color=Region),) + geom_point()+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size")+geom_smooth(method="lm",formula=lm(phenoorder$Altitude, phenoorder$X1C_GS))
ggplot(phenoorder, aes(Altitude, X1C_GS,color=Region),) + geom_point()+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size")+geom_smooth(method="lm",formula=Altitude~X1C_GS)
ggplot(phenoorder, aes(Altitude, X1C_GS,color=Region),) + geom_point()+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size")+geom_smooth(method="lm",formula=phenoorder$Altitude~phenoorder$X1C_GS)
ggplot(phenoorder, aes(Altitude, X1C_GS,color=Region),) + geom_point()+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size")+geom_smooth(phenoorder,method="lm",formula=Altitude~X1C_GS)
ggplot(phenoorder, aes(Altitude, X1C_GS,color=Region),) + geom_point()+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size")+geom_smooth(aes(Altitude, X1C_GS),method="lm",formula=Altitude~X1C_GS)
abline(lm(phenoorder$Altitude,phenoorder$X1C_GS))
ggplot(phenoorder, aes(Altitude, X1C_GS,color=Region),) + geom_point()+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size")+geom_smooth(group=1,method="lm")
ggplot(phenoorder, aes(Altitude, X1C_GS,color=Region),) + geom_point()+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size")+geom_smooth(group=Altitude,method="lm")
ggplot(phenoorder, aes(Altitude, X1C_GS,color=Region),) + geom_point()+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size")+geom_smooth(group=Species,method="lm")
ggplot(phenoorder, aes(Altitude, X1C_GS,color=Region),) + geom_point()+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size")+geom_smooth(aes(group=Species),method="lm")
ggplot(phenoorder, aes(Altitude, X1C_GS,color=Region),) + geom_point()+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size")+geom_smooth(aes(group=Species),method="lm",color="black")
ggplot(phenoorder, aes(Altitude, X1C_GS,color=Region),) + geom_point()+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size")+geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")
library(gridExtra)
View(phenoorder)
p1<-ggplot(phenoorder, aes(Altitude, X180knobbp,color=Region),) + geom_point()+ ylab("1C Genome Size") + ggtitle("Landrace Genome Size")+geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")
p1
p3<-ggplot(phenoorder, aes(Altitude, TotalTEbp,color=Region),) + geom_point()+ ylab("180bp Knob (bp)") + ggtitle("Landrace Genome Size")+geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")
p3
p3<-ggplot(phenoorder, aes(Altitude, TotallTebp,color=Region),) + geom_point()+ ylab("180bp Knob (bp)") + ggtitle("Landrace Genome Size")+geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")
p3
gridarrage(p1,p2,p3,ncol=3)
library(gridExtra)
gridarrage(p1,p2,p3,ncol=3)
grid.arrange(p1,p2,p3,ncol=3)
p2<-ggplot(phenoorder, aes(Altitude, X180knobbp,color=Region),) + geom_point()+ ylab("180bp Knob (bp)") + ggtitle("Landrace Genome Size")+geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")
grid.arrange(p1,p2,p3,ncol=3)
p1<-ggplot(phenoorder, aes(Altitude, X1C_GS,color=Region),) + geom_point()+ ylab("1C Genome Size (pg)") + ggtitle("Landrace Genome Size")+geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(fill=FALSE)
p1
p1<-ggplot(phenoorder, aes(Altitude, X1C_GS,color=Region),) + geom_point()+ ylab("1C Genome Size (pg)") + ggtitle("Landrace Genome Size")+geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE)
p1
p1<-ggplot(phenoorder, aes(Altitude, X1C_GS,color=Region),) + geom_point()+ ylab("1C Genome Size (pg)") + ggtitle("Landrace Genome Size")+geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE)
p2<-ggplot(phenoorder, aes(Altitude, X180knobbp,color=Region),) + geom_point()+ ylab("180bp Knob (bp)") + ggtitle("Landrace Genome Size")+geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE)
p3<-ggplot(phenoorder, aes(Altitude, TotallTebp,color=Region),) + geom_point()+ ylab("180bp Knob (bp)") + ggtitle("Landrace Genome Size")+geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")
grid.arrange(p1,p2,p3,ncol=3)
p3<-ggplot(phenoorder, aes(Altitude, TotallTebp,color=Region),) + geom_point()+ ylab("Total TE content (bp)") + ggtitle("Landrace Genome Size")+geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")
p3<-ggplot(phenoorder, aes(Altitude, TotallTebp,color=Region),) + geom_point()+ ylab("Total TE content (bp)") + ggtitle("Landrace Genome Size")+geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE)
grid.arrange(p1,p2,p3,ncol=3)
p1<-ggplot(phenoorder, aes(Altitude, X1C_GS,color=Region),) + geom_point()+ ylab("1C Genome Size (pg)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) #ggtitle("Genome Size")
p2<-ggplot(phenoorder, aes(Altitude, X180knobbp,color=Region),) + geom_point()+ ylab("180bp Knob (bp)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE)#+ ggtitle("Genome Size")
p3<-ggplot(phenoorder, aes(Altitude, TotallTebp,color=Region),) + geom_point()+ ylab("Total TE content (bp)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE)#+ ggtitle("Landrace Genome Size")
grid.arrange(p1,p2,p3,ncol=3)
p1<-ggplot(phenoorder, aes(Altitude, X1C_GS,color=Region),) + geom_point()+ ylab("1C Genome Size (pg)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")#ggtitle("Genome Size")
p1<-ggplot(phenoorder, aes(Altitude, X1C_GS,color=Region),) + geom_point()+ ylab("1C Genome Size (pg)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")#ggtitle("Genome Size")
p1<-ggplot(phenoorder, aes(Altitude, X1C_GS,color=Region),) + geom_point()+ ylab("1C Genome Size (pg)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")#ggtitle("Genome Size")
p2<-ggplot(phenoorder, aes(Altitude, X180knobbp,color=Region),) + geom_point()+ ylab("180bp Knob (bp)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE)+xlab("Altitude (m)")#+ ggtitle("Genome Size")
p3<-ggplot(phenoorder, aes(Altitude, TotallTebp,color=Region),) + geom_point()+ ylab("Total TE content (bp)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE)+xlab("Altitude (m)")#+ ggtitle("Landrace Genome Size")
grid.arrange(p1,p2,p3,ncol=3)
kins <- as.matrix(A)
image(kins)
p4<-image(kins)
grid.arrange(p1,p2,p3,p4,ncol=2)
grid.arrange(p1,p2,p3,ncol=2)
grid.arrange(p1,p2,p3,ncol=3)
image(kins)
p4<-ggplot(phenoorder, aes(Altitude, CentCbp,color=Region),) + geom_point()+ ylab("Total TE content (bp)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE)+xlab("Altitude (m)")#+ ggtitle("Landrace Genome Size")
grid.arrange(p1,p2,p3,p4,ncol=3)
grid.arrange(p1,p2,p3,p4,ncol=2)
p4<-ggplot(phenoorder, aes(Altitude, CentCbp,color=Region),) + geom_point()+ ylab("CentC content (bp)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE)+xlab("Altitude (m)")#+ ggtitle("Landrace Genome Size")
grid.arrange(p1,p2,p3,p4,ncol=2)
View(A)
geno <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/Landrace_noSWUS_matrix.csv",header=TRUE,row.names=1)
View(lrdta)
geno <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/Landrace_noSWUS_matrix.csv",header=TRUE,row.names=1)
geno <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/Landrace_noSWUS_matrix.csv",header=TRUE,row.names=1)
geno2<- as.matrix(geno)
heats <- geno["RIMMA0389.1","RIMMA0398.1","RIMMA0395.2","RIMMA0696.1","RIMMA0703.1","RIMMA0720.1","RIMMA0397.1","RIMMA0710.1","RIMMA0716.1","RIMMA0393.1","RIMMA0409.1","RIMMA0410.1B","RIMMA0733.1","RIMMA0733.1","RIMMA0729.1","RIMMA0729.1","RIMMA0615.1","RIMMA0399.1","RIMMA0690.1","RIMMA0628.1","RIMMA0390.1","RIMMA0406.1","RIMMA0407.1","RIMMA0433.1","RIMMA0392.1","RIMMA0700.1","RIMMA0701.1","RIMMA0391.1B","RIMMA0428.1","RIMMA0619.1","RIMMA0709.1","RIMMA0721.1","RIMMA0394.2","RIMMA0403.2","RIMMA0702.1","RIMMA0730.1","RIMMA0730.1","RIMMA0691.1","RIMMA0708.1","RIMMA0396.1","RIMMA0405.1B","RIMMA0727.1","RIMMA0727.1","RIMMA0712.1","RIMMA0441.1","RIMMA0388.1","RIMMA0404.1","RIMMA0731.1","RIMMA0731.1","RIMMA0462.1","RIMMA0620.1","RIMMA0464.1","RIMMA0616.1","RIMMA0621.1","RIMMA0680.1","RIMMA0658.1","RIMMA0417.1","RIMMA0418.1","RIMMA0614.1","RIMMA0663.1","RIMMA0423.1","RIMMA0425.1","RIMMA0416.1","RIMMA0661.1","RIMMA0662.1","RIMMA0422.1","RIMMA0436.1","RIMMA0657.1","RIMMA0667.1","RIMMA0630.1","RIMMA0421.1","RIMMA0626.1","RIMMA0465.1","RIMMA0424.1","RIMMA0671.1","RIMMA0426.1","RIMMA0623.1","RIMMA0430.1","RIMMA0625.1","RIMMA0674.1","RIMMA0437.1","RIMMA0467.1","RIMMA0438.1","RIMMA0431.1","RIMMA0439.1","RIMMA0473.1","RIMMA0468.1","RIMMA0466.1"]
heats <- geno[c
View(heats)
heats <- geno2[c
tmp<-geno["RIMMA0389.1",]
View(tmp)
tmp<-geno[,"RIMMA0389.1"]
heats <- geno2[,c
View(heats)
geno <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/Landrace_noSWUS_matrix.csv",header=TRUE,row.names=1)
geno2<- as.matrix(geno)
heats <- geno2[,c
library("rrBLUP")
dheats <-t(heats)
A.heats <- A.mat(dheats)
image(A.heats)
image(A.heats,xlab="",ylab="")
image(A.heats,xaxt='n')
image(A.heats,xaxt='n',yaxt='n')
library(rjags)
library(stringr)
library(mcmcplots)
setwd("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/Gridcomparison/")
DAGgamma.jags <- jags.model("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/Gridcomparison/DAG_twomediator_gamma.txt", list(leaflength=log(leaflength),stoma=log(stoma),n.mothers=max(fgrote$momindex),n.indiv=dim(fgrote)[1],n.cells=n.cells,n.times=3,mother.index=fgrote$momindex,GS=log(fgrote$genomesize)),n.chains=2)
fgrote<-read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/grote_Indexmoms_groundedLL_d16NA.csv")
#make matrices with data to feed into JAGS
stoma.positions <- str_detect(names(fgrote),"stom*")
stoma <- fgrote[,names(fgrote)[stoma.positions]]
stoma <- 0.0001 * stoma #convert mircons to centimeters
leaflength.positions <- str_detect(names(fgrote), "leaf3diff*")#change this to leaf3diff*
leaflength <- fgrote[,names(fgrote)[leaflength.positions]]
n.cells <- apply(!is.na(stoma), MAR=1, FUN="sum")
DAGgamma.jags <- jags.model("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/Gridcomparison/DAG_twomediator_gamma.txt", list(leaflength=log(leaflength),stoma=log(stoma),n.mothers=max(fgrote$momindex),n.indiv=dim(fgrote)[1],n.cells=n.cells,n.times=3,mother.index=fgrote$momindex,GS=log(fgrote$genomesize)),n.chains=2)
update(DAGgamma.jags, n.iter=100000)
DAGgamma.samples <- coda.samples(DAGgamma.jags, c("beta.GS","tao.GS","GS.contrast","sd.motherStCS","sd.motherLL","sd.indivCS","sd.indivLL","sd.StCS","sd.LL","StCS.coeffs","tao.LL","LE.coeffs"),n.iter=100000, thin=800)
chain1<- as.matrix(DAGgamma.samples[[1]])
chain2<- as.matrix(DAGgamma.samples[[2]])
tmp <- as.data.frame(rbind(chain1,chain2))
mean(tmp$GS.contrast)
mean(tmp$tao.GS)
mean(tmp$beta.GS)
write.csv(chain1,"FINAL_4.8ll_.0032cellsizechain1.csv")
write.csv(chain2,"FINAL_4.8ll_.0032cellsizechain2.csv")
DAGgamma.jags <- jags.model("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/Gridcomparison/DAG_twomediator_gamma.txt", list(leaflength=log(leaflength),stoma=log(stoma),n.mothers=max(fgrote$momindex),n.indiv=dim(fgrote)[1],n.cells=n.cells,n.times=3,mother.index=fgrote$momindex,GS=log(fgrote$genomesize)),n.chains=2)
update(DAGgamma.jags, n.iter=100000)
DAGgamma.samples <- coda.samples(DAGgamma.jags, c("beta.GS","tao.GS","GS.contrast","sd.motherStCS","sd.motherLL","sd.indivCS","sd.indivLL","sd.StCS","sd.LL","StCS.coeffs","tao.LL","LE.coeffs"),n.iter=100000, thin=800)
chain1<- as.matrix(DAGgamma.samples[[1]])
chain2<- as.matrix(DAGgamma.samples[[2]])
tmp <- as.data.frame(rbind(chain1,chain2))
mean(tmp$tao.GS)
mean(tmp$beta.GS)
mean(tmp$GS.contrast)
write.csv(chain1,"FINAL_3.8ll_.0028cellsizechain1.csv")
write.csv(chain2,"FINAL_3.8ll_.0028cellsizechain2.csv")
DAGgamma.jags <- jags.model("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/Gridcomparison/DAG_twomediator_gamma.txt", list(leaflength=log(leaflength),stoma=log(stoma),n.mothers=max(fgrote$momindex),n.indiv=dim(fgrote)[1],n.cells=n.cells,n.times=3,mother.index=fgrote$momindex,GS=log(fgrote$genomesize)),n.chains=2)
update(DAGgamma.jags, n.iter=100000)
DAGgamma.samples <- coda.samples(DAGgamma.jags, c("beta.GS","tao.GS","GS.contrast","sd.motherStCS","sd.motherLL","sd.indivCS","sd.indivLL","sd.StCS","sd.LL","StCS.coeffs","tao.LL","LE.coeffs"),n.iter=100000, thin=800)
chain1<- as.matrix(DAGgamma.samples[[1]])
chain2<- as.matrix(DAGgamma.samples[[2]])
tmp <- as.data.frame(rbind(chain1,chain2))
mean(tmp$tao.GS)
mean(tmp$beta.GS)
mean(tmp$GS.contrast)
write.csv(chain1,"FINAL_3.8ll_.003cellsizechain1.csv")
write.csv(chain2,"FINAL_3.8ll_.003cellsizechain2.csv")
DAGgamma.jags <- jags.model("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Grote_stats/Gridcomparison/DAG_twomediator_gamma.txt", list(leaflength=log(leaflength),stoma=log(stoma),n.mothers=max(fgrote$momindex),n.indiv=dim(fgrote)[1],n.cells=n.cells,n.times=3,mother.index=fgrote$momindex,GS=log(fgrote$genomesize)),n.chains=2)
update(DAGgamma.jags, n.iter=100000)
DAGgamma.samples <- coda.samples(DAGgamma.jags, c("beta.GS","tao.GS","GS.contrast","sd.motherStCS","sd.motherLL","sd.indivCS","sd.indivLL","sd.StCS","sd.LL","StCS.coeffs","tao.LL","LE.coeffs"),n.iter=100000, thin=800)
chain1<- as.matrix(DAGgamma.samples[[1]])
chain2<- as.matrix(DAGgamma.samples[[2]])
tmp <- as.data.frame(rbind(chain1,chain2))
mean(tmp$tao.GS)
mean(tmp$beta.GS)
mean(tmp$GS.contrast)
write.csv(chain1,"FINAL_3.8ll_.0032cellsizechain1.csv")
write.csv(chain2,"FINAL_3.8ll_.0032cellsizechain2.csv")
>>>>>>> 9418a0eb3035598edffcb06d5c38aa669b8c3859
