ggplot(mexphen, aes(Altitude, X2c),) + geom_point()+ ylab("2C Genome Size (pg)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")#ggtitle("Genome Size")
View(mexphen)
View(mexphen)
p4 <- ggplot(mexphen, aes(Altitude, X2c),) + geom_point()+ ylab("2C Genome Size (pg)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")#ggtitle("Genome Size")
p5 <- ggplot(mexphen, aes(Altitude, X180knobbp),) + geom_point()+ ylab("2C Genome Size (pg)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")#ggtitle("Genome Size")
p6 <- ggplot(mexphen, aes(Altitude, TotalTebp),) + geom_point()+ ylab("2C Genome Size (pg)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")#ggtitle("Genome Size")
phenoorder$Group <- as.factor(phenoorder$Group)
phenoorder$X2c <- 2 * phenoorder$X1C_GS
p1<-ggplot(phenoorder, aes(Altitude, X2c,color=Group),) + geom_point()+ ylab("2C Genome Size (pg)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")#ggtitle("Genome Size")
p2<-ggplot(phenoorder, aes(Altitude, X180knobbp,color=Group),) + geom_point()+ ylab("180bp Knob (bp)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE)+xlab("Altitude (m)")#+ ggtitle("Genome Size")
p3<-ggplot(phenoorder, aes(Altitude, TotallTebp,color=Group),) + geom_point()+ ylab("Total TE content (bp)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE)+xlab("Altitude (m)")#+ ggtitle("Landrace Genome Size")
grid.arrange(p1,p2,p3,p4,p5,p6,ncol=3)
mexphen$X2c <- mexphen$X1C_GS
p4 <- ggplot(mexphen, aes(Altitude, X2c),) + geom_point()+ ylab("2C Genome Size (pg)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")#ggtitle("Genome Size")
p5 <- ggplot(mexphen, aes(Altitude, X180knobbp),) + geom_point()+ ylab("180bp Knob (bp)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")#ggtitle("Genome Size")
p6 <- ggplot(mexphen, aes(Altitude, TotalTebp),) + geom_point()+ ylab("2C Genome Size (pg)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")#ggtitle("Genome Size")
mexphen <- subset(mexphen1, mexphen1$Altitude>2000)
mexphen$X2c <- mexphen$X1C_GS
p4 <- ggplot(mexphen, aes(Altitude, X2c),) + geom_point()+ ylab("2C Genome Size (pg)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")#ggtitle("Genome Size")
p5 <- ggplot(mexphen, aes(Altitude, X180knobbp),) + geom_point()+ ylab("Total TE content (bp)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")#ggtitle("Genome Size")
p6 <- ggplot(mexphen, aes(Altitude, TotalTebp),) + geom_point()+ ylab("2C Genome Size (pg)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")#ggtitle("Genome Size")
p1<-ggplot(phenoorder, aes(Altitude, X2c,color=Group),) + geom_point()+ ylab("2C Genome Size (pg)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")#ggtitle("Genome Size")
p2<-ggplot(phenoorder, aes(Altitude, X180knobbp,color=Group),) + geom_point()+ ylab("180bp Knob (bp)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE)+xlab("Altitude (m)")#+ ggtitle("Genome Size")
p3<-ggplot(phenoorder, aes(Altitude, TotallTebp,color=Group),) + geom_point()+ ylab("Total TE content (bp)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE)+xlab("Altitude (m)")#+ ggtitle("Landrace Genome Size")
grid.arrange(p1,p2,p3,p4,p5,p6,ncol=3)
p4 <- ggplot(mexphen, aes(Altitude, X2c),) + geom_point()+ ylab("2C Genome Size (pg)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")#ggtitle("Genome Size")
p5 <- ggplot(mexphen, aes(Altitude, X180knobbp),) + geom_point()+ ylab("180bp Knob (bp)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")#ggtitle("Genome Size")
p6 <- ggplot(mexphen, aes(Altitude, TotalTebp),) + geom_point()+ ylab("Total TE content (bp)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")#ggtitle("Genome Size")
p1<-ggplot(phenoorder, aes(Altitude, X2c,color=Group),) + geom_point()+ ylab("2C Genome Size (pg)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")#ggtitle("Genome Size")
p2<-ggplot(phenoorder, aes(Altitude, X180knobbp,color=Group),) + geom_point()+ ylab("180bp Knob (bp)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE)+xlab("Altitude (m)")#+ ggtitle("Genome Size")
p3<-ggplot(phenoorder, aes(Altitude, TotallTebp,color=Group),) + geom_point()+ ylab("Total TE content (bp)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE)+xlab("Altitude (m)")#+ ggtitle("Landrace Genome Size")
grid.arrange(p1,p2,p3,p4,p5,p6,ncol=3)
mexphen1 <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Master_mexnucleo_pruned2.csv") #phenotype data in matching order
mexphen1 <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Master_mexnucleo_pruned2.csv") #phenotype data in matching order
mexphen <- subset(mexphen1, mexphen1$Altitude>2000)
View(mexphen)
p4 <- ggplot(mexphen, aes(Altitude, X1c),) + geom_point()+ ylab("2C Genome Size (pg)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")#ggtitle("Genome Size")
p5 <- ggplot(mexphen, aes(Altitude, X180knobbp),) + geom_point()+ ylab("180bp Knob (bp)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")#ggtitle("Genome Size")
p6 <- ggplot(mexphen, aes(Altitude, TotalTebp),) + geom_point()+ ylab("Total TE content (bp)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")#ggtitle("Genome Size")
p4
p5
p6
p1<-ggplot(phenoorder, aes(Altitude, X2c,color=Group),) + geom_point()+ ylab("2C Genome Size (pg)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")#ggtitle("Genome Size")
p2<-ggplot(phenoorder, aes(Altitude, X180knobbp,color=Group),) + geom_point()+ ylab("180bp Knob (bp)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE)+xlab("Altitude (m)")#+ ggtitle("Genome Size")
p3<-ggplot(phenoorder, aes(Altitude, TotallTebp,color=Group),) + geom_point()+ ylab("Total TE content (bp)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE)+xlab("Altitude (m)")#+ ggtitle("Landrace Genome Size")
grid.arrange(p1,p2,p3,p4,p5,p6,ncol=3)
p1<-ggplot(phenoorder, aes(Altitude, X2c,color=Group),) + geom_point()+ ggtitle("2C Genome Size (pg)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")#ggtitle("Genome Size")
p1
p1<-ggplot(phenoorder, aes(Altitude, X2c,color=Group),) + geom_point()+ ggtitle("2C Genome Size (pg)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")+ ylab("")#ggtitle("Genome Size")
p2<-ggplot(phenoorder, aes(Altitude, X180knobbp,color=Group),) + geom_point()+ ggtitle("180bp Knob (bp)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE)+xlab("Altitude (m)")+ ylab("")#+ ggtitle("Genome Size")
p3<-ggplot(phenoorder, aes(Altitude, TotallTebp,color=Group),) + geom_point()+ ggtitle("Total TE content (bp)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE)+xlab("Altitude (m)")+ ylab("")#+ ggtitle("Landrace Genome Size")
p4 <- ggplot(mexphen, aes(Altitude, X1c),) + geom_point()+ ylab("") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")#ggtitle("Genome Size")
p5 <- ggplot(mexphen, aes(Altitude, X180knobbp),) + geom_point()+ ylab("") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")#ggtitle("Genome Size")
p6 <- ggplot(mexphen, aes(Altitude, TotalTebp),) + geom_point()+ ylab("") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")#ggtitle("Genome Size")
grid.arrange(p1,p2,p3,p4,p5,p6,ncol=3)
library(ggplot2)
library(reshape2)
data <- read.csv("~/Documents/Projects/Huff_CentromereEvo/Github_centrepeat/abundance/Master_clean.csv")
library(ggplot2)
library(reshape2)
data <- read.csv("~/Documents/Projects/Huff_CentromereEvo/Github_centrepeat/abundance/Master_clean.csv")
data.m <- melt(data,id.vars="Taxa")
names(data.m)[2]<-paste("Rank")
ggplot(data.m, aes(Taxa, value)) +
geom_bar(aes(fill = Rank), position = "dodge", stat="identity") + labs(y="Percent Genomic Composition")
data2 <- read.csv("~/Documents/Projects/Huff_CentromereEvo/Github_centrepeat/abundance/Master_totals.csv")
ggplot(data2, aes(Taxa, Total))+ geom_bar(aes(fill = Taxa),stat="identity") +labs(x="",y="Tandem Repeat Content")+theme(axis.ticks = element_blank(), axis.text.x = element_blank())+theme_bw()
data2 <- read.csv("~/Documents/Projects/Huff_CentromereEvo/Github_centrepeat/abundance/Master_totals2.csv")
data2 <- read.csv("~/Documents/Projects/Huff_CentromereEvo/Github_centrepeat/abundance/Master_totals2.csv")
data2$Taxa <- factor(data2$Taxa, levels=data2$Taxa)
ggplot(data2, aes(Taxa, Total))+ geom_bar(stat="identity") +labs(x="",y="Tandem Repeat Content")
+theme(axis.ticks = element_blank(), axis.text.x = element_blank())
ggplot(data2, aes(Taxa, Total))+ geom_bar(stat="identity") +labs(x="",y="Tandem Repeat Content")
ggplot(data.m, aes(Taxa, value)) +
geom_bar(aes(fill = Rank), position = "dodge", stat="identity") + labs(y="Percent Genomic Composition")
ggplot(data.m, aes(Taxa, value)) + geom_bar(position = "dodge", stat="identity") + labs(y="Percent Genomic Composition")
ggplot(data.m, aes(Taxa, value)) +
geom_bar(aes(fill = Rank), position = "dodge", stat="identity") + labs(y="Percent Genomic Composition")
ggplot(data.m, aes(Taxa, value)) + geom_bar(position = "dodge", stat="identity") + labs(y="Percent Genomic Composition")+element_text(angle = 90, hjust = 1)
ggplot(data.m, aes(Taxa, value)) + geom_bar(position = "dodge", stat="identity") + labs(y="Percent Genomic Composition")+theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(data.m, aes(Taxa, value)) + geom_bar(aes(fill = Rank), position = "dodge", stat="identity") + labs(y="Percent Genomic Composition")+theme(axis.text.x = element_text(angle = 90, hjust = 1))
data2 <- read.csv("~/Documents/Projects/Huff_CentromereEvo/Github_centrepeat/abundance/Master_totals.csv")
ggplot(data2, aes(Taxa, Total))+ geom_bar(aes(fill = Taxa),stat="identity") +labs(x="",y="Tandem Repeat Content")+theme(axis.ticks = element_blank(), axis.text.x = element_blank())+theme_bw()
data2 <- read.csv("~/Documents/Projects/Huff_CentromereEvo/Github_centrepeat/abundance/Master_totals2.csv")
data2$Taxa <- factor(data2$Taxa, levels=data2$Taxa)
ggplot(data2, aes(Taxa, Total))+ geom_bar(stat="identity") +labs(x="",y="Tandem Repeat Content")
+theme(axis.ticks = element_blank(), axis.text.x = element_blank())
ggplot(data2, aes(Taxa, Total))+ geom_bar(stat="identity") +labs(x="",y="Tandem Repeat Content")+theme(axis.ticks = element_blank(), axis.text.x = element_blank())
ggplot(data2, aes(Taxa, Total))+ geom_bar(stat="identity") +labs(x="",y="Tandem Repeat Content")+theme(axis.text.x = element_text(angle = 90, hjust = 1))
data <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Teosinte_explore_andFISHcor/FISHcorrelation")
library(ggplot2)
library(cowplot)
ggplot(data, aes(knob180, X180knobmb)) + ylab("Measured Knob Content") + xlab("Observed Knob Count") + geom_point() + geom_smooth(method="lm", se = TRUE, lty=2)
View(data)
ggplot(data, aes(knob180, X180knobmb)) + ylab("Measured Knob Content (mb)") + xlab("Observed Knob Count") + geom_point() + geom_smooth(method="lm", se = TRUE, lty=2)
lrdta <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_data.csv")
lrdta$X <- NULL
data <- subset(lrdta, lrdta$Region!="SWUS")
geno <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/Landrace_noSWUS_matrix.csv",header=TRUE,row.names=1)
A <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Final_Phenotypes/Landrace_kinshipmatrix.csv",row.names="X")
le1 <- as.data.frame(colnames(geno))
names(le1)[1] <- "names"
le2 <- as.data.frame(data$Row.names)
#again, this is where i realize i had to rename 626.2 to 626.1
phenoorder <- merge(le1, data, by.x="names", by.y="Row.names",sort=FALSE)
mexphen1 <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Master_mexnucleo_pruned2.csv") #phenotype data in matching order
mexphen <- subset(mexphen1, mexphen1$Altitude>2000)
p3<-ggplot(phenoorder, aes(Altitude, CentCbp,color=Group),) + geom_point()+ ylab("Total TE content (bp)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE)+xlab("Altitude (m)")#+ ggtitle("Landrace Genome Size")
p3
p3<-ggplot(phenoorder, aes(Altitude, CentCbp,color=Group),) + geom_point()+ ylab("CentC (bp)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE)+xlab("Altitude (m)")#+ ggtitle("Landrace Genome Size")
pcm <- ggplot(mexphen, aes(Altitude, CentCbp),) + geom_point()+ ylab("CentC (bp)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")#ggtitle("Genome Size")
pmc
pcm
library(gridExtra)
grid.arrange(pcl,pcm,ncol=2)
pcl<-ggplot(phenoorder, aes(Altitude, CentCbp,color=Group),) + geom_point()+ ylab("CentC (bp)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE)+xlab("Altitude (m)")#+ ggtitle("Landrace Genome Size")
grid.arrange(pcl,pcm,ncol=2)
pcl<-ggplot(phenoorder, aes(Altitude, CentCbp,color=Group),) + geom_point()+ ylab("CentC (bp)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE)+xlab("Altitude (m)")ggtitle("Landrace CentC content")#+ ggtitle("Landrace Genome Size")
pcm <- ggplot(mexphen, aes(Altitude, CentCbp),) + geom_point()+ ylab("CentC (bp)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")ggtitle("Mexicana CentC content")#ggtitle("Genome Size")
grid.arrange(pcl,pcm,ncol=2)
pcl<-ggplot(phenoorder, aes(Altitude, CentCbp,color=Group),) + geom_point()+ ylab("CentC (bp)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE)+xlab("Altitude (m)")+ggtitle("Landrace CentC content")#+ ggtitle("Landrace Genome Size")
pcm <- ggplot(mexphen, aes(Altitude, CentCbp),) + geom_point()+ ylab("CentC (bp)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")+ggtitle("Mexicana CentC content")#ggtitle("Genome Size")
grid.arrange(pcl,pcm,ncol=2)
mexphen1 <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Mexicana/Master_mexnucleo_pruned2.csv") #phenotype data in matching order
ggplot(mexphen1, aes(Altitude, X1c),) + geom_point()+ ylab("2C Genome Size (pg)") +geom_smooth(aes(group=Species),method="lm",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")
ggplot(mexphen1, aes(Altitude, X1c),) + geom_point()+ ylab("2C Genome Size (pg)") +geom_smooth(aes(group=Species),method="leoss",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")
ggplot(mexphen1, aes(Altitude, X1c),) + geom_point()+ ylab("2C Genome Size (pg)") +geom_smooth(aes(group=Species),method="gam",color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")
ggplot(mexphen1, aes(Altitude, X1c),) + geom_point()+ ylab("2C Genome Size (pg)") +geom_smooth(aes(group=Species),color="black",linetype="dashed")+guides(color=FALSE) +xlab("Altitude (m)")
ggplot(mexphen1, aes(Altitude, X1c),) + geom_point()+ ylab("2C Genome Size (pg)") +guides(color=FALSE) +xlab("Altitude (m)")
ggplot(mexphen1, aes(Altitude, X1c),) + geom_box()+ ylab("2C Genome Size (pg)") +guides(color=FALSE) +xlab("Altitude (m)")
ggplot(mexphen1, aes(Altitude, X1c),) + geom_boxplot()+ ylab("2C Genome Size (pg)") +guides(color=FALSE) +xlab("Altitude (m)")
ggplot(mexphen1, aes(Altitude, X1c),) + geom_point()+ ylab("2C Genome Size (pg)") +guides(color=FALSE) +xlab("Altitude (m)")
crap2 <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Teosinte_explore/Teosinte_perindividual.csv")
crap2 <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Teosinte_explore/Teosinte_perindividual.csv")
crap2 <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Teosinte_explore_andFISHcor/Teosinte_perindividual.csv")
crap2 <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Teosinte_explore_andFISHcor/Teosinte_perindividual.csv")
crap <- subset(crap2, crap2$altitude!= "NA")
library(ggplot2)
library(dplyr)
filter(crap,species=="mexicana") %>% ggplot(aes(y=genomesize,x=altitude))+geom_point()+geom_smooth(method="lm")
library(lme4)
library(lmerTest)
summary(lmer(data=crap,genomesize~altitude+(1|Pop)+species))
ggplot(crap, aes(altitude, genomesize, shape = factor(species),fill=species),) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA) + geom_point(size=3)
ggplot(crap, aes(altitude, genomesize, shape = factor(species),fill=species),) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA) + geom_jitter(size=3)
ggplot(crap, aes(altitude, genomesize, fill=species),) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA) + geom_jitter(size=3)
ggplot(crap, aes(altitude, genomesize, fill=species),) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)
ggplot(crap, aes(species, genomesize),) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)+
ggplot(crap, aes(species, genomesize),) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)
ggplot(crap, aes(species, genomesize),fill=species) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)
ggplot(crap, aes(region, genomesize),fill=species) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)
View(crap)
ggplot(crap, aes(region, genomesize),fill=species) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)+ geom_jitter(size=3)
ggplot(crap, aes(species, genomesize),fill=species) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)+ geom_jitter(size=3)
ggplot(crap, aes(altitude, genomesize, shape=factor(species))) + ylab("1C Genome Size") + geom_point(size=3)
ggplot(crap, aes(species, genomesize),fill=species) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)+ geom_jitter(size=3)
ggplot(crap, aes(species, genomesize),fill=species) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)+ geom_jitter(size=1)
ggplot(crap, aes(species, genomesize),fill=species) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)+ geom_point(position = position_jitter(width = 0.2))
ggplot(crap, aes(species, genomesize),fill=altitude) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)+ geom_point(position = position_jitter(width = 0.2))
ggplot(crap, aes(group, genomesize),fill=species) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)+ geom_point(position = position_jitter(width = 0.2))
crap2 <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Teosinte_explore_andFISHcor/Teosinte_perindividual.csv")
crap <- subset(crap2, crap2$altitude!= "NA")
ggplot(crap, aes(altitude, genomesize, shape = factor(species),fill=species),) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA) + geom_jitter(size=3)
ggplot(crap, aes(group, genomesize),fill=species) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)+ geom_point(position = position_jitter(width = 0.2))
ggplot(crap, aes(species, genomesize),fill=group) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)+ geom_point(position = position_jitter(width = 0.2))
View(crap)
crap2 <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/Teosinte_explore_andFISHcor/Teosinte_perindividual.csv")
crap <- subset(crap2, crap2$altitude!= "NA")
ggplot(crap, aes(species, genomesize),fill=group) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)+ geom_point(position = position_jitter(width = 0.2))
ggplot(crap, aes(group, genomesize),fill=species) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)+ geom_point(position = position_jitter(width = 0.2))
ggplot(crap, aes(group, genomesize),color=species) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)+ geom_point(position = position_jitter(width = 0.2))
ggplot(crap, aes(group, genomesize)) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)+ geom_point(position = position_jitter(width = 0.2))
ggplot(crap, aes(group, genomesize)) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)+ geom_point(position = position_jitter(width = 0.2))+scale_fill_manual(values=c("#999999", "#E69F00"))
ggplot(crap, aes(group, genomesize)) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)+ geom_point(position = position_jitter(width = 0.2))scale_fill_manual(breaks = c("2", "1"), values=c("red", "blue"))
ggplot(crap, aes(group, genomesize)) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)+ geom_point(position = position_jitter(width = 0.2))+scale_fill_manual(breaks = c("2", "1"), values=c("red", "blue"))
ggplot(crap, aes(group, genomesize)) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)+ geom_point(position = position_jitter(width = 0.2))+ scale_fill_brewer(palette="Dark2")
ggplot(crap, aes(group, genomesize)) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)+ geom_point(position = position_jitter(width = 0.2))+scale_fill_manual(breaks = c("a", "b"), values=c("red", "blue")
ggplot(crap, aes(group, genomesize)) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)+ geom_point(position = position_jitter(width = 0.2))+scale_fill_manual(breaks = c("a", "b"), values=c("red", "blue"))
ggplot(crap, aes(species, genomesize)) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)+ geom_point(position = position_jitter(width = 0.2))+scale_fill_manual(breaks = c("a", "b"), values=c("red", "blue"))
ggplot(crap, aes(species, genomesize),fill=species) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)+ geom_point(position = position_jitter(width = 0.2))
ggplot(crap, aes(group, genomesize),fill=species) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)+ geom_point(position = position_jitter(width = 0.2))
ggplot(crap, aes(group, genomesize),fill=genomesize) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)+ geom_point(position = position_jitter(width = 0.2))
ggplot(mtcars, aes(factor(cyl), mpg, fill = factor(vs))) +
geom_boxplot() +
scale_fill_manual(name = "This is my title", values = c("pink", "green")
, labels = c("0" = "Foo", "1" = "Bar"))
ggplot(crap, aes(group, genomesize),fill=factor(species)) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)+ geom_point(position = position_jitter(width = 0.2))
ggplot(crap, aes(factor(group), genomesize),fill=factor(species)) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)+ geom_point(position = position_jitter(width = 0.2))
ggplot(crap, aes(group, genomesize)) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)+ geom_point(position = position_jitter(width = 0.2))
ggplot(crap, aes(species, genomesize)) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)+ geom_point(position = position_jitter(width = 0.2))
ggplot(crap, aes(species, genomesize)) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)+ geom_point(position = position_jitter(width = 0.2))+ scale_x_discrete(limits=c("parviglumis","mexicana"))
ggplot(crap, aes(species, genomesize)) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)+ geom_point(position = position_jitter(width = 0.2))+ scale_x_discrete(limits=c("parviglumis","mexicana"))+scale_color_brewer(palette="Dark2")
ggplot(crap, aes(species, genomesize)) + ylab("2C Genome Size (pg)") + xlab("Altitude (m)") + geom_boxplot(outlier.shape = NA)+ geom_point(position = position_jitter(width = 0.2))+ scale_x_discrete(limits=c("parviglumis","mexicana"))
ggplot(crap, aes(species, genomesize)) + ylab("2C Genome Size (pg)") + geom_boxplot(outlier.shape = NA)+ geom_point(position = position_jitter(width = 0.2))+ scale_x_discrete(limits=c("parviglumis","mexicana"))
ggplot(crap, aes(species, genomesize)) + ylab("2C Genome Size (pg)") + xlab("")+geom_boxplot(outlier.shape = NA)+ geom_point(position = position_jitter(width = 0.2))+ scale_x_discrete(limits=c("parviglumis","mexicana"))
data <- read.csv("~/Desktop/temp/NaCl_Screen.csv")
library(ggplot2)
data$Length <- log(data$Length)
tmp1 <- subset(data, data$Genotype %in% c("WT","GD4003"))
tmp2 <-subset(tmp1, tmp1$Treatment %in% c("a","b"))
anova(lm(Length~Treatment*Genotype,tmp2))
data <- read.csv("~/Desktop/NaCl_Screen.csv")
data$Length <- log(data$Length)
tmp1 <- subset(data, data$Genotype %in% c("WT","GD4003"))
tmp2 <-subset(tmp1, tmp1$Treatment %in% c("a","b"))
anova(lm(Length~Treatment*Genotype,tmp2))
data <- read.csv("~/Desktop/NaCl_Screen.csv")
ggplot(data, aes(Treatment, Length, fill=Genotype)) + geom_boxplot() +xlab("Log Length (mm)")
library(reshape2)
library(ggplot2)
boops <- read.csv("~/Desktop/temp/meltednatty.csv") #longform data set, if ever given tons more data not in this format (repeated measures for one variable like salt concentration) the function melt() in R will do it for you!
boops <- read.csv("~/Desktop/temp/natasha_files/meltednatty.csv") #longform data set, if ever given tons more data not in this format (repeated measures for one variable like salt concentration) the function melt() in R will do it for you!
boop2 <- na.omit(boops)
seboop <- summarySE(boop2, measurevar = "length", groupvars = c("treat","Genotype"))
library(reshape2)
library(ggplot2)
boops <- read.csv("~/Desktop/temp/natasha_files/meltednatty.csv") #longform data set, if ever given tons more data not in this format (repeated measures for one variable like salt concentration) the function melt() in R will do it for you!
boop2 <- na.omit(boops)
seboop <- summarySE(boop2, measurevar = "length", groupvars = c("treat","Genotype"))
library(dplyr)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
## Norms the data within specified groups in a data frame; it normalizes each
## subject (identified by idvar) so that they have the same mean, within each group
## specified by betweenvars.
##   data: a data frame.
##   idvar: the name of a column that identifies each subject (or matched subjects)
##   measurevar: the name of a column that contains the variable to be summariezed
##   betweenvars: a vector containing names of columns that are between-subjects variables
##   na.rm: a boolean that indicates whether to ignore NA's
normDataWithin <- function(data=NULL, idvar, measurevar, betweenvars=NULL,
na.rm=FALSE, .drop=TRUE) {
library(plyr)
# Measure var on left, idvar + between vars on right of formula.
data.subjMean <- ddply(data, c(idvar, betweenvars), .drop=.drop,
.fun = function(xx, col, na.rm) {
c(subjMean = mean(xx[,col], na.rm=na.rm))
},
measurevar,
na.rm
)
# Put the subject means with original data
data <- merge(data, data.subjMean)
# Get the normalized data in a new column
measureNormedVar <- paste(measurevar, "_norm", sep="")
data[,measureNormedVar] <- data[,measurevar] - data[,"subjMean"] +
mean(data[,measurevar], na.rm=na.rm)
# Remove this subject mean column
data$subjMean <- NULL
return(data)
}
seboop <- summarySE(boop2, measurevar = "length", groupvars = c("treat","Genotype"))
library(plyr)
library(dplyr)
boops <- read.csv("~/Desktop/temp/natasha_files/meltednatty.csv") #longform data set, if ever given tons more data not in this format (repeated measures for one variable like salt concentration) the function melt() in R will do it for you!
boop2 <- na.omit(boops)
#calculate standard error and the like, to calculate this, you have to load in the function at the bottom of the file. just highlight, copy and paste into the terminal
seboop <- summarySE(boop2, measurevar = "length", groupvars = c("treat","Genotype"))
seboop <- summarySE(boop2, measurevar = "length", groupvars = c("treat","Genotype"))
seboop$treat <- factor(seboop$treat)
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of NaCl (mM)") + ylab("Root Length (mm)")+scale_fill_brewer(palette="BrBG")
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of NaCl (mM)") + ylab("Root Length (mm)")+scale_fill_brewer(palette="PiYG")
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of NaCl (mM)") + ylab("Root Length (mm)")+scale_fill_brewer(palette="Set1")
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of NaCl (mM)") + ylab("Root Length (mm)")+scale_fill_brewer(palette="Set2")
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of NaCl (mM)") + ylab("Root Length (mm)")+scale_fill_brewer(palette="Set3")
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of NaCl (mM)") + ylab("Root Length (mm)")+scale_fill_brewer(palette="Set4")
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of NaCl (mM)") + ylab("Root Length (mm)")+scale_fill_brewer(palette="Set1")
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of NaCl (mM)") + ylab("Root Length (mm)")+scale_fill_brewer(palette="Spectral")
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of NaCl (mM)") + ylab("Root Length (mm)")
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of NaCl (mM)") + ylab("Root Length (mm)")+scale_fill_brewer(palette="Spectral")
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of NaCl (mM)") + ylab("Root Length (mm)")+scale_fill_brewer(palette="Dark2")
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of NaCl (mM)") + ylab("Root Length (mm)")+scale_fill_brewer(palette="set1")
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of NaCl (mM)") + ylab("Root Length (mm)")+scale_fill_brewer(palette="Set1")
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of NaCl (mM)") + ylab("Root Length (mm)")+scale_fill_brewer(palette="Set1")
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of NaCl (mM)") + ylab("Root Length (mm)")+scale_fill_brewer(palette="")
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of NaCl (mM)") + ylab("Root Length (mm)")+scale_fill_brewer(palette="Set15")
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of NaCl (mM)") + ylab("Root Length (mm)")+scale_fill_brewer(palette="Set5")
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of NaCl (mM)") + ylab("Root Length (mm)")+scale_fill_brewer(palette="Set3")
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of NaCl (mM)") + ylab("Root Length (mm)")+scale_fill_brewer(palette="Set4")
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of NaCl (mM)") + ylab("Root Length (mm)")+scale_fill_brewer(palette="Set1")
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of NaCl (mM)") + ylab("Root Length (mm)")+scale_fill_brewer(palette="Set2")
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of NaCl (mM)") + ylab("Root Length (mm)")+scale_fill_brewer(palette="Dark2")
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of NaCl (mM)") + ylab("Root Length (mm)")+scale_fill_brewer(palette="Dark1")
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of NaCl (mM)") + ylab("Root Length (mm)")+scale_fill_brewer(palette="Dark3")
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of NaCl (mM)") + ylab("Root Length (mm)")+scale_fill_brewer(palette="Dark2")
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of NaCl (mM)") + ylab("Root Length (mm)")+scale_fill_brewer(palette="Set2")
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of NaCl (mM)") + ylab("Root Length (mm)")+scale_fill_brewer(palette="Set1")
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity",colour="black")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of NaCl (mM)") + ylab("Root Length (mm)")+scale_fill_brewer(palette="Set1")
Set1
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity",colour="black")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of NaCl (mM)") + ylab("Root Length (mm)")
data <- read.csv("~/Desktop/NaCl_Screen.csv")
View(data)
data<-read.csv("~/Downloads/Mannitol.csv")
boop2 <- na.omit(data)
View(boop2)
seboop <- summarySE(boop2, measurevar = "length", groupvars = c("Treatment","Genotype"))
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
## Norms the data within specified groups in a data frame; it normalizes each
## subject (identified by idvar) so that they have the same mean, within each group
## specified by betweenvars.
##   data: a data frame.
##   idvar: the name of a column that identifies each subject (or matched subjects)
##   measurevar: the name of a column that contains the variable to be summariezed
##   betweenvars: a vector containing names of columns that are between-subjects variables
##   na.rm: a boolean that indicates whether to ignore NA's
normDataWithin <- function(data=NULL, idvar, measurevar, betweenvars=NULL,
na.rm=FALSE, .drop=TRUE) {
library(plyr)
# Measure var on left, idvar + between vars on right of formula.
data.subjMean <- ddply(data, c(idvar, betweenvars), .drop=.drop,
.fun = function(xx, col, na.rm) {
c(subjMean = mean(xx[,col], na.rm=na.rm))
},
measurevar,
na.rm
)
# Put the subject means with original data
data <- merge(data, data.subjMean)
# Get the normalized data in a new column
measureNormedVar <- paste(measurevar, "_norm", sep="")
data[,measureNormedVar] <- data[,measurevar] - data[,"subjMean"] +
mean(data[,measurevar], na.rm=na.rm)
# Remove this subject mean column
data$subjMean <- NULL
return(data)
}
seboop <- summarySE(boop2, measurevar = "length", groupvars = c("Treatment","Genotype"))
warnings()
boop2 <- na.omit(data)
seboop <- summarySE(boop2, measurevar = "length", groupvars = c("Treatment","Genotype"))
View(boop2)
boops <- read.csv("~/Desktop/temp/natasha_files/meltednatty.csv") #longform data set, if ever given tons more data not in this format (repeated measures for one variable like salt concentration) the function melt() in R will do it for you!
boop2 <- na.omit(boops)
seboop <- summarySE(boop2, measurevar = "length", groupvars = c("treat","Genotype"))
data<-read.csv("~/Downloads/Mannitol.csv")
boop2 <- na.omit(data)
seboop <- summarySE(boop2, measurevar = "length", groupvars = c("Treatment","Genotype"))
warnings()
data<-read.csv("~/Downloads/Mannitol.csv")
boop2 <- na.omit(data)
seboop <- summarySE(boop2, measurevar = "length", groupvars = c("Treatment","Genotype"))
seboop$treat <- factor(seboop$treat)
data<-read.csv("~/Downloads/mannitols.csv")
boop2 <- na.omit(data)
seboop <- summarySE(boop2, measurevar = "length", groupvars = c("Treatment","Genotype"))
seboop$treat <- factor(seboop$treat)
data<-read.csv("~/Downloads/mannitols.csv")
boop2 <- na.omit(data)
seboop <- summarySE(boop2, measurevar = "length", groupvars = c("Treatment","Genotype"))
warnings()
class(boop2$Length)
class(boop2$Treatment)
boops <- read.csv("~/Desktop/temp/natasha_files/meltednatty.csv") #longform data set, if ever given tons more data not in this format (repeated measures for one variable like salt concentration) the function melt() in R will do it for you!
boop2 <- na.omit(boops)
class(boop2$treat)
class(boop2$Genotype)
class(boop2$length)
data<-read.csv("~/Downloads/mannitols.csv")
boop2 <- na.omit(data)
class(boop2$Treatment)
class(boop2$Genotype)
class(boop2$Length)
View(boop2)
boops <- read.csv("~/Desktop/temp/natasha_files/meltednatty.csv") #longform data set, if ever given tons more data not in this format (repeated measures for one variable like salt concentration) the function melt() in R will do it for you!
boop2 <- na.omit(boops)
seboop <- summarySE(boop2, measurevar = "length", groupvars = c("treat","Genotype"))
View(boop2)
data<-read.csv("~/Downloads/mannitols.csv")
boop2 <- na.omit(data)
seboop <- summarySE(boop2, measurevar = "length", groupvars = c("Treatment","Genotype"))
warnings()
seboop <- summarySE(boop2, measurevar = "Length", groupvars = c("Treatment","Genotype"))
data<-read.csv("~/Downloads/mannitols.csv")
boop2 <- na.omit(data)
seboop <- summarySE(boop2, measurevar = "length", groupvars = c("treat","Genotype"))
seboop$treat <- factor(seboop$Treatment)
seboop <- summarySE(boop2, measurevar = "length", groupvars = c("treat","Genotype"))
seboop$treat <- factor(seboop$Treatment)
seboop$treat <- factor(seboop$treat)
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity",colour="black")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of NaCl (mM)") + ylab("Root Length (mm)")
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity",colour="black")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of Manitol (mM)") + ylab("Root Length (mm)")
ggplot(na.omit(seboop), aes(x=treat,y=length,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity",colour="black")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of Mannitol (mM)") + ylab("Root Length (mm)")
last <-read.csv("~/Downloads/Survival.csv")
View(last)
ggplot(last, aes(x=treat,y=percent,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity",colour="black")+geom_errorbar(aes(ymin=length-se, ymax=length+se), width=.2,position=position_dodge(.9))+xlab("Concentration of Mannitol (mM)") + ylab("Root Length (mm)")
ggplot(last, aes(x=treat,y=percent,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity",colour="black")+xlab("Concentration of Mannitol (mM)") + ylab("Root Length (mm)")
last <-read.csv("~/Downloads/Survival.csv")
ggplot(last, aes(x=treat,y=percent,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity",colour="black")+xlab("Concentration of Mannitol (mM)") + ylab("Root Length (mm)")
ggplot(last, aes(x=treat,y=percent,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity",colour="black")+xlab("Survivalship") + ylab("Root Length (mm)")
ggplot(last, aes(x=treat,y=percent,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity",colour="black")+xlab("Survivorship") + ylab("Root Length (mm)")
library(reshape2)
library(ggplot2)
library(plyr)
library(dplyr)
last <-read.csv("~/Downloads/Survival.csv")
ggplot(last, aes(x=treat,y=percent,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity",colour="black")+xlab("Survivorship") + ylab("Root Length (mm)")
last <-read.csv("~/Downloads/Survival.csv")
ggplot(last, aes(x=treat,y=percent,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity",colour="black")+xlab("Survivorship") + ylab("Root Length (mm)")
library(reshape2)
library(ggplot2)
library(plyr)
library(dplyr)
library(cowplot)
last <-read.csv("~/Downloads/Survival.csv")
ggplot(last, aes(x=treat,y=percent,fill=Genotype))+geom_bar(position=position_dodge(),stat="identity",colour="black")+xlab("Survivorship") + ylab("Root Length (mm)")
setwd("Desktop/Structure_parv_newmex/")
chiploc <- read.table("chiplocations.txt")
View(chiploc)
chiploc <- read.table("chipmutloc.txt")
View(chiploc)
chiploc <- read.csv("chipmutloc.txt")
View(chiploc)
tasloc <- read.table("tassel55_mutated.txt")
tasloc <- read.csv("tassel55_mutated.txt")
tasloc <- read.csv("tassel_locations.txt")
View(tasloc)
colnames(chiploc[2]) <- "chrom_pos"
overlap <- merge(chiploc, tasloc, by="chrom_pos")
View(chiploc)
colnames(chiploc[2]) <- "chrom_pos"
overlap <- merge(chiploc, tasloc, by="chrom_pos")
View(chiploc)
colnames(chiploc)[2] <- "chrom_pos"
View(chiploc)
overlap <- merge(chiploc, tasloc, by="chrom_pos")
View(overlap)
View(chiploc)
View(tasloc)
View(chiploc)
tail(overlap)
View(overlap)
write.csv("55kchip_GBS_overlap.csv")
write.csv(overlap,"55kchip_GBS_overlap.csv")
write.table(overlap,"55kchip_GBS_overlap2.txt")
write.csv(overlap,"55kchip_GBS_overlap2.csv")
View(tasloc)
tail(tasloc)
gbs<-read.table("Master_mexgbs.txt")
gbs<-read.csv("Master_mexgbs2.csv")
mgbs<-read.csv("Master_mexgbs2.csv")
pchip<-read.table("Master_parv55k.txt")
remove(gbs)
View(pchip)
View(mgbs)
pchip<-read.table("Master_parv55k.txt",header=TRUE)
View(pchip)
overlap<-read.csv("Master_55k-gbs-Overlap_5kapart.csv")
View(overlap)
View(mgbs)
View(overlap)
tmp1<-merge(overlap,mgbs,by="chrom_pos")
tmp1<-merge(mgbs,overlap,by="chrom_pos")
View(tmp1)
View(pchip)
tmp2<-merge(tmp1,pchip,by.x="Originalname",by.y="id")
View(tmp2)
write.csv(tmp2,"Master_Mexparv_overlap.csv")
