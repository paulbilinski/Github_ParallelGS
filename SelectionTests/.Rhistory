#acceptance rate
accepted.moves/ngen #little high, moving slowly, can just move uniformProposal to be bigger
plot(theta.samples,ylim=c(0,1),type='l')
#install.packages('coda')
library(coda)
geweke.diag(theta.samples)
effectiveSize(theta.samples)
curve(dbeta(x=x,5,5),from=0,to=1,n=1001,add=TRUE)
hist(theta.samples,xlim=c(0,1),freq=FALSE)
curve(dbeta(x=x,5,5),from=0,to=1,n=1001,add=TRUE)
plot(theta.samples,ylim=c(0,1),type='l')
5E-5
5E-5 > 6E-5
5E-5 < 6E-5
fit <- aov()
?aov()
library ( mvtnorm )
source('~/.active-rstudio-document', echo=TRUE)
library ( mvtnorm )
EnvVarTest <- function ( phenos , kinship.mat , test.vector ) {
# 'phenos' is a vector containing the phenotype
# (i.e. number of repeats) for each individual; dimensions are N x 1
# 'kinship.mat' is the kinship matrix; dimensions are N x N;
# rows and columns need to be in the same order as the phenotypes in the vector
# test.vector is the environmental factor of interest (in this case altitude)
eigs <- eigen ( kinship.mat )
# get eigendecomposition of kinship matrix
rt.inv <- eigs$vec %*% diag ( sqrt(eigs$val) )
# calculate inverse of the square root matrix
rotated.phenos <- t ( rt.inv ) %*% phenos
# rotate phenotypes from population space into principal component space
test.vector <- test.vector / (sqrt ( 2 * sum ( test.vector^2 ) ) )
# scale to be unit length after rotation
#recover()
rotated.vector <- rt.inv %*% test.vector
# rotate environmental variable from population space into principal component space
model <- lm ( rotated.phenos ~ 1+rotated.vector)
# fit regression model
r.sq <- cor.test ( rotated.phenos , rotated.vector )$estimate^2
# get r^2
ANOVA <- anova ( model )
# get p value
print(ANOVA)
return ( c ( model$coef[2] , r.sq , ANOVA[5][[1]][1] )) # return
}
phenoteo <-read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Teosinte_averages.csv",header=TRUE)
View(phenoteo)
genoteo <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/TeosinteAll_Bayenv.csv",header=FALSE)
EnvVarTest(phenoteo$X180knobMB,genoteo,phenoteo$Altitude)
genoteo <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/TeosinteAll_Bayenv.csv",header=FALSE)
EnvVarTest(phenoteo$X180knobMB,genoteo,phenoteo$Altitude)
EnvVarTest(phenoteo$X180knob.,genoteo,phenoteo$Altitude)
EnvVarTest(phenoteo$X180knobMB,genoteo,phenoteo$Altitude)
EnvVarTest(phenoteo$X180knob.,genoteo,phenoteo$Altitude)
EnvVarTest(phenoteo$TR1MB,genoteo,phenoteo$Altitude)
EnvVarTest(phenoteo$TR1.,genoteo,phenoteo$Altitude)
EnvVarTest(phenoteo$CentCMB,genoteo,phenoteo$Altitude)
EnvVarTest(phenoteo$CentC.,genoteo,phenoteo$Altitude)
```
phenoparv <-read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Teosinte_parv_avg.csv",header=TRUE)
genoparv <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/TeosinteParv_Bayenv.csv",header=FALSE)
EnvVarTest(phenoparv$X180knobMB,genoparv,phenoparv$Altitude)
EnvVarTest(phenoparv$X180knob.,genoparv,phenoparv$Altitude)
EnvVarTest(phenoparv$TR1MB,genoparv,phenoparv$Altitude)
EnvVarTest(phenoparv$TR1.,genoparv,phenoparv$Altitude)
EnvVarTest(phenoparv$CentCMB,genoparv,phenoparv$Altitude)
EnvVarTest(phenoparv$CentC.,genoparv,phenoparv$Altitude)
View(genoteo)
phenomex <-read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Teosinte_mex_avg.csv",header=TRUE)
genomex <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/TeosinteMex_Bayenv.csv",header=FALSE)
EnvVarTest(phenomex$X180knobMB,genomex,phenomex$Altitude)
EnvVarTest(phenomex$X180knob.,genomex,phenomex$Altitude)
EnvVarTest(phenomex$TR1MB,genomex,phenomex$Altitude)
EnvVarTest(phenomex$TR1.,genomex,phenomex$Altitude)
EnvVarTest(phenomex$CentCMB,genomex,phenomex$Altitude)
EnvVarTest(phenomex$CentC.,genomex,phenomex$Altitude)
<<<<<<< HEAD
filenames=list.files(path="~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/MergeFTE/Abund/", full.names=TRUE)
datalist = lapply(filenames, function(x){read.csv(file=x,header=TRUE)})
FTE_merged <- Reduce(function(x,y) {merge(x,y,all=TRUE,by="FTE")}, datalist)
sumem <- read.csv("289_FTE_sepID_merged.csv",header=TRUE)
sumem <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/MergeFTE/Abund/289_FTE_sepID_merged.csv",header=TRUE)
aggfte <- aggregate(RIMMA0382.1.fastq.abund+RIMMA0383.1.fastq.abund~FTE_group, sumem, sum)
View(aggfte)
agg <- aggregate(FTE_group~RIMMA0382.1.fastq.abund, sumem, sum)
install.packages(plyr)
install.packages("plyr")
library(plyr)
sumem <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/MergeFTE/Abund/289_FTE_sepID_merged.csv",header=TRUE)
View(sumem)
dfx <- data.frame(
group = c(rep('A', 8), rep('B', 15), rep('C', 6)),
sex = sample(c("M", "F"), size = 29, replace = TRUE),
age = runif(n = 29, min = 18, max = 54)
)
dfx <- data.frame(
group = c(rep('A', 8), rep('B', 15), rep('C', 6)),
sex = sample(c("M", "F"), size = 29, replace = TRUE),
age = runif(n = 29, min = 18, max = 54)
)
View(dfx)
ddply(dfx, .(group, sex), summarize,
mean = round(mean(age), 2),
sd = round(sd(age), 2))
ddply(dfx, .(group), summarize,
mean = round(mean(age), 2),
sd = round(sd(age), 2))
```
dfx <- data.frame(
group = c(rep('A', 8), rep('B', 15), rep('C', 6)),
sex = sample(c("M", "F"), size = 29, replace = TRUE),
age = runif(n = 29, min = 18, max = 54)
diet = runif(n = 29, min = 40, max = 90)
)
dfx <- data.frame(
group = c(rep('A', 8), rep('B', 15), rep('C', 6)),
sex = sample(c("M", "F"), size = 29, replace = TRUE),
age = runif(n = 29, min = 18, max = 54),
diet = runif(n = 29, min = 40, max = 90)
)
View(dfx)
ddply(dfx, .(group), summarize,
mean = round(mean(age), 2),
sd = round(sd(age), 2))
baseball
tmp<- baseball
View(tmp)
ddply(dfx, .(group), summarize,
mean = round(mean(age), 2),
sd = round(sd(age), 2))
View(dfx)
ddply(baseball[1:100,], ~ year, nrow)
ddply(baseball, .(lg), c("nrow", "ncol"))
tmp <- ddply(sumem, .(FTE_group), numcolwise(sum))
sumem <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/MergeFTE/Abund/289_FTE_sepID_merged.csv",header=TRUE)
tmp <- ddply(sumem, .(FTE_group), numcolwise(sum))
View(tmp)
tmp <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/MergeFTE/Abund/toydata.csv", header=TRUE)
agg <- ddply(tmp, .(FTE_group), numcolwise(sum))
View(agg)
View(agg)
View(agg)
sumem <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/MergeFTE/Abund/289_FTE_sepID_merged.csv",header=TRUE)
sumem <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/MergeFTE/Abund/289_FTE_sepID_merged.csv",header=TRUE)
sumem <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/MergeFTE/Abund/289_FTE_sepID_merged.csv",header=TRUE)
agg <- ddply(sumem, .(FTE_group), numcolwise(sum))
write.csv(agg, "289_FTE_aggregated.csv"))
write.csv(agg, "289_FTE_aggregated.csv")
tmp1 <- read.csv("~/Downloads/hapmap3column1.txt",header=FALSE)
tmp2 <- read.csv("~/Downloads/cintalines.txt",header=FALSE)
tmp1 <- read.csv("~/Downloads/hapmap3column1.txt",header=FALSE)
crap <- merge(tmp1,tmp2,by="V1")
View(crap)
tmp1 <- read.csv("~/Downloads/hapmap3column1.txt",header=FALSE)
tmp2 <- read.csv("~/Downloads/cintalines.txt",header=FALSE)
crap <- merge(tmp1,tmp2,by="V1")
View(crap)
write.csv(crap,file="cintahm3overlap.txt")
=======
>>>>>>> 734b6aa2fbd6492078fbcbeff73f551250c1a4db
setwd("~/Documents/Projects/Genome_Size_Analysis")
library(ggplot2)
#install.packages(gridextra)
library(gridExtra)
dataall <- read.csv("Master_Data_noNA.csv")
dataal <- subset(dataall, dataall$X1C_GS!="NA")
data <- subset(dataal, dataal$X1C_GS<3.6)
dmays <- subset(data, data$Species=="mays")
<<<<<<< HEAD
dmex <- subset(data, data$Species=="mexicana")
dparv <- subset(data, data$Species=="parviglumis")
dteo <- rbind(dparv,dmex)
View(dmays)
dmayst <- subset(dmays, dmays$Region!="SWUS")
p1 <- ggplot(dmayst, aes(Region, X1C_GS, color=Species)) + geom_boxplot()+ ylab("1C GS")
p1
p1 <- ggplot(dmayst, aes(Region, X1C_GS, color=Region)) + geom_boxplot()+ ylab("1C GS")
p1
p1 <- ggplot(dmayst, aes(Region, X180KnobMB, color=Region)) + geom_boxplot()+ ylab("1C GS")
p1
p1 <- ggplot(dmayst, aes(Region, X180knobMB, color=Region)) + geom_boxplot()+ ylab("1C GS")
p1
p <- ggplot(dmayst, aes(Region, TotallTEMB, color=Region)) + geom_boxplot()+ ylab("1C GS")
p
p <- ggplot(dmayst, aes(Region, TotallTeMB, color=Region)) + geom_boxplot()+ ylab("1C GS")
p
p1 <- ggplot(dmayst, aes(Region, X180knobMB, color=Region)) + geom_boxplot()+ ylab("1C GS")
p <- ggplot(dmayst, aes(Region, TotallTeMB, color=Region)) + geom_boxplot()+ ylab("1C GS")
grid.arrange(p1,p, ncol=2)
p1 <- ggplot(dmayst, aes(Region, X180knobMB, color=Region)) + geom_boxplot()+ ylab("1C GS")+ theme(legend.position="none")
p <- ggplot(dmayst, aes(Region, TotallTeMB, color=Region)) + geom_boxplot()+ ylab("1C GS")+ theme(legend.position="none")
grid.arrange(p1,p, ncol=2)
p1 <- ggplot(dmayst, aes(Region, X180knobMB, color=Region)) + geom_boxplot()+ ylab("180 Knob MB")+ theme(legend.position="none")
p <- ggplot(dmayst, aes(Region, TotallTeMB, color=Region)) + geom_boxplot()+ ylab("Total TE MB")+ theme(legend.position="none")
grid.arrange(p1,p, ncol=2)
p1 <- ggplot(dmayst, aes(Region, CentcMB, color=Species)) + geom_boxplot()+ ylab("1C GS")
p1
View(dmayst)
p1 <- ggplot(dmayst, aes(Region, CentCMB, color=Species)) + geom_boxplot()+ ylab("1C GS")
p1
p1 <- ggplot(dmayst, aes(Region, CentCMB, color=Region)) + geom_boxplot()+ ylab("1C GS")
p1
p1 <- ggplot(dmayst, aes(Region, CentCMB, color=Region)) + geom_boxplot()+ ylab("CentC MB")
p1
=======
p1 <- ggplot(dmays, aes(Region, X1C_GS, color=Region)) + geom_boxplot()+ ylab("1C Genome Size")
p1
p2 <- ggplot(data, aes(Altitude, X180knobMB, color=Species)) + geom_point()+ ylab("MB 180Knob") + theme(legend.title=element_blank()) + geom_smooth(method=lm)
p2
p <- ggplot(data, aes(Altitude, TR1MB, color=Species)) + geom_point()+ ylab("MB TR1") + theme(legend.title=element_blank()) + geom_smooth(method=lm)
p
p <- ggplot(data, aes(Altitude, TotallTeMB, color=Species)) + geom_point()+ ylab("MB TE") + theme(legend.title=element_blank()) + geom_smooth(method=lm)
p
>>>>>>> 734b6aa2fbd6492078fbcbeff73f551250c1a4db
setwd("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SelectionTests/")
library("rrBLUP")
geno <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/Landrace_noSWUS_matrix.csv",header=TRUE,row.names=1)
dt <-t(geno)
A <- A.mat(dt)
write
#go back to teosinte data, convert to frequencies of allele * 2 so that we get the # of alleles in each individual
pheno <-read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Landraces_noSWUS_pheno.csv",header=TRUE)
#to make sure order is the same
tmp1 <- as.data.frame(colnames(geno))
names(tmp1)[1] <- "names"
tmp2 <- as.data.frame(pheno$FullID)
tmp <- setdiff(tmp1,tmp2)
phenoorder <- merge(tmp1,pheno, by.x="names", by.y="FullID",sort=FALSE)
library ( mvtnorm )
<<<<<<< HEAD
EnvVarTest <- function ( phenos , kinship.mat , test.vector, verbose=F ) {
=======
EnvVarTest <- function ( phenos , kinship.mat , test.vector ) {
>>>>>>> 734b6aa2fbd6492078fbcbeff73f551250c1a4db
# 'phenos' is a vector containing the phenotype (i.e. number of repeats) for each individual; dimensions are N x 1
# 'kinship.mat' is the kinship matrix; dimensions are N x N; rows and columns need to be in the same order as the phenotypes in the vector
# test.vector is the environmental factor of interest (in this case altitude)
#recover()
eigs <- eigen ( kinship.mat ) ## get eigendecomposition of kinship matrix
rt.inv <- eigs$vec %*% diag ( 1/sqrt(eigs$val) ) %*% t ( eigs$vec )# calculate inverse of the square root matrix
cent.test.vector <- test.vector - mean ( test.vector )
cent.phenos <- phenos - mean ( phenos )
rotated.phenos <- rt.inv %*% cent.phenos # rotate phenotypes from population space into principal component space
unit.test.vector <- cent.test.vector / (sqrt ( 2 * sum ( cent.test.vector^2 ) ) ) # scale to be unit length after rotation
#recover()
rotated.vector <- rt.inv %*% cent.test.vector # rotate environmental variable from population space into principal component space
model <- lm ( rotated.phenos ~ rotated.vector) # fit regression model
r.sq <- cor.test ( rotated.phenos , rotated.vector )$estimate^2 # get r^2
ANOVA <- anova ( model ) # get p value
# expected fraction of variance associated with environmental variable under neutrality
F.env <- ( t ( unit.test.vector ) %*% kinship.mat %*% unit.test.vector ) / sum ( diag ( kinship.mat ) )
sums.sq <- cumsum ( ANOVA[2] )
# fraction of variance associated with environmental variable for trait
Q.env <- sums.sq[1,]/ ( sums.sq[2,] )
<<<<<<< HEAD
if(verbose==T){print(ANOVA)}
return ( c ( model$coef[2] , r.sq , ANOVA[5][[1]][1] , ANOVA[3][2,] , F.env , Q.env) ) # return regression coefficient, r-squared, p value, estimate of Va, F statistic, Q statistic
}
library(MASS)
=======
return ( c ( model$coef[2] , r.sq , ANOVA[5][[1]][1] , ANOVA[3][2,] , F.env , Q.env ) ) # return regression coefficient, r-squared, p value, estimate of Va, F statistic, Q statistic
}
EnvVarTest(phenoorder$X180knobMB,A,phenoorder$Altitude)
EnvVarTest(phenoorder$X180knob.,A,phenoorder$Altitude)
EnvVarTest(phenoorder$TotallTeMB,A,phenoorder$Altitude)
EnvVarTest(phenoorder$TotallTe.,A,phenoorder$Altitude)
EnvVarTest(phenoorder$TR1MB,A,phenoorder$Altitude)
EnvVarTest(phenoorder$TR1.,A,phenoorder$Altitude)
EnvVarTest(phenoorder$CentCMB,A,phenoorder$Altitude)
EnvVarTest(phenoorder$CentC.,A,phenoorder$Altitude)
EnvVarTest(phenoorder$CRMallMB,A,phenoorder$Altitude)
EnvVarTest(phenoorder$CRMall.,A,phenoorder$Altitude)
plot(phenoorder$CRMall. ~ phenoorder$Altitude)
load
my.betas <- c ( seq ( 0 , 1 , by = 0.1 ), seq ( 1.2 , 2, 0.2 ) )
env <-rnorm ( n = 83 , 0 , sd = 1 ) # different individuals
tmp <- list ()
power <- numeric ( length ( my.betas ) )
for ( i in 1 : length ( my.betas ) ) {
beta <- my.betas [ i ]
mu <- rep ( 0 , 152 )
my.mean <- mu + beta * env
test.data <- rmvnorm ( n = 1000 , mean = my.mean , sigma = this.cov.mat )
tmp [[ i ]] <- matrix ( NA , nrow = 1000 , ncol = 6 )
for ( j in 1 : 1000 ) {
tmp [[ i ]] [ j , ] <- EnvVarTest ( test.data[ j , ] , this.cov.mat , env )
}
#hist ( tmp [[ i ]] [ , 3 ] , breaks = 50 )
power [ i ] <- sum ( tmp [[ i ]] [ , 3  ] < 0.05 ) / 1000
}
Q.stat <- do.call ( cbind , lapply ( tmp , function ( x ) x [ , 6 ] ) )
par ( mfrow = c ( 2, 1 ) )
plot ( my.betas , power , xlab = expression ( beta ) , ylab = "Power"  , type = "l" , lwd = 2 )
boxplot ( t ( Q.stat ) ~ my.betas , pch = 20 , xlab = expression ( beta ), ylab = expression ( Q[ENV]) )
abline ( h = tmp [[ 1 ]] [ 1, 5 ] )
Q.stat <- do.call ( cbind , lapply ( tmp , function ( x ) x [ , 6 ] ) )
par ( mfrow = c ( 2, 1 ) )
plot ( my.betas , power , xlab = expression ( beta ) , ylab = "Power"  , type = "l" , lwd = 2 )
boxplot ( t ( Q.stat ) ~ my.betas , pch = 20 , xlab = expression ( beta ), ylab = expression ( Q[ENV]) )
abline ( h = tmp [[ 1 ]] [ 1, 5 ] )
#install.packages("MASS")
library(MASS)
# p = mvn(my + Selection * Altitude, Va * Covariance)
# p will be an output of our phenotypes
mu <- rep(0, 83) #I think since we want 1K sims, we want to make the length of this 1k
Altitude <- phenoorder$Altitude
B <- 10
pizza <- mu + B * Altitude
#covariance matrix is given in A
VA=1 #additive genetics variance
simpheno <- mvrnorm(n=1000,pizza, VA*A) #n=number of samples we have, for maize 83, for allteo 16 pop
#pieces i am missing: where to stick in altitude?  I think it is at the mu
pvals=sapply(1:1000,function(X) EnvVarTest(simpheno[X,],A,Altitude)[3])
#EnvVarTest(simpheno[X,],A,Altitude,verbose=T)
hist(pvals,breaks=100)
plot(density(pvals))
sim <- function ( samples , slope , add.gen.var , gen.covar.mat , altitudes , verbose=F) {
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B <- slope
env.vector <- mu + B * Altitude
VA = add.gen.var
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
pvals=sapply(1:samples,function(X) EnvVarTest(simpheno[X,],gen.covar.mat,Altitude)[3])
hist(pvals,breaks=100)
}
#sim(1000,1,1,A,phenoorder$Altitude)
sim(1000,0.01,1,A,phenoorder$Altitude)
sim <- function ( samples , slope , add.gen.var , gen.covar.mat , altitudes , verbose=F) {
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B <- slope
env.vector <- mu + B * Altitude
VA = add.gen.var
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
pvals=sapply(1:samples,function(X) EnvVarTest(simpheno[X,],gen.covar.mat,Altitude)[3])
hist(pvals,breaks=100)
}
#sim(1000,1,1,A,phenoorder$Altitude)
sim(1000,0.01,1,A,phenoorder$Altitude)
sim <- function ( samples , slope , add.gen.var , gen.covar.mat , altitudes , verbose=F) {
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B <- slope
env.vector <- mu + B * Altitude
VA = add.gen.var
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
pvals=sapply(1:samples,function(X) EnvVarTest(simpheno[X,],gen.covar.mat,Altitude)[3])
hist(pvals,breaks=100)
}
#sim(1000,1,1,A,phenoorder$Altitude)
sim(1000,0.1,1,A,phenoorder$Altitude)
sim <- function ( samples , slope , add.gen.var , gen.covar.mat , altitudes , verbose=F) {
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B <- slope
env.vector <- mu + B * Altitude
VA = add.gen.var
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
pvals=sapply(1:samples,function(X) EnvVarTest(simpheno[X,],gen.covar.mat,Altitude)[3])
hist(pvals,breaks=100)
}
#sim(1000,1,1,A,phenoorder$Altitude)
sim(1000,0,1,A,phenoorder$Altitude)
sim <- function ( samples , slope , add.gen.var , gen.covar.mat , altitudes , verbose=F) {
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B <- slope
env.vector <- mu + B * Altitude
VA = add.gen.var
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
pvals=sapply(1:samples,function(X) EnvVarTest(simpheno[X,],gen.covar.mat,Altitude)[3])
hist(pvals,breaks=100)
}
#sim(1000,1,1,A,phenoorder$Altitude)
sim(1000,0,1,A,phenoorder$Altitude)
sim <- function ( samples , slope , add.gen.var , gen.covar.mat , altitudes , verbose=F) {
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B <- slope
env.vector <- mu + B * Altitude
VA = add.gen.var
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
pvals=sapply(1:samples,function(X) EnvVarTest(simpheno[X,],gen.covar.mat,Altitude)[3])
hist(pvals,breaks=100)
}
#sim(1000,1,1,A,phenoorder$Altitude)
sim(10000,0,1,A,phenoorder$Altitude)
phenoteo <-read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Teosinte_averages.csv",header=TRUE)
genoteo <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/TeosinteAll_Bayenv.csv",header=FALSE)
EnvVarTest(phenoteo$X180knobMB,genoteo,phenoteo$Altitude)
EnvVarTest(phenoteo$X180knob.,genoteo,phenoteo$Altitude)
EnvVarTest(phenoteo$TR1MB,genoteo,phenoteo$Altitude)
EnvVarTest(phenoteo$TR1.,genoteo,phenoteo$Altitude)
EnvVarTest(phenoteo$CentCMB,genoteo,phenoteo$Altitude)
EnvVarTest(phenoteo$CentC.,genoteo,phenoteo$Altitude)
phenoparv <-read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Teosinte_parv_avg.csv",header=TRUE)
genoparv <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/TeosinteParv_Bayenv.csv",header=FALSE)
EnvVarTest(phenoparv$X180knobMB,genoparv,phenoparv$Altitude)
EnvVarTest(phenoparv$X180knob.,genoparv,phenoparv$Altitude)
EnvVarTest(phenoparv$TR1MB,genoparv,phenoparv$Altitude)
EnvVarTest(phenoparv$TR1.,genoparv,phenoparv$Altitude)
EnvVarTest(phenoparv$CentCMB,genoparv,phenoparv$Altitude)
EnvVarTest(phenoparv$CentC.,genoparv,phenoparv$Altitude)
phenomex <-read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Teosinte_mex_avg.csv",header=TRUE)
genomex <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/TeosinteMex_Bayenv.csv",header=FALSE)
EnvVarTest(phenomex$X180knobMB,genomex,phenomex$Altitude)
EnvVarTest(phenomex$X180knob.,genomex,phenomex$Altitude)
EnvVarTest(phenomex$TR1MB,genomex,phenomex$Altitude)
EnvVarTest(phenomex$TR1.,genomex,phenomex$Altitude)
EnvVarTest(phenomex$CentCMB,genomex,phenomex$Altitude)
EnvVarTest(phenomex$CentC.,genomex,phenomex$Altitude)
EnvVarTest(phenoorder$X180knobMB,A,phenoorder$Altitude)
EnvVarTest(phenoorder$X180knob.,A,phenoorder$Altitude)
EnvVarTest(phenoorder$TotallTeMB,A,phenoorder$Altitude)
EnvVarTest(phenoorder$TotallTe.,A,phenoorder$Altitude)
EnvVarTest(phenoorder$TR1MB,A,phenoorder$Altitude)
EnvVarTest(phenoorder$TR1.,A,phenoorder$Altitude)
EnvVarTest(phenoorder$CentCMB,A,phenoorder$Altitude)
EnvVarTest(phenoorder$CentC.,A,phenoorder$Altitude)
EnvVarTest(phenoorder$CRMallMB,A,phenoorder$Altitude)
EnvVarTest(phenoorder$CRMall.,A,phenoorder$Altitude)
plot(phenoorder$CRMall. ~ phenoorder$Altitude)
plot(phenoorder$CRMallMB ~ phenoorder$Altitude)
plot(phenoorder$CRMall. ~ phenoorder$Altitude)
EnvVarTest(phenoorder$X180knobMB,A,phenoorder$Altitude)
EnvVarTest(phenoorder$X180knob.,A,phenoorder$Altitude)
EnvVarTest(phenoorder$TotallTeMB,A,phenoorder$Altitude)
EnvVarTest(phenoorder$TotallTe.,A,phenoorder$Altitude)
EnvVarTest(phenoorder$TotallTeMB,A,phenoorder$Altitude)
EnvVarTest(phenoorder$TotallTe.,A,phenoorder$Altitude)
plot(phenoorder$TotalTE. ~ phenoorder$Altitude)
plot(phenoorder$TotallTE. ~ phenoorder$Altitude)
plot(phenoorder$TotallTeMB ~ phenoorder$Altitude)
plot(phenoorder$TotallTe. ~ phenoorder$Altitude)
lm(phenoorder$TotallTe. ~ phenoorder$Altitude)
EnvVarTest(phenoorder$CRMallMB,A,phenoorder$Altitude)
EnvVarTest(phenoorder$CRMall.,A,phenoorder$Altitude)
EnvVarTest(phenoorder$X1C_GS,A,phenoorder$Altitude)
#install.packages("MASS")
library(MASS)
# p = mvn(my + Selection * Altitude, Va * Covariance)
# p will be an output of our phenotypes
mu <- rep(0, 83) #I think since we want 1K sims, we want to make the length of this 1k
Altitude <- phenoorder$Altitude
B <- 10
pizza <- mu + B * Altitude
#covariance matrix is given in A
VA=1 #additive genetics variance
simpheno <- mvrnorm(n=1000,pizza, VA*A) #n=number of samples we have, for maize 83, for allteo 16 pop
#pieces i am missing: where to stick in altitude?  I think it is at the mu
pvals=sapply(1:1000,function(X) EnvVarTest(simpheno[X,],A,Altitude)[3])
#EnvVarTest(simpheno[X,],A,Altitude,verbose=T)
hist(pvals,breaks=100)
plot(density(pvals))
>>>>>>> 734b6aa2fbd6492078fbcbeff73f551250c1a4db
sim <- function ( samples , slope , add.gen.var , gen.covar.mat , altitudes , verbose=F) {
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B <- slope
env.vector <- mu + B * Altitude
VA = add.gen.var
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
pvals=sapply(1:samples,function(X) EnvVarTest(simpheno[X,],gen.covar.mat,Altitude)[3])
allVa=sapply(1:samples,function(X) EnvVarTest(simpheno[X,],gen.covar.mat,Altitude)[4])
hist(pvals,breaks=100, main="Distribution of P Values")
signif <- length(subset(pvals, pvals < 0.05))
avgVa <- mean(allVa)
hist(allVa,breaks=100, main="Histogram of Va Values for 1000 Simulations")
return ( c ( signif , avgVa ) )
}
<<<<<<< HEAD
accepted <- c(.053 , .078, .153, .291, .485, .657, .828, .918, .973, .990, .999)
beta <- c(0)
beta <- as.numeric(union(beta, seq(0.0001,0.001,0.0001)))
plot(accepted ~ beta, main="Proportion of Significant P-Values under varying B/Va", xlab="B/Va", ylab="Proportion Significant",options(scipen=5),xlim=c(0,.001))
lines(beta, accepted, lwd=1.5)
knobmb <- abs(-0.049495790/5431.778287163)
abline(v=knobmb, col="red",lwd=1.5)
knob. <- abs(-0.001419767/4.972794944)
abline(v=knob., col="red")
temb <- abs(-0.061480283/8727.985264731)
abline(v=temb, col="green",lwd=1.5)
te. <- abs(0.0004300344/2.2614178222)
abline(v=te., col="green")
centcmb <- abs(0.00008894284/5.18658746447)
abline(v=centcmb, col="peru",lwd=1.5)
centc. <- abs(0.00001546521/0.00568202942)
abline(v=centc., col="peru")
crmmb <- abs(0.0004516771/0.6025925993)
abline(v=crmmb, col="blue",lwd=1.5)
crm. <- abs(0.000002730368/0.000606835736)
abline(v=centc., col="blue")
betas<- c(0.049495790,0.001419767,0.061480283,0.0004300344,0.00008894284,0.00001546521,0.0004516771,0.000002730368)
vas <- c(5431.778287163,4.972794944,8727.985264731,2.2614178222,5.18658746447,0.00568202942,0.6025925993,0.000606835736)
betasmb <- c(0.049495790,0.061480283,0.00008894284,0.0004516771,)
vasmb <- c(5431.778287163,8727.985264731,5.18658746447,0.6025925993)
betasmb <- c(0.049495790,0.061480283,0.00008894284,0.0004516771)
vasmb <- c(5431.778287163,8727.985264731,5.18658746447,0.6025925993)
fraction = betasmb/vasmb
barplot(fraction)
betasmb <- c(0.049495790,0.061480283,0.00008894284)
vasmb <- c(5431.778287163,8727.985264731,5.18658746447)
fraction = betasmb/vasmb
barplot(fraction)
cols <- ("blue","red","green")
cols <- c("blue","red","green")
barplot(fraction, col=cols)
cols <- c("dark blue","light red","olive green")
barplot(fraction, col=cols)
cols <- c("dark blue","dark red","olive green")
barplot(fraction, col=cols)
cols <- c("dark blue","dark red","olive")
barplot(fraction, col=cols)
cols <- c("dark blue","dark red","olivedrab")
barplot(fraction, col=cols)
barplot(fraction, col=cols, names.arg=c("180 Knob", "TE", "CentC"))
barplot(fraction, col=cols, names.arg=c("180 Knob", "TE", "CentC"), ylab="B/Va")
p2 <- ggplot(dteo, aes(Altitude, X180knobMB, color=Species)) + geom_point()+ ylab("MB 180Knob") + theme(legend.title=element_blank()) + geom_smooth(method=lm)
p2
p2 <- ggplot(dteo, aes(Altitude, X1C_GS, color=Species)) + geom_point()+ ylab("MB 180Knob") + theme(legend.title=element_blank()) + geom_smooth(method=lm)
p2
p2 <- ggplot(dteo, aes(Altitude, X1C_GS, color=Species)) + geom_point()+ ylab("1C GS") + theme(legend.title=element_blank()) + geom_smooth(method=lm)
p2
p1 <- ggplot(dteo, aes(Region, X1C_GS, color=Region)) + geom_boxplot()+ ylab("1C GS")
p1
p2 <- ggplot(dteo, aes(Altitude, X1C_GS, color=Species)) + geom_point()+ ylab("1C GS") + theme(legend.title=element_blank()) + geom_smooth(method=lm)
p2
listrna <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/MergeFTE/Abund/ToptmpRetros.txt", header=FALSE)
listlandr <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/MergeFTE/Abund/Landrace_FTE_aggregated.csv",header=TRUE)
rna50 <- merge(listrna, listlandr, by.x="V1",by.y="FTE_group",sort=FALSE)
rna50tmp <- rna50
rna50tmp$V1 <- NULL
rna50mat <- t(as.matrix(rna50tmp))
image(rna50mat, xlab="Landrace Accession", ylab="Retro Element Family",oldstyle=TRUE,yaxt='n',xaxt='n',main="Percentage of genomic composition in top 15 retro  families")
landragg <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/MergeFTE/Abund/Landrace_FTE_aggregated.csv",header=TRUE)
View(landragg)
topftel <- as.data.frame(sort(rowSums(landragg),decreasing=TRUE))
landragg <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/MergeFTE/Abund/Landrace_FTE_aggregated.csv",header=TRUE,row.names="FTE_group")
topftel <- as.data.frame(sort(rowSums(landragg),decreasing=TRUE))
write.csv(topftel,"~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/MergeFTE/Abund/Top_landrace_FTE_sums.csv")
listrna <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/MergeFTE/Abund/ToptmpRetros.txt", header=FALSE)
listlandr <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/MergeFTE/Abund/Landrace_FTE_aggregated.csv",header=TRUE)
rna50 <- merge(listrna, listlandr, by.x="V1",by.y="FTE_group",sort=FALSE)
rna50tmp <- rna50
rna50tmp$V1 <- NULL
rna50mat <- t(as.matrix(rna50tmp))
image(rna50mat, xlab="Landrace Accession", ylab="Retro Element Family",oldstyle=TRUE,yaxt='n',xaxt='n',main="Percentage of genomic composition in top 15 retro  families")
View(rna50)
trna50 <- t(rna50)
View(trna50)
rank(rna50$RIMMA0381.1.fastq.abund)
rank(rna50)
tmp <- rank(rna50)
library(plyr)
sumem <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/MergeFTE/Abund/289_FTE_sepID_merged.csv",header=TRUE)
View(sumem)
tmp <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/MergeFTE/Abund/289_FTE_aggregated.csv",header=TRUE,row.names="FTE_group")
listrna <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/MergeFTE/Abund/ToptmpRetros.txt", header=FALSE)
listlandr <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/MergeFTE/Abund/Landrace_FTE_aggregated.csv",header=TRUE)
View(listlandr)
rna50 <- merge(listrna, listlandr, by.x="V1",by.y="FTE_group",sort=FALSE)
tmp <- ddply(rna50, .(FTE_group), numcolwise(rank))
View(rna50)
tmp <- ddply(rna50, .(V1), numcolwise(rank))
View(tmp)
tmp <- ddply(rna50, .(V1), colwise(rank))
View(tmp)
View(rna50)
write.csv(rna50, "~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/MergeFTE/Abund/Top15_retro.csv")
maxs <- apply(rna50, 102, max)
rna50$V1 <- NULL
maxs <- apply(rna50, 102, max)
data <- matrix(sample(1:1000,17*6), ncol=17,nrow=6)
View(data)
maxs <- apply(data, 2, max)
mins <- apply(data, 2, min)
maxs
maxs <- apply(rna50, 2, max)
listrna <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/MergeFTE/Abund/ToptmpRetros.txt", header=FALSE)
listlandr <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/MergeFTE/Abund/Landrace_FTE_aggregated.csv",header=TRUE)
rna50 <- merge(listrna, listlandr, by.x="V1",by.y="FTE_group",sort=FALSE)
rna50$V1 <- NULL
maxs <- apply(rna50, 2, max)
maxs
View(rna50)
trna50 <- t(rna50)
View(trna50)
maxs <- apply(trna50, 2, max)
maxs
write.csv(trna50, "~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/MergeFTE/Abund/tmp.csv")
mins <- apply(trna50, 2, min)
?apply
scaled.rna15 <- scale(trna50, center = mins, scale = maxs - mins )
View(scaled.rna15)
image(trna50, xlab="Landrace Accession", ylab="Retro Element Family",oldstyle=TRUE,yaxt='n',xaxt='n',main="Percentage of genomic composition in top 15 retro  families")
image(scaled.rna15, xlab="Landrace Accession", ylab="Retro Element Family",oldstyle=TRUE,yaxt='n',xaxt='n',main="Percentage of genomic composition in top 15 retro  families")
image(scaled.rna15, xlab="Landrace Accession", ylab="Retro Element Family",oldstyle=TRUE,yaxt='n',xaxt='n',main="Scaled Genomic Composition")
View(scaled.rna15)
hist(scaled.rna15$V1)
hist(scaled.rna15)
hist(trna50)
image()
image(trna50)
scaled.rna15 <- scale(trna50, center = mins, scale = maxs - mins )
image(scaled.rna15, xlab="Landrace Accession", ylab="Retro Element Family",oldstyle=TRUE,yaxt='n',xaxt='n',main="Scaled Genomic Composition")
image(log(trna50)
)
image(log(scaled.rna15), xlab="Landrace Accession", ylab="Retro Element Family",oldstyle=TRUE,yaxt='n',xaxt='n',main="Scaled Genomic Composition")
image(scaled.rna15, xlab="Landrace Accession", ylab="Retro Element Family",oldstyle=TRUE,yaxt='n',xaxt='n',main="Scaled Genomic Composition")
hist(trna50)
image(scaled.rna15, xlab="Landrace Accession", ylab="Retro Element Family",oldstyle=TRUE,yaxt='n',xaxt='n',main="Scaled Genomic Composition")
image(log(trna50)
)
image(scaled.rna15, xlab="Landrace Accession", ylab="Retro Element Family",yaxt='n',xaxt='n',main="Scaled Genomic Composition")
View(rna50)
image(scaled.rna15, col=topo,xlab="Landrace Accession", ylab="Retro Element Family",yaxt='n',xaxt='n',main="Scaled Genomic Composition")
image(scaled.rna15, col="topo"",xlab="Landrace Accession", ylab="Retro Element Family",yaxt='n',xaxt='n',main="Scaled Genomic Composition")
image(scaled.rna15, col="topo",xlab="Landrace Accession", ylab="Retro Element Family",yaxt='n',xaxt='n',main="Scaled Genomic Composition")
image(scaled.rna15, col=terrain.colors(100),xlab="Landrace Accession", ylab="Retro Element Family",yaxt='n',xaxt='n',main="Scaled Genomic Composition")
library(gplots)
install.packages(gplots)
install.packages("gplots"")
install.packages("gplots")
library(gplots)
quantile.range <- quantile(trna50, probs = seq(0, 1, 0.01))
palette.breaks <- seq(quantile.range["5%"], quantile.range["95%"], 0.1)
color.palette  <- colorRampPalette(c("#FC8D59", "#FFFFBF", "#91CF60"))(length(palette.breaks) - 1)
install.packages("gplots")
library(gplots)
quantile.range <- quantile(trna50, probs = seq(0, 1, 0.01))
palette.breaks <- seq(quantile.range["5%"], quantile.range["95%"], 0.1)
# use http://colorbrewer2.org/ to find optimal divergent color palette (or set own)
color.palette  <- colorRampPalette(c("#FC8D59", "#FFFFBF", "#91CF60"))(length(palette.breaks) - 1)
heatmap.2(
trna50,
dendrogram = "row",
scale      = "none",
trace      = "none",
key        = FALSE,
labRow     = NA,
labCol     = NA,
col    = color.palette,
breaks = palette.breaks
)
heatmap.2(
trna50,
dendrogram = "row",
scale      = "none",
trace      = "none",
key        = FALSE,
labRow     = NA,
labCol     = NA,
col    = color.palette,
breaks = palette.breaks
)
library(gplots)
quantile.range <- quantile(trna50, probs = seq(0, 1, 0.01))
palette.breaks <- seq(quantile.range["5%"], quantile.range["95%"], 0.1)
# use http://colorbrewer2.org/ to find optimal divergent color palette (or set own)
color.palette  <- colorRampPalette(c("#FC8D59", "#FFFFBF", "#91CF60"))(length(palette.breaks) - 1)
heatmap.2(
install.packages("gplots")
library(gplots)
quantile.range <- quantile(trna50, probs = seq(0, 1, 0.01))
palette.breaks <- seq(quantile.range["5%"], quantile.range["95%"], 0.1)
# use http://colorbrewer2.org/ to find optimal divergent color palette (or set own)
color.palette  <- colorRampPalette(c("#FC8D59", "#FFFFBF", "#91CF60"))(length(palette.breaks) - 1)
heatmap.2(
trna50,
dendrogram = "row",
scale      = "none",
trace      = "none",
key        = FALSE,
labRow     = NA,
labCol     = NA,
col    = color.palette,
breaks = palette.breaks
)
=======
#sim(1000,1,1,A,phenoorder$Altitude)
sim(1000,0,1,A,phenoorder$Altitude)
sim <- function ( samples , slope , add.gen.var , gen.covar.mat , altitudes , verbose=F) {
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B <- slope
env.vector <- mu + B * Altitude
VA = add.gen.var
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
pvals=sapply(1:samples,function(X) EnvVarTest(simpheno[X,],gen.covar.mat,Altitude)[3])
hist(pvals,breaks=100)
}
#sim(1000,1,1,A,phenoorder$Altitude)
sim(1000,0.1,1,A,phenoorder$Altitude)
sim <- function ( samples , slope , add.gen.var , gen.covar.mat , altitudes , verbose=F) {
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B <- slope
env.vector <- mu + B * Altitude
VA = add.gen.var
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
pvals=sapply(1:samples,function(X) EnvVarTest(simpheno[X,],gen.covar.mat,Altitude)[3])
hist(pvals,breaks=100)
}
#sim(1000,1,1,A,phenoorder$Altitude)
sim(1000,0.01,1,A,phenoorder$Altitude)
sim <- function ( samples , slope , add.gen.var , gen.covar.mat , altitudes , verbose=F) {
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B <- slope
env.vector <- mu + B * Altitude
VA = add.gen.var
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
pvals=sapply(1:samples,function(X) EnvVarTest(simpheno[X,],gen.covar.mat,Altitude)[3])
hist(pvals,breaks=100)
}
#sim(1000,1,1,A,phenoorder$Altitude)
sim(1000,0.001,1,A,phenoorder$Altitude)
sim <- function ( samples , slope , add.gen.var , gen.covar.mat , altitudes , verbose=F) {
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B <- slope
env.vector <- mu + B * Altitude
VA = add.gen.var
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
pvals=sapply(1:samples,function(X) EnvVarTest(simpheno[X,],gen.covar.mat,Altitude)[3])
hist(pvals,breaks=100)
}
#sim(1000,1,1,A,phenoorder$Altitude)
sim(1000,0.00001,1,A,phenoorder$Altitude)
sim <- function ( samples , slope , add.gen.var , gen.covar.mat , altitudes , verbose=F) {
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B <- slope
env.vector <- mu + B * Altitude
VA = add.gen.var
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
pvals=sapply(1:samples,function(X) EnvVarTest(simpheno[X,],gen.covar.mat,Altitude)[3])
hist(pvals,breaks=100)
}
#sim(1000,1,1,A,phenoorder$Altitude)
sim(1000,0.0001,1,A,phenoorder$Altitude)
sim <- function ( samples , slope , add.gen.var , gen.covar.mat , altitudes , verbose=F) {
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B <- slope
env.vector <- mu + B * Altitude
VA = add.gen.var
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
pvals=sapply(1:samples,function(X) EnvVarTest(simpheno[X,],gen.covar.mat,Altitude)[3])
hist(pvals,breaks=100)
}
#sim(1000,1,1,A,phenoorder$Altitude)
sim(1000,0.001,1,A,phenoorder$Altitude)
sim(1,0.001,1,A,phenoorder$Altitude,verbose=T)
sim(1000,0.001,1,A,phenoorder$Altitude,verbose=T)
sim <- function ( samples , slope , add.gen.var , gen.covar.mat , altitudes , verbose=F) {
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B <- slope
env.vector <- mu + B * Altitude
VA = add.gen.var
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
pvals=sapply(1:samples,function(X) EnvVarTest(simpheno[X,],gen.covar.mat,Altitude)[3])
hist(pvals,breaks=100)
}
#sim(1000,1,1,A,phenoorder$Altitude)
#sim(1000,0.001,1,A,phenoorder$Altitude,verbose=T)
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B <- slope
env.vector <- mu + B * Altitude
VA = add.gen.var
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
pvals=sapply(1:samples,function(X) EnvVarTest(simpheno[X,],gen.covar.mat,Altitude)[3])
hist(pvals,breaks=100)
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B=0.001
altitudes=phenoorder$Altitude
VA=1
GCM<-A
env.vector <- mu + B * Altitude
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
n=1
samples=1
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
simpheno
EnvVarTest(simpheno[X,]
gen.covar.mat,Altitude)
EnvVarTest(simpheno[1,],GCM,Altitude)
EnvVarTest(simpheno,GCM,Altitude)
library ( mvtnorm )
EnvVarTest <- function ( phenos , kinship.mat , test.vector ) {
# 'phenos' is a vector containing the phenotype (i.e. number of repeats) for each individual; dimensions are N x 1
# 'kinship.mat' is the kinship matrix; dimensions are N x N; rows and columns need to be in the same order as the phenotypes in the vector
# test.vector is the environmental factor of interest (in this case altitude)
#recover()
eigs <- eigen ( kinship.mat ) ## get eigendecomposition of kinship matrix
rt.inv <- eigs$vec %*% diag ( 1/sqrt(eigs$val) ) %*% t ( eigs$vec )# calculate inverse of the square root matrix
cent.test.vector <- test.vector - mean ( test.vector )
cent.phenos <- phenos - mean ( phenos )
rotated.phenos <- rt.inv %*% cent.phenos # rotate phenotypes from population space into principal component space
unit.test.vector <- cent.test.vector / (sqrt ( 2 * sum ( cent.test.vector^2 ) ) ) # scale to be unit length after rotation
#recover()
rotated.vector <- rt.inv %*% cent.test.vector # rotate environmental variable from population space into principal component space
model <- lm ( rotated.phenos ~ rotated.vector) # fit regression model
r.sq <- cor.test ( rotated.phenos , rotated.vector )$estimate^2 # get r^2
ANOVA <- anova ( model ) # get p value
# expected fraction of variance associated with environmental variable under neutrality
F.env <- ( t ( unit.test.vector ) %*% kinship.mat %*% unit.test.vector ) / sum ( diag ( kinship.mat ) )
sums.sq <- cumsum ( ANOVA[2] )
# fraction of variance associated with environmental variable for trait
Q.env <- sums.sq[1,]/ ( sums.sq[2,] )
if(verbose==T){print(ANOVA)}
return ( c ( model$coef[2] , r.sq , ANOVA[5][[1]][1] , ANOVA[3][2,] , F.env , Q.env ) ) # return regression coefficient, r-squared, p value, estimate of Va, F statistic, Q statistic
}
EnvVarTest(simpheno,GCM,Altitude)
EnvVarTest(simpheno,GCM,Altitude,Verbose=T)
library ( mvtnorm )
EnvVarTest <- function ( phenos , kinship.mat , test.vector, verbose=F ) {
# 'phenos' is a vector containing the phenotype (i.e. number of repeats) for each individual; dimensions are N x 1
# 'kinship.mat' is the kinship matrix; dimensions are N x N; rows and columns need to be in the same order as the phenotypes in the vector
# test.vector is the environmental factor of interest (in this case altitude)
#recover()
eigs <- eigen ( kinship.mat ) ## get eigendecomposition of kinship matrix
rt.inv <- eigs$vec %*% diag ( 1/sqrt(eigs$val) ) %*% t ( eigs$vec )# calculate inverse of the square root matrix
cent.test.vector <- test.vector - mean ( test.vector )
cent.phenos <- phenos - mean ( phenos )
rotated.phenos <- rt.inv %*% cent.phenos # rotate phenotypes from population space into principal component space
unit.test.vector <- cent.test.vector / (sqrt ( 2 * sum ( cent.test.vector^2 ) ) ) # scale to be unit length after rotation
#recover()
rotated.vector <- rt.inv %*% cent.test.vector # rotate environmental variable from population space into principal component space
model <- lm ( rotated.phenos ~ rotated.vector) # fit regression model
r.sq <- cor.test ( rotated.phenos , rotated.vector )$estimate^2 # get r^2
ANOVA <- anova ( model ) # get p value
# expected fraction of variance associated with environmental variable under neutrality
F.env <- ( t ( unit.test.vector ) %*% kinship.mat %*% unit.test.vector ) / sum ( diag ( kinship.mat ) )
sums.sq <- cumsum ( ANOVA[2] )
# fraction of variance associated with environmental variable for trait
Q.env <- sums.sq[1,]/ ( sums.sq[2,] )
if(verbose==T){print(ANOVA)}
return ( c ( model$coef[2] , r.sq , ANOVA[5][[1]][1] , ANOVA[3][2,] , F.env , Q.env ) ) # return regression coefficient, r-squared, p value, estimate of Va, F statistic, Q statistic
}
EnvVarTest(simpheno,GCM,Altitude,verbose=T)
>>>>>>> 734b6aa2fbd6492078fbcbeff73f551250c1a4db
