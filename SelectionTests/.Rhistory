#acceptance rate
accepted.moves/ngen #little high, moving slowly, can just move uniformProposal to be bigger
plot(theta.samples,ylim=c(0,1),type='l')
#install.packages('coda')
library(coda)
geweke.diag(theta.samples)
effectiveSize(theta.samples)
curve(dbeta(x=x,5,5),from=0,to=1,n=1001,add=TRUE)
hist(theta.samples,xlim=c(0,1),freq=FALSE)
curve(dbeta(x=x,5,5),from=0,to=1,n=1001,add=TRUE)
plot(theta.samples,ylim=c(0,1),type='l')
5E-5
5E-5 > 6E-5
5E-5 < 6E-5
fit <- aov()
?aov()
library ( mvtnorm )
source('~/.active-rstudio-document', echo=TRUE)
library ( mvtnorm )
EnvVarTest <- function ( phenos , kinship.mat , test.vector ) {
# 'phenos' is a vector containing the phenotype
# (i.e. number of repeats) for each individual; dimensions are N x 1
# 'kinship.mat' is the kinship matrix; dimensions are N x N;
# rows and columns need to be in the same order as the phenotypes in the vector
# test.vector is the environmental factor of interest (in this case altitude)
eigs <- eigen ( kinship.mat )
# get eigendecomposition of kinship matrix
rt.inv <- eigs$vec %*% diag ( sqrt(eigs$val) )
# calculate inverse of the square root matrix
rotated.phenos <- t ( rt.inv ) %*% phenos
# rotate phenotypes from population space into principal component space
test.vector <- test.vector / (sqrt ( 2 * sum ( test.vector^2 ) ) )
# scale to be unit length after rotation
#recover()
rotated.vector <- rt.inv %*% test.vector
# rotate environmental variable from population space into principal component space
model <- lm ( rotated.phenos ~ 1+rotated.vector)
# fit regression model
r.sq <- cor.test ( rotated.phenos , rotated.vector )$estimate^2
# get r^2
ANOVA <- anova ( model )
# get p value
print(ANOVA)
return ( c ( model$coef[2] , r.sq , ANOVA[5][[1]][1] )) # return
}
phenoteo <-read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Teosinte_averages.csv",header=TRUE)
View(phenoteo)
genoteo <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/TeosinteAll_Bayenv.csv",header=FALSE)
EnvVarTest(phenoteo$X180knobMB,genoteo,phenoteo$Altitude)
genoteo <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/TeosinteAll_Bayenv.csv",header=FALSE)
EnvVarTest(phenoteo$X180knobMB,genoteo,phenoteo$Altitude)
EnvVarTest(phenoteo$X180knob.,genoteo,phenoteo$Altitude)
EnvVarTest(phenoteo$X180knobMB,genoteo,phenoteo$Altitude)
EnvVarTest(phenoteo$X180knob.,genoteo,phenoteo$Altitude)
EnvVarTest(phenoteo$TR1MB,genoteo,phenoteo$Altitude)
EnvVarTest(phenoteo$TR1.,genoteo,phenoteo$Altitude)
EnvVarTest(phenoteo$CentCMB,genoteo,phenoteo$Altitude)
EnvVarTest(phenoteo$CentC.,genoteo,phenoteo$Altitude)
```
phenoparv <-read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Teosinte_parv_avg.csv",header=TRUE)
genoparv <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/TeosinteParv_Bayenv.csv",header=FALSE)
EnvVarTest(phenoparv$X180knobMB,genoparv,phenoparv$Altitude)
EnvVarTest(phenoparv$X180knob.,genoparv,phenoparv$Altitude)
EnvVarTest(phenoparv$TR1MB,genoparv,phenoparv$Altitude)
EnvVarTest(phenoparv$TR1.,genoparv,phenoparv$Altitude)
EnvVarTest(phenoparv$CentCMB,genoparv,phenoparv$Altitude)
EnvVarTest(phenoparv$CentC.,genoparv,phenoparv$Altitude)
View(genoteo)
phenomex <-read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Teosinte_mex_avg.csv",header=TRUE)
genomex <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/TeosinteMex_Bayenv.csv",header=FALSE)
EnvVarTest(phenomex$X180knobMB,genomex,phenomex$Altitude)
EnvVarTest(phenomex$X180knob.,genomex,phenomex$Altitude)
EnvVarTest(phenomex$TR1MB,genomex,phenomex$Altitude)
EnvVarTest(phenomex$TR1.,genomex,phenomex$Altitude)
EnvVarTest(phenomex$CentCMB,genomex,phenomex$Altitude)
EnvVarTest(phenomex$CentC.,genomex,phenomex$Altitude)
setwd("~/Documents/Projects/Genome_Size_Analysis")
library(ggplot2)
dataall <- read.csv("Master_Data_noNA.csv")
dataal <- subset(dataall, dataall$X1C_GS!="NA")
data <- subset(dataal, dataal$X1C_GS<3.6)
dmays <- subset(data, data$Species=="mays")
p1 <- ggplot(dmays, aes(Region, X1C_GS, color=Region)) + geom_boxplot()+ ylab("1C Genome Size")
p1
p2 <- ggplot(data, aes(Altitude, X180knobMB, color=Species)) + geom_point()+ ylab("MB 180Knob") + theme(legend.title=element_blank()) + geom_smooth(method=lm)
p2
p <- ggplot(data, aes(Altitude, TR1MB, color=Species)) + geom_point()+ ylab("MB TR1") + theme(legend.title=element_blank()) + geom_smooth(method=lm)
p
p <- ggplot(data, aes(Altitude, TotallTeMB, color=Species)) + geom_point()+ ylab("MB TE") + theme(legend.title=element_blank()) + geom_smooth(method=lm)
p
setwd("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SelectionTests/")
library("rrBLUP")
geno <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/Landrace_noSWUS_matrix.csv",header=TRUE,row.names=1)
dt <-t(geno)
A <- A.mat(dt)
write
#go back to teosinte data, convert to frequencies of allele * 2 so that we get the # of alleles in each individual
pheno <-read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Landraces_noSWUS_pheno.csv",header=TRUE)
#to make sure order is the same
tmp1 <- as.data.frame(colnames(geno))
names(tmp1)[1] <- "names"
tmp2 <- as.data.frame(pheno$FullID)
tmp <- setdiff(tmp1,tmp2)
phenoorder <- merge(tmp1,pheno, by.x="names", by.y="FullID",sort=FALSE)
library ( mvtnorm )
EnvVarTest <- function ( phenos , kinship.mat , test.vector ) {
# 'phenos' is a vector containing the phenotype (i.e. number of repeats) for each individual; dimensions are N x 1
# 'kinship.mat' is the kinship matrix; dimensions are N x N; rows and columns need to be in the same order as the phenotypes in the vector
# test.vector is the environmental factor of interest (in this case altitude)
#recover()
eigs <- eigen ( kinship.mat ) ## get eigendecomposition of kinship matrix
rt.inv <- eigs$vec %*% diag ( 1/sqrt(eigs$val) ) %*% t ( eigs$vec )# calculate inverse of the square root matrix
cent.test.vector <- test.vector - mean ( test.vector )
cent.phenos <- phenos - mean ( phenos )
rotated.phenos <- rt.inv %*% cent.phenos # rotate phenotypes from population space into principal component space
unit.test.vector <- cent.test.vector / (sqrt ( 2 * sum ( cent.test.vector^2 ) ) ) # scale to be unit length after rotation
#recover()
rotated.vector <- rt.inv %*% cent.test.vector # rotate environmental variable from population space into principal component space
model <- lm ( rotated.phenos ~ rotated.vector) # fit regression model
r.sq <- cor.test ( rotated.phenos , rotated.vector )$estimate^2 # get r^2
ANOVA <- anova ( model ) # get p value
# expected fraction of variance associated with environmental variable under neutrality
F.env <- ( t ( unit.test.vector ) %*% kinship.mat %*% unit.test.vector ) / sum ( diag ( kinship.mat ) )
sums.sq <- cumsum ( ANOVA[2] )
# fraction of variance associated with environmental variable for trait
Q.env <- sums.sq[1,]/ ( sums.sq[2,] )
return ( c ( model$coef[2] , r.sq , ANOVA[5][[1]][1] , ANOVA[3][2,] , F.env , Q.env ) ) # return regression coefficient, r-squared, p value, estimate of Va, F statistic, Q statistic
}
EnvVarTest(phenoorder$X180knobMB,A,phenoorder$Altitude)
EnvVarTest(phenoorder$X180knob.,A,phenoorder$Altitude)
EnvVarTest(phenoorder$TotallTeMB,A,phenoorder$Altitude)
EnvVarTest(phenoorder$TotallTe.,A,phenoorder$Altitude)
EnvVarTest(phenoorder$TR1MB,A,phenoorder$Altitude)
EnvVarTest(phenoorder$TR1.,A,phenoorder$Altitude)
EnvVarTest(phenoorder$CentCMB,A,phenoorder$Altitude)
EnvVarTest(phenoorder$CentC.,A,phenoorder$Altitude)
EnvVarTest(phenoorder$CRMallMB,A,phenoorder$Altitude)
EnvVarTest(phenoorder$CRMall.,A,phenoorder$Altitude)
plot(phenoorder$CRMall. ~ phenoorder$Altitude)
load
my.betas <- c ( seq ( 0 , 1 , by = 0.1 ), seq ( 1.2 , 2, 0.2 ) )
env <-rnorm ( n = 83 , 0 , sd = 1 ) # different individuals
tmp <- list ()
power <- numeric ( length ( my.betas ) )
for ( i in 1 : length ( my.betas ) ) {
beta <- my.betas [ i ]
mu <- rep ( 0 , 152 )
my.mean <- mu + beta * env
test.data <- rmvnorm ( n = 1000 , mean = my.mean , sigma = this.cov.mat )
tmp [[ i ]] <- matrix ( NA , nrow = 1000 , ncol = 6 )
for ( j in 1 : 1000 ) {
tmp [[ i ]] [ j , ] <- EnvVarTest ( test.data[ j , ] , this.cov.mat , env )
}
#hist ( tmp [[ i ]] [ , 3 ] , breaks = 50 )
power [ i ] <- sum ( tmp [[ i ]] [ , 3  ] < 0.05 ) / 1000
}
Q.stat <- do.call ( cbind , lapply ( tmp , function ( x ) x [ , 6 ] ) )
par ( mfrow = c ( 2, 1 ) )
plot ( my.betas , power , xlab = expression ( beta ) , ylab = "Power"  , type = "l" , lwd = 2 )
boxplot ( t ( Q.stat ) ~ my.betas , pch = 20 , xlab = expression ( beta ), ylab = expression ( Q[ENV]) )
abline ( h = tmp [[ 1 ]] [ 1, 5 ] )
Q.stat <- do.call ( cbind , lapply ( tmp , function ( x ) x [ , 6 ] ) )
par ( mfrow = c ( 2, 1 ) )
plot ( my.betas , power , xlab = expression ( beta ) , ylab = "Power"  , type = "l" , lwd = 2 )
boxplot ( t ( Q.stat ) ~ my.betas , pch = 20 , xlab = expression ( beta ), ylab = expression ( Q[ENV]) )
abline ( h = tmp [[ 1 ]] [ 1, 5 ] )
#install.packages("MASS")
library(MASS)
# p = mvn(my + Selection * Altitude, Va * Covariance)
# p will be an output of our phenotypes
mu <- rep(0, 83) #I think since we want 1K sims, we want to make the length of this 1k
Altitude <- phenoorder$Altitude
B <- 10
pizza <- mu + B * Altitude
#covariance matrix is given in A
VA=1 #additive genetics variance
simpheno <- mvrnorm(n=1000,pizza, VA*A) #n=number of samples we have, for maize 83, for allteo 16 pop
#pieces i am missing: where to stick in altitude?  I think it is at the mu
pvals=sapply(1:1000,function(X) EnvVarTest(simpheno[X,],A,Altitude)[3])
#EnvVarTest(simpheno[X,],A,Altitude,verbose=T)
hist(pvals,breaks=100)
plot(density(pvals))
sim <- function ( samples , slope , add.gen.var , gen.covar.mat , altitudes , verbose=F) {
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B <- slope
env.vector <- mu + B * Altitude
VA = add.gen.var
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
pvals=sapply(1:samples,function(X) EnvVarTest(simpheno[X,],gen.covar.mat,Altitude)[3])
hist(pvals,breaks=100)
}
#sim(1000,1,1,A,phenoorder$Altitude)
sim(1000,0.01,1,A,phenoorder$Altitude)
sim <- function ( samples , slope , add.gen.var , gen.covar.mat , altitudes , verbose=F) {
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B <- slope
env.vector <- mu + B * Altitude
VA = add.gen.var
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
pvals=sapply(1:samples,function(X) EnvVarTest(simpheno[X,],gen.covar.mat,Altitude)[3])
hist(pvals,breaks=100)
}
#sim(1000,1,1,A,phenoorder$Altitude)
sim(1000,0.01,1,A,phenoorder$Altitude)
sim <- function ( samples , slope , add.gen.var , gen.covar.mat , altitudes , verbose=F) {
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B <- slope
env.vector <- mu + B * Altitude
VA = add.gen.var
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
pvals=sapply(1:samples,function(X) EnvVarTest(simpheno[X,],gen.covar.mat,Altitude)[3])
hist(pvals,breaks=100)
}
#sim(1000,1,1,A,phenoorder$Altitude)
sim(1000,0.1,1,A,phenoorder$Altitude)
sim <- function ( samples , slope , add.gen.var , gen.covar.mat , altitudes , verbose=F) {
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B <- slope
env.vector <- mu + B * Altitude
VA = add.gen.var
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
pvals=sapply(1:samples,function(X) EnvVarTest(simpheno[X,],gen.covar.mat,Altitude)[3])
hist(pvals,breaks=100)
}
#sim(1000,1,1,A,phenoorder$Altitude)
sim(1000,0,1,A,phenoorder$Altitude)
sim <- function ( samples , slope , add.gen.var , gen.covar.mat , altitudes , verbose=F) {
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B <- slope
env.vector <- mu + B * Altitude
VA = add.gen.var
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
pvals=sapply(1:samples,function(X) EnvVarTest(simpheno[X,],gen.covar.mat,Altitude)[3])
hist(pvals,breaks=100)
}
#sim(1000,1,1,A,phenoorder$Altitude)
sim(1000,0,1,A,phenoorder$Altitude)
sim <- function ( samples , slope , add.gen.var , gen.covar.mat , altitudes , verbose=F) {
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B <- slope
env.vector <- mu + B * Altitude
VA = add.gen.var
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
pvals=sapply(1:samples,function(X) EnvVarTest(simpheno[X,],gen.covar.mat,Altitude)[3])
hist(pvals,breaks=100)
}
#sim(1000,1,1,A,phenoorder$Altitude)
sim(10000,0,1,A,phenoorder$Altitude)
phenoteo <-read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Teosinte_averages.csv",header=TRUE)
genoteo <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/TeosinteAll_Bayenv.csv",header=FALSE)
EnvVarTest(phenoteo$X180knobMB,genoteo,phenoteo$Altitude)
EnvVarTest(phenoteo$X180knob.,genoteo,phenoteo$Altitude)
EnvVarTest(phenoteo$TR1MB,genoteo,phenoteo$Altitude)
EnvVarTest(phenoteo$TR1.,genoteo,phenoteo$Altitude)
EnvVarTest(phenoteo$CentCMB,genoteo,phenoteo$Altitude)
EnvVarTest(phenoteo$CentC.,genoteo,phenoteo$Altitude)
phenoparv <-read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Teosinte_parv_avg.csv",header=TRUE)
genoparv <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/TeosinteParv_Bayenv.csv",header=FALSE)
EnvVarTest(phenoparv$X180knobMB,genoparv,phenoparv$Altitude)
EnvVarTest(phenoparv$X180knob.,genoparv,phenoparv$Altitude)
EnvVarTest(phenoparv$TR1MB,genoparv,phenoparv$Altitude)
EnvVarTest(phenoparv$TR1.,genoparv,phenoparv$Altitude)
EnvVarTest(phenoparv$CentCMB,genoparv,phenoparv$Altitude)
EnvVarTest(phenoparv$CentC.,genoparv,phenoparv$Altitude)
phenomex <-read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/PhenotypeData/Teosinte_mex_avg.csv",header=TRUE)
genomex <- read.csv("~/Documents/Projects/Genome_Size_Analysis/Github_ParallelGS/SNP_data/TeosinteMex_Bayenv.csv",header=FALSE)
EnvVarTest(phenomex$X180knobMB,genomex,phenomex$Altitude)
EnvVarTest(phenomex$X180knob.,genomex,phenomex$Altitude)
EnvVarTest(phenomex$TR1MB,genomex,phenomex$Altitude)
EnvVarTest(phenomex$TR1.,genomex,phenomex$Altitude)
EnvVarTest(phenomex$CentCMB,genomex,phenomex$Altitude)
EnvVarTest(phenomex$CentC.,genomex,phenomex$Altitude)
EnvVarTest(phenoorder$X180knobMB,A,phenoorder$Altitude)
EnvVarTest(phenoorder$X180knob.,A,phenoorder$Altitude)
EnvVarTest(phenoorder$TotallTeMB,A,phenoorder$Altitude)
EnvVarTest(phenoorder$TotallTe.,A,phenoorder$Altitude)
EnvVarTest(phenoorder$TR1MB,A,phenoorder$Altitude)
EnvVarTest(phenoorder$TR1.,A,phenoorder$Altitude)
EnvVarTest(phenoorder$CentCMB,A,phenoorder$Altitude)
EnvVarTest(phenoorder$CentC.,A,phenoorder$Altitude)
EnvVarTest(phenoorder$CRMallMB,A,phenoorder$Altitude)
EnvVarTest(phenoorder$CRMall.,A,phenoorder$Altitude)
plot(phenoorder$CRMall. ~ phenoorder$Altitude)
plot(phenoorder$CRMallMB ~ phenoorder$Altitude)
plot(phenoorder$CRMall. ~ phenoorder$Altitude)
EnvVarTest(phenoorder$X180knobMB,A,phenoorder$Altitude)
EnvVarTest(phenoorder$X180knob.,A,phenoorder$Altitude)
EnvVarTest(phenoorder$TotallTeMB,A,phenoorder$Altitude)
EnvVarTest(phenoorder$TotallTe.,A,phenoorder$Altitude)
EnvVarTest(phenoorder$TotallTeMB,A,phenoorder$Altitude)
EnvVarTest(phenoorder$TotallTe.,A,phenoorder$Altitude)
plot(phenoorder$TotalTE. ~ phenoorder$Altitude)
plot(phenoorder$TotallTE. ~ phenoorder$Altitude)
plot(phenoorder$TotallTeMB ~ phenoorder$Altitude)
plot(phenoorder$TotallTe. ~ phenoorder$Altitude)
lm(phenoorder$TotallTe. ~ phenoorder$Altitude)
EnvVarTest(phenoorder$CRMallMB,A,phenoorder$Altitude)
EnvVarTest(phenoorder$CRMall.,A,phenoorder$Altitude)
EnvVarTest(phenoorder$X1C_GS,A,phenoorder$Altitude)
#install.packages("MASS")
library(MASS)
# p = mvn(my + Selection * Altitude, Va * Covariance)
# p will be an output of our phenotypes
mu <- rep(0, 83) #I think since we want 1K sims, we want to make the length of this 1k
Altitude <- phenoorder$Altitude
B <- 10
pizza <- mu + B * Altitude
#covariance matrix is given in A
VA=1 #additive genetics variance
simpheno <- mvrnorm(n=1000,pizza, VA*A) #n=number of samples we have, for maize 83, for allteo 16 pop
#pieces i am missing: where to stick in altitude?  I think it is at the mu
pvals=sapply(1:1000,function(X) EnvVarTest(simpheno[X,],A,Altitude)[3])
#EnvVarTest(simpheno[X,],A,Altitude,verbose=T)
hist(pvals,breaks=100)
plot(density(pvals))
sim <- function ( samples , slope , add.gen.var , gen.covar.mat , altitudes , verbose=F) {
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B <- slope
env.vector <- mu + B * Altitude
VA = add.gen.var
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
pvals=sapply(1:samples,function(X) EnvVarTest(simpheno[X,],gen.covar.mat,Altitude)[3])
hist(pvals,breaks=100)
}
#sim(1000,1,1,A,phenoorder$Altitude)
sim(1000,0,1,A,phenoorder$Altitude)
sim <- function ( samples , slope , add.gen.var , gen.covar.mat , altitudes , verbose=F) {
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B <- slope
env.vector <- mu + B * Altitude
VA = add.gen.var
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
pvals=sapply(1:samples,function(X) EnvVarTest(simpheno[X,],gen.covar.mat,Altitude)[3])
hist(pvals,breaks=100)
}
#sim(1000,1,1,A,phenoorder$Altitude)
sim(1000,0.1,1,A,phenoorder$Altitude)
sim <- function ( samples , slope , add.gen.var , gen.covar.mat , altitudes , verbose=F) {
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B <- slope
env.vector <- mu + B * Altitude
VA = add.gen.var
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
pvals=sapply(1:samples,function(X) EnvVarTest(simpheno[X,],gen.covar.mat,Altitude)[3])
hist(pvals,breaks=100)
}
#sim(1000,1,1,A,phenoorder$Altitude)
sim(1000,0.01,1,A,phenoorder$Altitude)
sim <- function ( samples , slope , add.gen.var , gen.covar.mat , altitudes , verbose=F) {
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B <- slope
env.vector <- mu + B * Altitude
VA = add.gen.var
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
pvals=sapply(1:samples,function(X) EnvVarTest(simpheno[X,],gen.covar.mat,Altitude)[3])
hist(pvals,breaks=100)
}
#sim(1000,1,1,A,phenoorder$Altitude)
sim(1000,0.001,1,A,phenoorder$Altitude)
sim <- function ( samples , slope , add.gen.var , gen.covar.mat , altitudes , verbose=F) {
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B <- slope
env.vector <- mu + B * Altitude
VA = add.gen.var
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
pvals=sapply(1:samples,function(X) EnvVarTest(simpheno[X,],gen.covar.mat,Altitude)[3])
hist(pvals,breaks=100)
}
#sim(1000,1,1,A,phenoorder$Altitude)
sim(1000,0.00001,1,A,phenoorder$Altitude)
sim <- function ( samples , slope , add.gen.var , gen.covar.mat , altitudes , verbose=F) {
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B <- slope
env.vector <- mu + B * Altitude
VA = add.gen.var
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
pvals=sapply(1:samples,function(X) EnvVarTest(simpheno[X,],gen.covar.mat,Altitude)[3])
hist(pvals,breaks=100)
}
#sim(1000,1,1,A,phenoorder$Altitude)
sim(1000,0.0001,1,A,phenoorder$Altitude)
sim <- function ( samples , slope , add.gen.var , gen.covar.mat , altitudes , verbose=F) {
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B <- slope
env.vector <- mu + B * Altitude
VA = add.gen.var
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
pvals=sapply(1:samples,function(X) EnvVarTest(simpheno[X,],gen.covar.mat,Altitude)[3])
hist(pvals,breaks=100)
}
#sim(1000,1,1,A,phenoorder$Altitude)
sim(1000,0.001,1,A,phenoorder$Altitude)
sim(1,0.001,1,A,phenoorder$Altitude,verbose=T)
sim(1000,0.001,1,A,phenoorder$Altitude,verbose=T)
sim <- function ( samples , slope , add.gen.var , gen.covar.mat , altitudes , verbose=F) {
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B <- slope
env.vector <- mu + B * Altitude
VA = add.gen.var
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
pvals=sapply(1:samples,function(X) EnvVarTest(simpheno[X,],gen.covar.mat,Altitude)[3])
hist(pvals,breaks=100)
}
#sim(1000,1,1,A,phenoorder$Altitude)
#sim(1000,0.001,1,A,phenoorder$Altitude,verbose=T)
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B <- slope
env.vector <- mu + B * Altitude
VA = add.gen.var
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
pvals=sapply(1:samples,function(X) EnvVarTest(simpheno[X,],gen.covar.mat,Altitude)[3])
hist(pvals,breaks=100)
mu <- rep(0, 83)
Altitude <- altitudes
GCM <- gen.covar.mat
B=0.001
altitudes=phenoorder$Altitude
VA=1
GCM<-A
env.vector <- mu + B * Altitude
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
n=1
samples=1
simpheno <- mvrnorm(n=samples,env.vector, VA*GCM)
simpheno
EnvVarTest(simpheno[X,]
gen.covar.mat,Altitude)
EnvVarTest(simpheno[1,],GCM,Altitude)
EnvVarTest(simpheno,GCM,Altitude)
library ( mvtnorm )
EnvVarTest <- function ( phenos , kinship.mat , test.vector ) {
# 'phenos' is a vector containing the phenotype (i.e. number of repeats) for each individual; dimensions are N x 1
# 'kinship.mat' is the kinship matrix; dimensions are N x N; rows and columns need to be in the same order as the phenotypes in the vector
# test.vector is the environmental factor of interest (in this case altitude)
#recover()
eigs <- eigen ( kinship.mat ) ## get eigendecomposition of kinship matrix
rt.inv <- eigs$vec %*% diag ( 1/sqrt(eigs$val) ) %*% t ( eigs$vec )# calculate inverse of the square root matrix
cent.test.vector <- test.vector - mean ( test.vector )
cent.phenos <- phenos - mean ( phenos )
rotated.phenos <- rt.inv %*% cent.phenos # rotate phenotypes from population space into principal component space
unit.test.vector <- cent.test.vector / (sqrt ( 2 * sum ( cent.test.vector^2 ) ) ) # scale to be unit length after rotation
#recover()
rotated.vector <- rt.inv %*% cent.test.vector # rotate environmental variable from population space into principal component space
model <- lm ( rotated.phenos ~ rotated.vector) # fit regression model
r.sq <- cor.test ( rotated.phenos , rotated.vector )$estimate^2 # get r^2
ANOVA <- anova ( model ) # get p value
# expected fraction of variance associated with environmental variable under neutrality
F.env <- ( t ( unit.test.vector ) %*% kinship.mat %*% unit.test.vector ) / sum ( diag ( kinship.mat ) )
sums.sq <- cumsum ( ANOVA[2] )
# fraction of variance associated with environmental variable for trait
Q.env <- sums.sq[1,]/ ( sums.sq[2,] )
if(verbose==T){print(ANOVA)}
return ( c ( model$coef[2] , r.sq , ANOVA[5][[1]][1] , ANOVA[3][2,] , F.env , Q.env ) ) # return regression coefficient, r-squared, p value, estimate of Va, F statistic, Q statistic
}
EnvVarTest(simpheno,GCM,Altitude)
EnvVarTest(simpheno,GCM,Altitude,Verbose=T)
library ( mvtnorm )
EnvVarTest <- function ( phenos , kinship.mat , test.vector, verbose=F ) {
# 'phenos' is a vector containing the phenotype (i.e. number of repeats) for each individual; dimensions are N x 1
# 'kinship.mat' is the kinship matrix; dimensions are N x N; rows and columns need to be in the same order as the phenotypes in the vector
# test.vector is the environmental factor of interest (in this case altitude)
#recover()
eigs <- eigen ( kinship.mat ) ## get eigendecomposition of kinship matrix
rt.inv <- eigs$vec %*% diag ( 1/sqrt(eigs$val) ) %*% t ( eigs$vec )# calculate inverse of the square root matrix
cent.test.vector <- test.vector - mean ( test.vector )
cent.phenos <- phenos - mean ( phenos )
rotated.phenos <- rt.inv %*% cent.phenos # rotate phenotypes from population space into principal component space
unit.test.vector <- cent.test.vector / (sqrt ( 2 * sum ( cent.test.vector^2 ) ) ) # scale to be unit length after rotation
#recover()
rotated.vector <- rt.inv %*% cent.test.vector # rotate environmental variable from population space into principal component space
model <- lm ( rotated.phenos ~ rotated.vector) # fit regression model
r.sq <- cor.test ( rotated.phenos , rotated.vector )$estimate^2 # get r^2
ANOVA <- anova ( model ) # get p value
# expected fraction of variance associated with environmental variable under neutrality
F.env <- ( t ( unit.test.vector ) %*% kinship.mat %*% unit.test.vector ) / sum ( diag ( kinship.mat ) )
sums.sq <- cumsum ( ANOVA[2] )
# fraction of variance associated with environmental variable for trait
Q.env <- sums.sq[1,]/ ( sums.sq[2,] )
if(verbose==T){print(ANOVA)}
return ( c ( model$coef[2] , r.sq , ANOVA[5][[1]][1] , ANOVA[3][2,] , F.env , Q.env ) ) # return regression coefficient, r-squared, p value, estimate of Va, F statistic, Q statistic
}
EnvVarTest(simpheno,GCM,Altitude,verbose=T)
